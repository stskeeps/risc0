// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>
#include <cstdlib>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 96> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/bigint.cpp":298:50)
  Fp x0(65280);
  // loc("cirgen/circuit/rv32im/bigint.cpp":128:38)
  Fp x1(8388608);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":96:16)
  Fp x2(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":94:19)
  Fp x3(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":83:32)
  Fp x4(219862);
  // loc("cirgen/circuit/rv32im/sha.cpp":384:24)
  Fp x5(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":344:18)
  Fp x6(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":316:24)
  Fp x7(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":312:24)
  Fp x8(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x9(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x10(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x11(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x12(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x14(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x21(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":48:22)
  Fp x22(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x23(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x24(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":107:25)
  Fp x25(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":31:45)
  Fp x26(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":15:39)
  Fp x27(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":139:49)
  Fp x28(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":134:21)
  Fp x29(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x30(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x31(131072);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x32(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x33(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x34(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":79:79)
  Fp x35(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":79:56)
  Fp x36(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x37(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x38(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x39(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x40(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x41(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x42(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x43(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x44(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x45(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x46(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x47(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x48(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x49(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x50(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x51(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x52(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x53(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x54(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x55(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x56(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x57(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x58(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x59(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x60(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x61(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x62(128);
  // loc("cirgen/circuit/rv32im/body.cpp":84:18)
  Fp x63(16);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x64(15);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x65(14);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x66(13);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x67(12);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x68(11);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x69(10);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x70(9);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x71(8);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x72(7);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x73(6);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x74(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x75(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x76(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x77(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x78(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x79(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x80(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x81(56284855);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x82(56284854);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x83(56284853);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x84(56284852);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x85(56284851);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x86(56284850);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x87(56284849);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x88(56284848);
  // loc("cirgen/components/bytes.cpp":97:30)
  Fp x89(2005401601);
  // loc("cirgen/components/bytes.cpp":97:30)
  Fp x90(256);
  // loc("cirgen/components/bytes.cpp":96:26)
  Fp x91(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x92(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x93(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x94(0);
  // loc("cirgen/circuit/rv32im/top.cpp":17:17)
  Fp x95(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":49:25))
  auto x96 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x96 != Fp::invalid());
  if (x96 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/top.cpp":17:75))
    auto x97 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x97 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":17:17)
    auto x98 = x95 - x97;
    // loc("Top/Code/Mux/1(SetupInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x99 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x99 != Fp::invalid());
    if (x98 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][3 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][4 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
    // loc("cirgen/components/bytes.cpp":117:17)
    auto x100 = x95 - x98;
    if (x100 != 0) {
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x101 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x101 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x102 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x102 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x103 = x102 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x104 = (x103 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x105 = x95 - x104;
        if (x105 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x106 = x102 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x106);
            reg = x106;
          }
        }
        if (x104 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x107 = x101 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x107);
            reg = x107;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x108 = args[2][3 * steps + ((cycle - 0) & mask)];
      assert(x108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x109 = x108 - x101;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x110 = args[2][4 * steps + ((cycle - 0) & mask)];
      assert(x110 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x111 = x110 - x102;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x112 = x109 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x113 = x109 * x112;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x113 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x114 = x111 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x115 = x109 * x114;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x115 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x116 = x111 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x117 = x112 * x116;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x117 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x118 = args[2][3 * steps + ((cycle - 0) & mask)];
    assert(x118 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x119 = args[2][4 * steps + ((cycle - 0) & mask)];
    assert(x119 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x120 = x119 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x121 = (x120 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x122 = x95 - x121;
      if (x122 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x118);
          reg = x118;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x123 = x119 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x123);
          reg = x123;
        }
      }
      if (x121 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x124 = x118 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x124);
          reg = x124;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x125 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x126 = x125 - x118;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x127 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x127 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x128 = x127 - x119;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x129 = x126 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x130 = x126 * x129;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x130 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x131 = x128 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x132 = x126 * x131;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x132 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x133 = x128 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x134 = x129 * x133;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x134 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x135 = x127 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x136 = (x135 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x137 = x95 - x136;
      if (x137 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x138 = x127 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x138);
          reg = x138;
        }
      }
      if (x136 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x139 = x125 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x139);
          reg = x139;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x140 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x140 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x141 = x140 - x125;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x142 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x142 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x143 = x142 - x127;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x144 = x141 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x145 = x141 * x144;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x145 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x146 = x143 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x147 = x141 * x146;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x147 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x148 = x143 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x149 = x144 * x148;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x149 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x150 = x142 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x151 = (x150 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x152 = x95 - x151;
      if (x152 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x140);
          reg = x140;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x153 = x142 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x153);
          reg = x153;
        }
      }
      if (x151 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x154 = x140 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x154);
          reg = x154;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x155 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x155 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x156 = x155 - x140;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x157 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x157 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x158 = x157 - x142;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x159 = x156 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x160 = x156 * x159;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x160 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x161 = x158 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x162 = x156 * x161;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x162 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x163 = x158 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x164 = x159 * x163;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x164 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x165 = x157 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x166 = (x165 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x167 = x95 - x166;
      if (x167 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x155);
          reg = x155;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x168 = x157 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x168);
          reg = x168;
        }
      }
      if (x166 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x169 = x155 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x169);
          reg = x169;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x170 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x170 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x171 = x170 - x155;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x172 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x172 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x173 = x172 - x157;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x174 = x171 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x175 = x171 * x174;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x175 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x176 = x173 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x177 = x171 * x176;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x177 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x178 = x173 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x179 = x174 * x178;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x179 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x180 = x172 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x181 = (x180 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x182 = x95 - x181;
      if (x182 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x170);
          reg = x170;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x183 = x172 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x183);
          reg = x183;
        }
      }
      if (x181 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x184 = x170 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x184);
          reg = x184;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x185 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x185 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x186 = x185 - x170;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x187 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x187 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x188 = x187 - x172;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x189 = x186 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x190 = x186 * x189;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x190 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x191 = x188 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x192 = x186 * x191;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x192 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x193 = x188 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x194 = x189 * x193;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x194 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x195 = x187 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x196 = (x195 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x197 = x95 - x196;
      if (x197 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x185);
          reg = x185;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x198 = x187 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x198);
          reg = x198;
        }
      }
      if (x196 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x199 = x185 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x199);
          reg = x199;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x200 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x200 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x201 = x200 - x185;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x202 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x202 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x203 = x202 - x187;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x204 = x201 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x205 = x201 * x204;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x205 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x206 = x203 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x207 = x201 * x206;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x207 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x208 = x203 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x209 = x204 * x208;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x209 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x210 = x202 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x211 = (x210 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x212 = x95 - x211;
      if (x212 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x200);
          reg = x200;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x213 = x202 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x213);
          reg = x213;
        }
      }
      if (x211 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x214 = x200 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x214);
          reg = x214;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x215 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x215 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x216 = x215 - x200;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x217 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x217 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x218 = x217 - x202;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x219 = x216 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x220 = x216 * x219;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x220 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x221 = x218 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x222 = x216 * x221;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x222 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x223 = x218 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x224 = x219 * x223;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x224 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x99 != 0) {
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
    // loc("cirgen/components/bytes.cpp":130:16)
    auto x225 = x95 - x99;
    if (x225 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x226 = x217 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x227 = (x226 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x228 = x95 - x227;
        if (x228 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x215);
            reg = x215;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x229 = x217 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x229);
            reg = x229;
          }
        }
        if (x227 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x230 = x215 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x230);
            reg = x230;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x231 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x232 = x231 - x215;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x233 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x233 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x234 = x233 - x217;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x235 = x232 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x236 = x232 * x235;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x236 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x237 = x234 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x238 = x232 * x237;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x238 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x239 = x234 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x240 = x235 * x239;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x240 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x241 = x233 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x242 = (x241 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x243 = x95 - x242;
        if (x243 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x231);
            reg = x231;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x244 = x233 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x244);
            reg = x244;
          }
        }
        if (x242 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x245 = x231 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x245);
            reg = x245;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x246 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x246 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x247 = x246 - x231;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x248 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x248 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x249 = x248 - x233;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x250 = x247 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x251 = x247 * x250;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x251 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x252 = x249 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x253 = x247 * x252;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x253 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x254 = x249 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x255 = x250 * x254;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x255 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x256 = x248 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x257 = (x256 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x258 = x95 - x257;
        if (x258 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x246);
            reg = x246;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x259 = x248 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x259);
            reg = x259;
          }
        }
        if (x257 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x260 = x246 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x260);
            reg = x260;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x261 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x261 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x262 = x261 - x246;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x263 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x263 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x264 = x263 - x248;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x265 = x262 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x266 = x262 * x265;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x266 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x267 = x264 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x268 = x262 * x267;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x268 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x269 = x264 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x270 = x265 * x269;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x270 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x271 = x263 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x272 = (x271 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x273 = x95 - x272;
        if (x273 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x261);
            reg = x261;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x274 = x263 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x274);
            reg = x274;
          }
        }
        if (x272 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x275 = x261 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x275);
            reg = x275;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x276 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x276 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x277 = x276 - x261;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x278 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x278 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x279 = x278 - x263;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x280 = x277 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x281 = x277 * x280;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x281 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x282 = x279 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x283 = x277 * x282;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x283 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x284 = x279 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x285 = x280 * x284;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x285 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x286 = x278 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x287 = (x286 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x288 = x95 - x287;
        if (x288 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x276);
            reg = x276;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x289 = x278 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x289);
            reg = x289;
          }
        }
        if (x287 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x290 = x276 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x290);
            reg = x290;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x291 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x292 = x291 - x276;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x293 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x293 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x294 = x293 - x278;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x295 = x292 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x296 = x292 * x295;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x296 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x297 = x294 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x298 = x292 * x297;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x298 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x299 = x294 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x300 = x295 * x299;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x300 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x301 = x293 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x302 = (x301 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x303 = x95 - x302;
        if (x303 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x291);
            reg = x291;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x304 = x293 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x304);
            reg = x304;
          }
        }
        if (x302 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x305 = x291 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x305);
            reg = x305;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x306 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x306 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x307 = x306 - x291;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x308 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x308 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x309 = x308 - x293;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x310 = x307 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x311 = x307 * x310;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x311 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x312 = x309 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x313 = x307 * x312;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x313 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x314 = x309 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x315 = x310 * x314;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x315 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x316 = x308 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x317 = (x316 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x318 = x95 - x317;
        if (x318 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x306);
            reg = x306;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x319 = x308 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x319);
            reg = x319;
          }
        }
        if (x317 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x320 = x306 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x320);
            reg = x320;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x321 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x321 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x322 = x321 - x306;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x323 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x323 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x324 = x323 - x308;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x325 = x322 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x326 = x322 * x325;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x326 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x327 = x324 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x328 = x322 * x327;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x328 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x329 = x324 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x330 = x325 * x329;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x330 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x331 = x323 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x332 = (x331 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x333 = x95 - x332;
        if (x333 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x321);
            reg = x321;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x334 = x323 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x334);
            reg = x334;
          }
        }
        if (x332 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x335 = x321 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x335);
            reg = x335;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x336 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x336 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x337 = x336 - x321;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x338 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x338 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x339 = x338 - x323;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x340 = x337 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x341 = x337 * x340;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x341 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x342 = x339 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x343 = x337 * x342;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x343 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x344 = x339 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x345 = x340 * x344;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x345 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x346 = x338 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x347 = (x346 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x348 = x95 - x347;
        if (x348 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x336);
            reg = x336;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x349 = x338 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x349);
            reg = x349;
          }
        }
        if (x347 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x350 = x336 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x350);
            reg = x350;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x351 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x351 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x352 = x351 - x336;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x353 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x353 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x354 = x353 - x338;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x355 = x352 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x356 = x352 * x355;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x356 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x357 = x354 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x358 = x352 * x357;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x358 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x359 = x354 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x360 = x355 * x359;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x360 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x361 = x353 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x362 = (x361 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x363 = x95 - x362;
        if (x363 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x351);
            reg = x351;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x364 = x353 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x364);
            reg = x364;
          }
        }
        if (x362 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x365 = x351 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x365);
            reg = x365;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x366 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x366 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x367 = x366 - x351;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x368 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x368 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x369 = x368 - x353;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x370 = x367 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x371 = x367 * x370;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x371 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x372 = x369 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x373 = x367 * x372;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x373 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x374 = x369 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x375 = x370 * x374;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x375 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x376 = x368 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x377 = (x376 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x378 = x95 - x377;
        if (x378 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x366);
            reg = x366;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x379 = x368 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x379);
            reg = x379;
          }
        }
        if (x377 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x380 = x366 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x380);
            reg = x380;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x381 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x381 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x382 = x381 - x366;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x383 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x383 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x384 = x383 - x368;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x385 = x382 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x386 = x382 * x385;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x386 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x387 = x384 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x388 = x382 * x387;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x388 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x389 = x384 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x390 = x385 * x389;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x390 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x391 = x383 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x392 = (x391 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x393 = x95 - x392;
        if (x393 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x381);
            reg = x381;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x394 = x383 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x394);
            reg = x394;
          }
        }
        if (x392 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x395 = x381 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x395);
            reg = x395;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x396 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x397 = x396 - x381;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x398 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x398 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x399 = x398 - x383;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x400 = x397 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x401 = x397 * x400;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x401 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x402 = x399 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x403 = x397 * x402;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x403 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x404 = x399 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x405 = x400 * x404;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x405 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x406 = x398 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x407 = (x406 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x408 = x95 - x407;
        if (x408 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x396);
            reg = x396;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x409 = x398 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x409);
            reg = x409;
          }
        }
        if (x407 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x410 = x396 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x410);
            reg = x410;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x411 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x411 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x412 = x411 - x396;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x413 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x413 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x414 = x413 - x398;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x415 = x412 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x416 = x412 * x415;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x416 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x417 = x414 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x418 = x412 * x417;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x418 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x419 = x414 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x420 = x415 * x419;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x420 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":49:25))
  auto x421 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x421 != Fp::invalid());
  if (x421 != 0) {
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x422 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x422 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x423 = Fp(x422.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x423);
        reg = x423;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x424 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x424 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x425 = x422 - x424;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x426 = x425 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x427 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x428 = Fp(x427.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x428);
        reg = x428;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x429 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x429 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x430 = x427 - x429;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x431 = x430 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x432 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x432 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x433 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x434 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x435 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x429);
      reg = x429;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    {
      host_args.at(0) = x435;
      host_args.at(1) = x424;
      host_args.at(2) = x432;
      host_args.at(3) = x429;
      host_args.at(4) = x433;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x436 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x437 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x438 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x439 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x440 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x441 = Fp(x440.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x441);
        reg = x441;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x442 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x443 = x440 - x442;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x444 = x443 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x445 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x446 = Fp(x445.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x446);
        reg = x446;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x447 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x448 = x445 - x447;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x449 = x448 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x450 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x450 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x451 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":41:44)
    auto x452 = x435 + x95;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    {
      host_args.at(0) = x452;
      host_args.at(1) = x442;
      host_args.at(2) = x450;
      host_args.at(3) = x447;
      host_args.at(4) = x451;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x453 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x454 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x455 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x456 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x457 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x458 = Fp(x457.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x458);
        reg = x458;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x459 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x459 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x460 = x457 - x459;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x461 = x460 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x462 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x463 = Fp(x462.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x463);
        reg = x463;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x464 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x464 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x465 = x462 - x464;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x466 = x465 * x89;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x467 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x467 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x468 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":41:44)
    auto x469 = x435 + x92;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x464);
      reg = x464;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    {
      host_args.at(0) = x469;
      host_args.at(1) = x459;
      host_args.at(2) = x467;
      host_args.at(3) = x464;
      host_args.at(4) = x468;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x470 = args[2][131 * steps + ((cycle - 0) & mask)];
    assert(x470 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x471 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x472 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x472 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
    auto x473 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":49:25))
  auto x474 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x474 != Fp::invalid());
  if (x474 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x475 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x476 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x477 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    if (x477 != 0) {
      if (x476 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[0](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x478 = args[1][4];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[0](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x479 = args[1][5];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[0](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x480 = args[1][6];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[0](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x481 = args[1][7];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x478);
          reg = x478;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x479);
          reg = x479;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x480);
          reg = x480;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x481);
          reg = x481;
        }
        {
          host_args.at(0) = x88;
          host_args.at(1) = x478;
          host_args.at(2) = x479;
          host_args.at(3) = x480;
          host_args.at(4) = x481;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x482 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x482 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x483 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x483 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x484 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x484 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x485 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x485 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x482);
          reg = x482;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x484);
          reg = x484;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x485);
          reg = x485;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[1](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x486 = args[1][8];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[1](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x487 = args[1][9];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[1](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x488 = args[1][10];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[1](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x489 = args[1][11];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x486);
          reg = x486;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x487);
          reg = x487;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x488);
          reg = x488;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x489);
          reg = x489;
        }
        {
          host_args.at(0) = x87;
          host_args.at(1) = x486;
          host_args.at(2) = x487;
          host_args.at(3) = x488;
          host_args.at(4) = x489;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x490 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x490 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x491 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x491 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x492 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x492 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x493 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x493 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x490);
          reg = x490;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x491);
          reg = x491;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x492);
          reg = x492;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x493);
          reg = x493;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[2](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x494 = args[1][12];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[2](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x495 = args[1][13];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[2](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x496 = args[1][14];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[2](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x497 = args[1][15];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x494);
          reg = x494;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x495);
          reg = x495;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x496);
          reg = x496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x497);
          reg = x497;
        }
        {
          host_args.at(0) = x86;
          host_args.at(1) = x494;
          host_args.at(2) = x495;
          host_args.at(3) = x496;
          host_args.at(4) = x497;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x498 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x498 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x499 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x499 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x500 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x500 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x501 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x501 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x498);
          reg = x498;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x500);
          reg = x500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x501);
          reg = x501;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[3](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x502 = args[1][16];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[3](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x503 = args[1][17];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[3](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x504 = args[1][18];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[3](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x505 = args[1][19];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x502);
          reg = x502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x503);
          reg = x503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x505);
          reg = x505;
        }
        {
          host_args.at(0) = x85;
          host_args.at(1) = x502;
          host_args.at(2) = x503;
          host_args.at(3) = x504;
          host_args.at(4) = x505;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x506 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x506 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x507 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x507 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x508 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x508 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x509 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x509 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x506);
          reg = x506;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x507);
          reg = x507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x508);
          reg = x508;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x509);
          reg = x509;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":54:17)
      auto x510 = x95 - x476;
      if (x510 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[4](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x511 = args[1][20];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[4](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x512 = args[1][21];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[4](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x513 = args[1][22];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[4](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x514 = args[1][23];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x512);
          reg = x512;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x513);
          reg = x513;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x514);
          reg = x514;
        }
        {
          host_args.at(0) = x84;
          host_args.at(1) = x511;
          host_args.at(2) = x512;
          host_args.at(3) = x513;
          host_args.at(4) = x514;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x515 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x515 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x516 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x516 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x517 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x517 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x518 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x518 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x516);
          reg = x516;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x517);
          reg = x517;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x518);
          reg = x518;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[5](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x519 = args[1][24];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[5](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x520 = args[1][25];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[5](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x521 = args[1][26];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[5](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x522 = args[1][27];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x520);
          reg = x520;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x521);
          reg = x521;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        {
          host_args.at(0) = x83;
          host_args.at(1) = x519;
          host_args.at(2) = x520;
          host_args.at(3) = x521;
          host_args.at(4) = x522;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x523 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x523 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x524 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x524 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x525 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x525 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x526 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x526 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[6](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x527 = args[1][28];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[6](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x528 = args[1][29];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[6](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x529 = args[1][30];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[6](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x530 = args[1][31];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x529);
          reg = x529;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x530);
          reg = x530;
        }
        {
          host_args.at(0) = x82;
          host_args.at(1) = x527;
          host_args.at(2) = x528;
          host_args.at(3) = x529;
          host_args.at(4) = x530;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x531 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x531 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x532 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x532 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x533 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x533 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x534 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x534 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x532);
          reg = x532;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x533);
          reg = x533;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[7](U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x535 = args[1][32];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[7](U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x536 = args[1][33];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[7](U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x537 = args[1][34];
        // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/image_id[7](U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x538 = args[1][35];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x538);
          reg = x538;
        }
        {
          host_args.at(0) = x81;
          host_args.at(1) = x535;
          host_args.at(2) = x536;
          host_args.at(3) = x537;
          host_args.at(4) = x538;
          host_args.at(5) = x94;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x539 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x539 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x540 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x540 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x541 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x541 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x542 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x542 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x540);
          reg = x540;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x541);
          reg = x541;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x542);
          reg = x542;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/pc(U32Reg)/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x543 = args[1][0];
      // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/pc(U32Reg)/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x544 = args[1][1];
      // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/pc(U32Reg)/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x545 = args[1][2];
      // loc("Top/mux(Mux)/reset(ResetStep)/pre(SystemState)/pc(U32Reg)/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x546 = args[1][3];
      // loc("./cirgen/components/u32.h":25:12)
      auto x547 = x544 * x90;
      // loc("./cirgen/components/u32.h":24:12)
      auto x548 = x543 + x547;
      // loc("./cirgen/components/u32.h":26:12)
      auto x549 = x545 * x80;
      // loc("./cirgen/components/u32.h":24:12)
      auto x550 = x548 + x549;
      // loc("./cirgen/components/u32.h":27:12)
      auto x551 = x546 * x79;
      // loc("./cirgen/components/u32.h":24:12)
      auto x552 = x550 + x551;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x553 = x552 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x554 = Fp(x553.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x554);
          reg = x554;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x555 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x555 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x556 = x553 - x555;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x557 = x556 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x558 = Fp(x557.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x558);
          reg = x558;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x559 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x559 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x560 = x557 - x559;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x561 = x560 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x562 = Fp(x561.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x562);
          reg = x562;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x563 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x563 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x564 = x561 - x563;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x565 = x564 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x566 = Fp(x565.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x566);
          reg = x566;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x567 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x567 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x568 = x565 - x567;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x569 = x568 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x569);
        reg = x569;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x570 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x570 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x571 = x95 - x570;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x572 = x570 * x571;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x572);
        reg = x572;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x573 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x573 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x574 = x92 - x570;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x575 = x573 * x574;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x575 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    }
    // loc("cirgen/circuit/rv32im/body.cpp":63:16)
    auto x576 = x95 - x477;
    if (x576 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x577 = args[2][6 * steps + ((cycle - 1) & mask)];
      assert(x577 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x578 = args[2][7 * steps + ((cycle - 1) & mask)];
      assert(x578 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":28:10)
      auto x579 = x578 * x90;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x580 = x577 + x579;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x581 = args[2][8 * steps + ((cycle - 1) & mask)];
      assert(x581 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":29:10)
      auto x582 = x581 * x80;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x583 = x580 + x582;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x584 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x584 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":30:10)
      auto x585 = x584 * x79;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x586 = x583 + x585;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x587 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":31:10)
      auto x588 = x587 * x75;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x589 = x586 + x588;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x590 = x589 - x78;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x591 = x590 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x592 = Fp(x591.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x592);
          reg = x592;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x593 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x593 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x594 = x591 - x593;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x595 = x594 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x596 = Fp(x595.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x596);
          reg = x596;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x597 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x597 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x598 = x595 - x597;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x599 = x598 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x600 = Fp(x599.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x600);
          reg = x600;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x601 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x601 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x602 = x599 - x601;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x603 = x602 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x604 = Fp(x603.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x604);
          reg = x604;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x605 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x605 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x606 = x603 - x605;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x607 = x606 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x607);
        reg = x607;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x608 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x608 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x609 = x95 - x608;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x610 = x608 * x609;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x610);
        reg = x610;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x611 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x611 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x612 = x92 - x608;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x613 = x611 * x612;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x613 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      if (x476 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x614 = args[2][101 * steps + ((cycle - 1) & mask)];
        assert(x614 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x615 = args[2][102 * steps + ((cycle - 1) & mask)];
        assert(x615 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x616 = x615 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x617 = x614 + x616;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x618 = args[2][103 * steps + ((cycle - 1) & mask)];
        assert(x618 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x619 = x618 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x620 = x617 + x619;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x621 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x621 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x622 = x621 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x623 = x620 + x622;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x624 = args[2][105 * steps + ((cycle - 1) & mask)];
        assert(x624 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x625 = x624 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x626 = x623 + x625;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x627 = args[2][106 * steps + ((cycle - 1) & mask)];
        assert(x627 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x628 = x627 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x629 = x626 + x628;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x630 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x630 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x631 = x630 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x632 = x629 + x631;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x633 = args[2][108 * steps + ((cycle - 1) & mask)];
        assert(x633 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x634 = x633 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x635 = x632 + x634;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x636 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x637 = x636 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x638 = x635 + x637;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x639 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x640 = x639 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x641 = x638 + x640;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x642 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x642 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x643 = x642 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x644 = x641 + x643;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x645 = args[2][112 * steps + ((cycle - 1) & mask)];
        assert(x645 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x646 = x645 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x647 = x644 + x646;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x648 = args[2][113 * steps + ((cycle - 1) & mask)];
        assert(x648 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x649 = x648 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x650 = x647 + x649;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x651 = args[2][114 * steps + ((cycle - 1) & mask)];
        assert(x651 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x652 = x651 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x653 = x650 + x652;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x654 = args[2][115 * steps + ((cycle - 1) & mask)];
        assert(x654 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x655 = x654 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x656 = x653 + x655;
        // loc("cirgen/circuit/rv32im/body.cpp":68:42)
        auto x657 = x656 - x64;
        // loc("cirgen/circuit/rv32im/body.cpp":68:42)
        if (x657 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:68");
        {
          host_args.at(0) = x88;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x658 = host_outs.at(0);
          auto x659 = host_outs.at(1);
          auto x660 = host_outs.at(2);
          auto x661 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x658);
            reg = x658;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x659);
            reg = x659;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x660);
            reg = x660;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x662 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x662 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x663 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x663 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x664 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x664 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x665 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x662);
          reg = x662;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x663);
          reg = x663;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x664);
          reg = x664;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x665);
          reg = x665;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][40] = x662;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][41] = x663;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][42] = x664;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][43] = x665;
        {
          host_args.at(0) = x87;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x666 = host_outs.at(0);
          auto x667 = host_outs.at(1);
          auto x668 = host_outs.at(2);
          auto x669 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x666);
            reg = x666;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x667);
            reg = x667;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x668);
            reg = x668;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x669);
            reg = x669;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x670 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x670 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x671 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x671 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x672 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x672 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x673 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x673 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x670);
          reg = x670;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x671);
          reg = x671;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x672);
          reg = x672;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x673);
          reg = x673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][44] = x670;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][45] = x671;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][46] = x672;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][47] = x673;
        {
          host_args.at(0) = x86;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x674 = host_outs.at(0);
          auto x675 = host_outs.at(1);
          auto x676 = host_outs.at(2);
          auto x677 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x674);
            reg = x674;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x675);
            reg = x675;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x676);
            reg = x676;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x677);
            reg = x677;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x678 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x678 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x679 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x679 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x680 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x680 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x681 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x681 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x678);
          reg = x678;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x679);
          reg = x679;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x680);
          reg = x680;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x681);
          reg = x681;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][48] = x678;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][49] = x679;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][50] = x680;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][51] = x681;
        {
          host_args.at(0) = x85;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x682 = host_outs.at(0);
          auto x683 = host_outs.at(1);
          auto x684 = host_outs.at(2);
          auto x685 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x683);
            reg = x683;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x684);
            reg = x684;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x685);
            reg = x685;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x686 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x686 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x687 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x687 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x688 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x688 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x689 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x689 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x686);
          reg = x686;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x687);
          reg = x687;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x688);
          reg = x688;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x689);
          reg = x689;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][52] = x686;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][53] = x687;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][54] = x688;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][55] = x689;
        // loc("cirgen/circuit/rv32im/body.cpp":35:52)
        auto x690 = x608 * x78;
        // loc("cirgen/circuit/rv32im/body.cpp":35:41)
        auto x691 = x605 + x690;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][36] = x593;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][37] = x597;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][38] = x601;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][39] = x691;
      }
      // loc("cirgen/circuit/rv32im/body.cpp":76:17)
      auto x692 = x95 - x476;
      if (x692 != 0) {
        {
          host_args.at(0) = x84;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x693 = host_outs.at(0);
          auto x694 = host_outs.at(1);
          auto x695 = host_outs.at(2);
          auto x696 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x693);
            reg = x693;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x694);
            reg = x694;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x695);
            reg = x695;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x697 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x697 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x698 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x698 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x699 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x699 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x700 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x700 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x697);
          reg = x697;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x698);
          reg = x698;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x699);
          reg = x699;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x700);
          reg = x700;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][56] = x697;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][57] = x698;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][58] = x699;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][59] = x700;
        {
          host_args.at(0) = x83;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x701 = host_outs.at(0);
          auto x702 = host_outs.at(1);
          auto x703 = host_outs.at(2);
          auto x704 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x701);
            reg = x701;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x702);
            reg = x702;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x703);
            reg = x703;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x704);
            reg = x704;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x705 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x705 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x706 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x706 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x707 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x707 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x708 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x708 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x705);
          reg = x705;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x706);
          reg = x706;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x707);
          reg = x707;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x708);
          reg = x708;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][60] = x705;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][61] = x706;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][62] = x707;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][63] = x708;
        {
          host_args.at(0) = x82;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x709 = host_outs.at(0);
          auto x710 = host_outs.at(1);
          auto x711 = host_outs.at(2);
          auto x712 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x709);
            reg = x709;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x710);
            reg = x710;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x711);
            reg = x711;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x712);
            reg = x712;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x713 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x714 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x715 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x715 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x716 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x716 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x713);
          reg = x713;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x714);
          reg = x714;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x715);
          reg = x715;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x716);
          reg = x716;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][64] = x713;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][65] = x714;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][66] = x715;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][67] = x716;
        {
          host_args.at(0) = x81;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x717 = host_outs.at(0);
          auto x718 = host_outs.at(1);
          auto x719 = host_outs.at(2);
          auto x720 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x717);
            reg = x717;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x718);
            reg = x718;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x719);
            reg = x719;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x720);
            reg = x720;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x721 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x721 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x722 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x723 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x724 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x475);
          reg = x475;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x721);
          reg = x721;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x722);
          reg = x722;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x723);
          reg = x723;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x724);
          reg = x724;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][68] = x721;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][69] = x722;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][70] = x723;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][71] = x724;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":84:3)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x63);
      reg = x63;
    }
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x725 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x725 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x726 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x726 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x727 = x726 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x728 = x725 + x727;
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x729 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x729 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x730 = x729 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x731 = x728 + x730;
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x732 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x732 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x733 = x732 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x734 = x731 + x733;
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x735 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x735 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x736 = x735 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x737 = x734 + x736;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x738 = x737 - x78;
    host_args.at(0) = x475;
    host_args.at(1) = x738;
    host(ctx, "log", "%u: Reset: PC = %10x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":49:25))
  auto x739 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x739 != Fp::invalid());
  if (x739 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x740 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x740 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x741 = args[2][6 * steps + ((cycle - 1) & mask)];
    assert(x741 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x742 = args[2][7 * steps + ((cycle - 1) & mask)];
    assert(x742 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x743 = x742 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x744 = x741 + x743;
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x745 = args[2][8 * steps + ((cycle - 1) & mask)];
    assert(x745 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x746 = x745 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x747 = x744 + x746;
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x748 = args[2][70 * steps + ((cycle - 1) & mask)];
    assert(x748 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x749 = x748 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x750 = x747 + x749;
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x751 = args[2][71 * steps + ((cycle - 1) & mask)];
    assert(x751 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x752 = x751 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x753 = x750 + x752;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x754 = x753 - x78;
    {
      // loc("Top/mux(Mux)/body(BodyStep)/Reg"("cirgen/circuit/rv32im/body.cpp":136:45))
      auto x755 = args[2][99 * steps + ((cycle - 1) & mask)];
      assert(x755 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":137:24)
      auto x756 = x755 - x63;
      // loc("cirgen/circuit/rv32im/body.cpp":137:24)
      auto x757 = (x756 == 0) ? Fp(1) : Fp(0);
      if (x757 != 0) {
        host_args.at(0) = x740;
        host_args.at(1) = x754;
        host(ctx, "log", "%u: BODY pc: %10x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x754;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x740;
        host_args.at(1) = x754;
        host(ctx, "getMajor", "", host_args.data(), 2, host_outs.data(), 1);
        auto x758 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x759 = (x758 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x759);
            reg = x759;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x760 = x758 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x761 = (x760 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x761);
            reg = x761;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x762 = x758 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x763 = (x762 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x763);
            reg = x763;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x764 = x758 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x765 = (x764 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x765);
            reg = x765;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x766 = x758 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x767 = (x766 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x767);
            reg = x767;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x768 = x758 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x769 = (x768 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x769);
            reg = x769;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x770 = x758 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x771 = (x770 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x771);
            reg = x771;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x772 = x758 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x773 = (x772 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x773);
            reg = x773;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x774 = x758 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x775 = (x774 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x775);
            reg = x775;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x776 = x758 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x777 = (x776 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x777);
            reg = x777;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x778 = x758 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x779 = (x778 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x779);
            reg = x779;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x780 = x758 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x781 = (x780 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x781);
            reg = x781;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x782 = x758 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x783 = (x782 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x783);
            reg = x783;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x784 = x758 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x785 = (x784 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x785);
            reg = x785;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x786 = x758 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x787 = (x786 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x787);
            reg = x787;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x788 = x758 - x64;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x789 = (x788 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x789);
            reg = x789;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x790 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x790 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x791 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x791 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x792 = x791 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x793 = x790 + x792;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x794 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x794 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x795 = x794 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x796 = x793 + x795;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x797 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x797 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x798 = x797 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x799 = x796 + x798;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x800 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x800 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x801 = x800 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x802 = x799 + x801;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x803 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x803 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x804 = x803 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x805 = x802 + x804;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x806 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x806 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x807 = x806 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x808 = x805 + x807;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x809 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x809 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x810 = x809 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x811 = x808 + x810;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x812 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x812 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x813 = x812 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x814 = x811 + x813;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x815 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x815 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x816 = x815 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x817 = x814 + x816;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x818 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x818 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x819 = x818 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x820 = x817 + x819;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x821 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x821 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x822 = x821 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x823 = x820 + x822;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x824 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x824 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x825 = x824 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x826 = x823 + x825;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x827 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x827 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x828 = x827 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x829 = x826 + x828;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x830 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x830 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x831 = x830 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x832 = x829 + x831;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x833 = x832 - x758;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x833 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":144:20)
      auto x834 = x95 - x757;
      if (x834 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x835 = x755 - x64;
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x836 = (x835 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x837 = x95 - x836;
        if (x837 != 0) {
          host_args.at(0) = x740;
          host_args.at(1) = x754;
          host_args.at(2) = x755;
          host(ctx, "log", "%u: BODY pc: %10x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x838 = (x755 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x838);
            reg = x838;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x839 = x755 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x840 = (x839 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x840);
            reg = x840;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x841 = x755 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x842 = (x841 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x842);
            reg = x842;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x843 = x755 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x844 = (x843 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x844);
            reg = x844;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x845 = x755 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x846 = (x845 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x846);
            reg = x846;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x847 = x755 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x848 = (x847 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x848);
            reg = x848;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x849 = x755 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x850 = (x849 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x850);
            reg = x850;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x851 = x755 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x852 = (x851 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x852);
            reg = x852;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x853 = x755 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x854 = (x853 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x854);
            reg = x854;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x855 = x755 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x856 = (x855 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x856);
            reg = x856;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x857 = x755 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x858 = (x857 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x858);
            reg = x858;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x859 = x755 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x860 = (x859 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x860);
            reg = x860;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x861 = x755 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x862 = (x861 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x862);
            reg = x862;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x863 = x755 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x864 = (x863 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x864);
            reg = x864;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x865 = x755 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x866 = (x865 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x866);
            reg = x866;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x836);
            reg = x836;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x867 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x867 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x868 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x868 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x869 = x868 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x870 = x867 + x869;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x871 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x872 = x871 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x873 = x870 + x872;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x874 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x874 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x875 = x874 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x876 = x873 + x875;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x877 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x877 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x878 = x877 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x879 = x876 + x878;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x880 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x880 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x881 = x880 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x882 = x879 + x881;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x883 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x883 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x884 = x883 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x885 = x882 + x884;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x886 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x886 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x887 = x886 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x888 = x885 + x887;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x889 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x890 = x889 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x891 = x888 + x890;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x892 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x892 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x893 = x892 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x894 = x891 + x893;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x895 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x895 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x896 = x895 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x897 = x894 + x896;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x898 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x898 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x899 = x898 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x900 = x897 + x899;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x901 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x901 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x902 = x901 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x903 = x900 + x902;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x904 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x904 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x905 = x904 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x906 = x903 + x905;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x907 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x907 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x908 = x907 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x909 = x906 + x908;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x910 = x909 - x755;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x910 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":49:25))
    auto x911 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x911 != Fp::invalid());
    if (x911 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x912 = x754 * x76;
      {
        host_args.at(0) = x912;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x913 = host_outs.at(0);
        auto x914 = host_outs.at(1);
        auto x915 = host_outs.at(2);
        auto x916 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x913);
          reg = x913;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x914);
          reg = x914;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x915);
          reg = x915;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x916);
          reg = x916;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x917 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x917 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x918 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x918 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x919 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x919 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x920 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x920 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x912);
        reg = x912;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x917);
        reg = x917;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x918);
        reg = x918;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x919);
        reg = x919;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x920);
        reg = x920;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x921 = Fp(x920.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x922 = x921 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x922);
          reg = x922;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x923 = Fp(x920.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x924 = x923 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x924);
          reg = x924;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x925 = Fp(x920.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x926 = x925 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x926);
          reg = x926;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x927 = Fp(x920.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x928 = x927 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x928);
          reg = x928;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x929 = Fp(x920.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x930 = x929 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x930);
          reg = x930;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x931 = Fp(x920.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x931);
          reg = x931;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x932 = Fp(x919.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x933 = x932 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x933);
          reg = x933;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x934 = Fp(x919.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x935 = x934 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x935);
          reg = x935;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x936 = Fp(x919.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x937 = x936 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x937);
          reg = x937;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x938 = Fp(x919.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x939 = x938 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x939);
          reg = x939;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x940 = Fp(x919.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x940);
          reg = x940;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x941 = Fp(x918.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x942 = x941 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x942);
          reg = x942;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x943 = Fp(x918.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x944 = x943 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x944);
          reg = x944;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x945 = Fp(x918.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x946 = x945 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x946);
          reg = x946;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x947 = Fp(x918.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x948 = x947 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x948);
          reg = x948;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x949 = Fp(x918.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x949);
          reg = x949;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x950 = Fp(x917.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x951 = x950 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x951);
          reg = x951;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x952 = Fp(x917.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x952);
          reg = x952;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x953 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x954 = x953 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x955 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x955 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x956 = x955 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x957 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x958 = x957 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x959 = x956 + x958;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x960 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x961 = x960 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x962 = x959 + x961;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x963 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x964 = x962 + x963;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x965 = x954 + x964;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x966 = x965 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x967 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x967 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x968 = x966 + x967;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x969 = x920 - x968;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x969 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x970 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x970 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x971 = x970 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x972 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x973 = x972 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x974 = x971 + x973;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x975 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x975 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x976 = x974 + x975;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x977 = x976 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x978 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x978 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x979 = x978 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x980 = x977 + x979;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x981 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x982 = x980 + x981;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x983 = x919 - x982;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x983 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x984 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x985 = x984 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x986 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x986 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x987 = x986 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x988 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x989 = x987 + x988;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x990 = x989 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x991 = x985 + x990;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x992 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x992 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x993 = x992 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x994 = x991 + x993;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x995 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x995 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x996 = x994 + x995;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x997 = x918 - x996;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x997 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x998 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x998 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x999 = x998 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1000 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1000 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1001 = x999 + x1000;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1002 = x917 - x1001;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1002 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x917;
        host_args.at(1) = x918;
        host_args.at(2) = x919;
        host_args.at(3) = x920;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1003 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1004 = (x1003 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1005 = x1003 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1006 = (x1005 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1007 = x1003 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1008 = (x1007 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1008);
            reg = x1008;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1009 = x1003 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1010 = (x1009 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1011 = x1003 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1012 = (x1011 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1013 = x1003 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1014 = (x1013 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1015 = x1003 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1016 = (x1015 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1017 = x1003 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1018 = (x1017 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1019 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1019 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1020 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1020 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1021 = x1020 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1022 = x1019 + x1021;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1023 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1023 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1024 = x1023 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1025 = x1022 + x1024;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1026 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1026 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1027 = x1026 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1028 = x1025 + x1027;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1029 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1029 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1030 = x1029 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1031 = x1028 + x1030;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1032 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1032 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1033 = x1032 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1034 = x1031 + x1033;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1035 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1035 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1036 = x1035 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1037 = x1034 + x1036;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1038 = x1037 - x1003;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1038 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x1039 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1039 != Fp::invalid());
        if (x1039 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x1040 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1040 != Fp::invalid());
        if (x1040 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x1041 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1041 != Fp::invalid());
        if (x1041 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x1042 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1042 != Fp::invalid());
        if (x1042 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x1043 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1043 != Fp::invalid());
        if (x1043 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x1044 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1044 != Fp::invalid());
        if (x1044 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x1045 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1045 != Fp::invalid());
        if (x1045 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x1046 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1046 != Fp::invalid());
        if (x1046 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1047 = x960 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1048 = x963 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1049 = x1047 + x1048;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1050 = x967 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1051 = x1050 + x976;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1052 = x1049 + x1051;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1053 = x953 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1054 = x955 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1055 = x1053 + x1054;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1056 = x1055 + x957;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1057 = x953 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1052);
            reg = x1052;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1056);
            reg = x1056;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1057);
            reg = x1057;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1057);
            reg = x1057;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1058 = x978 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1059 = x981 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1060 = x1058 + x1059;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1061 = x1060 + x984;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1062 = x1061 + x47;
      {
        host_args.at(0) = x1062;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1063 = host_outs.at(0);
        auto x1064 = host_outs.at(1);
        auto x1065 = host_outs.at(2);
        auto x1066 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1063);
          reg = x1063;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1064);
          reg = x1064;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1065);
          reg = x1065;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1066);
          reg = x1066;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1067 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1068 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1069 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1070 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1070 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1062);
        reg = x1062;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1067);
        reg = x1067;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1068);
        reg = x1068;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1069);
        reg = x1069;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1070);
        reg = x1070;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1071 = x967 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1072 = x1071 + x976;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1073 = x1072 + x47;
      {
        host_args.at(0) = x1073;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1074 = host_outs.at(0);
        auto x1075 = host_outs.at(1);
        auto x1076 = host_outs.at(2);
        auto x1077 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1074);
          reg = x1074;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1075);
          reg = x1075;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1076);
          reg = x1076;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1077);
          reg = x1077;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1078 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1078 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1079 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1079 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1080 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1081 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1081 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1073);
        reg = x1073;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1078);
        reg = x1078;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1079);
        reg = x1079;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1080);
        reg = x1080;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1081);
        reg = x1081;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1082 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1082 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1083 = x95 - x1082;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1084 = x1083 * x1067;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1085 = x1083 * x1068;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1086 = x1083 * x1069;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1087 = x1083 * x1070;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1088 = x751 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1089 = x748 + x1088;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1090 = x741 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1091 = x1082 * x1090;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1092 = x1082 * x742;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1093 = x1082 * x745;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1094 = x1082 * x1089;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1095 = x1084 + x1091;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1096 = x1085 + x1092;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1097 = x1086 + x1093;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1098 = x1087 + x1094;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1099 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1099 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1100 = x95 - x1099;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1101 = x1100 * x1078;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1102 = x1100 * x1079;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1103 = x1100 * x1080;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1104 = x1100 * x1081;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1105 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1105 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1106 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1106 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1107 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1107 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1108 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1108 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1109 = x1099 * x1105;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1110 = x1099 * x1106;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1111 = x1099 * x1107;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1112 = x1099 * x1108;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1113 = x1101 + x1109;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1114 = x1102 + x1110;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1115 = x1103 + x1111;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1116 = x1104 + x1112;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1117 = Fp(x1098.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1118 = x1117 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1118);
          reg = x1118;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1119 = Fp(x1098.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1120 = x1119 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1120);
          reg = x1120;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1121 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1121 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1122 = x1121 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1123 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1123 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1124 = x1123 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1125 = x1122 + x1124;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1126 = x1098 - x1125;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1126 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1127 = Fp(x1116.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1128 = x1127 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1128);
          reg = x1128;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1129 = Fp(x1116.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1130 = x1129 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1130);
          reg = x1130;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1131 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1131 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1132 = x1131 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1133 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1133 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1134 = x1133 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1135 = x1132 + x1134;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1136 = x1116 - x1135;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1136 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1113);
        reg = x1113;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1114);
        reg = x1114;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1115);
        reg = x1115;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1116);
        reg = x1116;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1137 = Fp(x1095.asUInt32() & x1113.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1138 = Fp(x1096.asUInt32() & x1114.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1139 = Fp(x1097.asUInt32() & x1115.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1140 = Fp(x1098.asUInt32() & x1116.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1137);
          reg = x1137;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1138);
          reg = x1138;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1139);
          reg = x1139;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1140);
          reg = x1140;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1141 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1141 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1142 = x1141 * x1095;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1143 = x1141 * x1096;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1144 = x1141 * x1097;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1145 = x1141 * x1098;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1146 = x1142 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1147 = x1143 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1148 = x1144 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1149 = x1145 + x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1150 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1150 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1151 = x1150 * x1113;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1152 = x1150 * x1114;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1153 = x1150 * x1115;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1154 = x1150 * x1116;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1155 = x1146 + x1151;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1156 = x1147 + x1152;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1157 = x1148 + x1153;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1158 = x1149 + x1154;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1159 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1159 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1160 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1160 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1161 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1161 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1162 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1162 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1163 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1163 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1164 = x1159 * x1160;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1165 = x1159 * x1161;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1166 = x1159 * x1162;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1167 = x1159 * x1163;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1168 = x1155 + x1164;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1169 = x1156 + x1165;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1170 = x1157 + x1166;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1171 = x1158 + x1167;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1172 = x1169 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1173 = x1168 + x1172;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1174 = Fp(x1173.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1174);
          reg = x1174;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1175 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1175 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1176 = x1173 - x1175;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1177 = x1176 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1178 = Fp(x1177.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1178);
          reg = x1178;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1179 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1179 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1180 = x1177 - x1179;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1181 = x1180 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1181);
        reg = x1181;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1182 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1182 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1183 = x1182 + x1170;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1184 = x1171 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1185 = x1183 + x1184;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1186 = Fp(x1185.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1186);
          reg = x1186;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1187 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1187 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1188 = x1185 - x1187;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1189 = x1188 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1190 = Fp(x1189.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1190);
          reg = x1190;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1191 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1191 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1192 = x1189 - x1191;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1193 = x1192 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1193);
        reg = x1193;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1194 = Fp(x1191.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1195 = x1194 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1195);
          reg = x1195;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1196 = Fp(x1191.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1197 = x1196 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1197);
          reg = x1197;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1198 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1198 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1199 = x1198 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1200 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1200 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1201 = x1200 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1202 = x1199 + x1201;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1203 = x1191 - x1202;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1203 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1204 = x95 - x1131;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1205 = x1121 * x1204;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1206 = x95 - x1198;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1207 = x1205 * x1206;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1208 = x95 - x1121;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1209 = x1208 * x1131;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1210 = x1209 * x1198;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1211 = x1207 + x1210;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1211);
        reg = x1211;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1212 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1212 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1213 = x1212 + x1198;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1214 = x1212 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1215 = x1214 * x1198;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1216 = x1213 - x1215;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1216);
        reg = x1216;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1217 = x1179 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1218 = x1175 + x1217;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1219 = (x1218 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1219);
          reg = x1219;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1220 = inv(x1218);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1220);
          reg = x1220;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1221 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x1221 != Fp::invalid());
      if (x1221 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1218 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1222 = x95 - x1221;
      if (x1222 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1223 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x1223 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1224 = x1218 * x1223;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1225 = x1224 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1225 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1226 = x1191 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1227 = x1187 + x1226;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1228 = x1222 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1229 = x1227 + x1228;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1230 = (x1229 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1230);
          reg = x1230;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1231 = inv(x1229);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1231);
          reg = x1231;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1232 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x1232 != Fp::invalid());
      if (x1232 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1229 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1233 = x95 - x1232;
      if (x1233 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1234 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x1234 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1235 = x1229 * x1234;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1236 = x1235 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1236 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1237 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1237 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1238 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1239 = x95 - x1238;
      host_args.at(0) = x1105;
      host_args.at(1) = x1106;
      host_args.at(2) = x1107;
      host_args.at(3) = x1108;
      host_args.at(4) = x1061;
      host_args.at(5) = x1067;
      host_args.at(6) = x1068;
      host_args.at(7) = x1069;
      host_args.at(8) = x1070;
      host_args.at(9) = x1072;
      host_args.at(10) = x1078;
      host_args.at(11) = x1079;
      host_args.at(12) = x1080;
      host_args.at(13) = x1081;
      host_args.at(14) = x1095;
      host_args.at(15) = x1096;
      host_args.at(16) = x1097;
      host_args.at(17) = x1098;
      host_args.at(18) = x1113;
      host_args.at(19) = x1114;
      host_args.at(20) = x1115;
      host_args.at(21) = x1116;
      host_args.at(22) = x1175;
      host_args.at(23) = x1179;
      host_args.at(24) = x1187;
      host_args.at(25) = x1191;
      host_args.at(26) = x1232;
      host_args.at(27) = x1237;
      host_args.at(28) = x1239;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1240 = x992 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1241 = x995 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1242 = x1240 + x1241;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1243 = x1242 + x998;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1244 = (x1243 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1244);
          reg = x1244;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1245 = inv(x1243);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1245);
          reg = x1245;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1246 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x1246 != Fp::invalid());
      if (x1246 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1243 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1247 = x95 - x1246;
      if (x1247 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1248 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x1248 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1249 = x1243 * x1248;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1250 = x1249 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1250 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x1251 = x754 + x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1252 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1252 != Fp::invalid());
      if (x1252 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1253 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1253 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x989 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1254 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1255 = Fp(x1254.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1255);
            reg = x1255;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1256 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1256 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1257 = x1254 - x1256;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1258 = x1257 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1259 = Fp(x1258.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1259);
            reg = x1259;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1260 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1260 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1261 = x1258 - x1260;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1262 = x1261 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1263 = Fp(x1262.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1263);
            reg = x1263;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1264 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1264 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1265 = x1262 - x1264;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1266 = x1265 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1267 = Fp(x1266.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1267);
            reg = x1267;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1268 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1268 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1269 = x1266 - x1268;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1270 = x1269 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1270);
          reg = x1270;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1271 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1271 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1272 = x95 - x1271;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1273 = x1271 * x1272;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1273);
          reg = x1273;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1274 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1274 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1275 = x92 - x1271;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1276 = x1274 * x1275;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1276 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1277 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1277 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1277);
          reg = x1277;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1278 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1278;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1279 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1279 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1280 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1280 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1281 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1281 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1282 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1282 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1278);
            reg = x1278;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1279);
            reg = x1279;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1280);
            reg = x1280;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1281);
            reg = x1281;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1282);
            reg = x1282;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1283 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1283 != Fp::invalid());
      if (x1283 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1284 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1284 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x989 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1285 = x965 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1285 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1286 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1287 = Fp(x1286.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1287);
            reg = x1287;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1288 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1288 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1289 = x1286 - x1288;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1290 = x1289 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1291 = Fp(x1290.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1291);
            reg = x1291;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1292 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1292 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1293 = x1290 - x1292;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1294 = x1293 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1295 = Fp(x1294.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1296 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1296 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1297 = x1294 - x1296;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1298 = x1297 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1299 = Fp(x1298.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1300 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1301 = x1298 - x1300;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1302 = x1301 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1302);
          reg = x1302;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1303 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1304 = x95 - x1303;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1305 = x1303 * x1304;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1305);
          reg = x1305;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1306 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1307 = x92 - x1303;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1308 = x1306 * x1307;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1308 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1309 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1309 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1309);
          reg = x1309;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1310 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1310;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1311 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1311 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1312 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1312 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1313 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1313 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1314 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1314 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1310);
            reg = x1310;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1311);
            reg = x1311;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1312);
            reg = x1312;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1313);
            reg = x1313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1314);
            reg = x1314;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1315 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1315 != Fp::invalid());
      if (x1315 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1316 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1316 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1317 = x989 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1317 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1318 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1319 = Fp(x1318.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1319);
            reg = x1319;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1320 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1320 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1321 = x1318 - x1320;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1322 = x1321 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1323 = Fp(x1322.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1323);
            reg = x1323;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1324 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1324 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1325 = x1322 - x1324;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1326 = x1325 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1327 = Fp(x1326.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1327);
            reg = x1327;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1328 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1328 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1329 = x1326 - x1328;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1330 = x1329 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1331 = Fp(x1330.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1331);
            reg = x1331;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1332 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1333 = x1330 - x1332;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1334 = x1333 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1334);
          reg = x1334;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1335 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1336 = x95 - x1335;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1337 = x1335 * x1336;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1337);
          reg = x1337;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1338 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1339 = x92 - x1335;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1340 = x1338 * x1339;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1340 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1341 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1341 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1341);
          reg = x1341;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1342 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1342;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1343 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1343 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1344 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1344 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1345 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1345 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1346 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1346 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1342);
            reg = x1342;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1344);
            reg = x1344;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1345);
            reg = x1345;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1346);
            reg = x1346;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1347 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      if (x1347 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1348 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1348 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1349 = x989 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1349 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1350 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1351 = Fp(x1350.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1351);
            reg = x1351;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1352 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1352 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1353 = x1350 - x1352;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1354 = x1353 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1355 = Fp(x1354.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1355);
            reg = x1355;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1356 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1356 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1357 = x1354 - x1356;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1358 = x1357 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1359 = Fp(x1358.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1359);
            reg = x1359;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1360 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1360 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1361 = x1358 - x1360;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1362 = x1361 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1363 = Fp(x1362.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1363);
            reg = x1363;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1364 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1364 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1365 = x1362 - x1364;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1366 = x1365 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1366);
          reg = x1366;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1367 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1367 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1368 = x95 - x1367;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1369 = x1367 * x1368;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1370 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1370 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1371 = x92 - x1367;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1372 = x1370 * x1371;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1372 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1373 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1373 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1373);
          reg = x1373;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1374 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1374;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1375 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1375 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1376 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1376 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1377 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1377 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1378 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1378 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1374);
            reg = x1374;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1375);
            reg = x1375;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1376);
            reg = x1376;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1377);
            reg = x1377;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1378);
            reg = x1378;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1379 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1379 != Fp::invalid());
      if (x1379 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1380 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1380 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1381 = x989 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1381 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1382 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1383 = Fp(x1382.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1383);
            reg = x1383;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1384 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1384 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1385 = x1382 - x1384;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1386 = x1385 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1387 = Fp(x1386.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1387);
            reg = x1387;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1388 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1388 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1389 = x1386 - x1388;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1390 = x1389 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1391 = Fp(x1390.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1391);
            reg = x1391;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1392 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1392 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1393 = x1390 - x1392;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1394 = x1393 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1395 = Fp(x1394.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1395);
            reg = x1395;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1396 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1396 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1397 = x1394 - x1396;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1398 = x1397 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1398);
          reg = x1398;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1399 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1399 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1400 = x95 - x1399;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1401 = x1399 * x1400;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1401);
          reg = x1401;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1402 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1402 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1403 = x92 - x1399;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1404 = x1402 * x1403;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1404 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1405 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1405 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1405);
          reg = x1405;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1406 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1406;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1407 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1407 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1408 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1408 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1409 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1409 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1410 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1410 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1406);
            reg = x1406;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1407);
            reg = x1407;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1408);
            reg = x1408;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1409);
            reg = x1409;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1410);
            reg = x1410;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1411 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1411 != Fp::invalid());
      if (x1411 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1412 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1412 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1413 = x989 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1413 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1414 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1415 = Fp(x1414.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1415);
            reg = x1415;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1416 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1416 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1417 = x1414 - x1416;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1418 = x1417 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1419 = Fp(x1418.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1419);
            reg = x1419;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1420 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1420 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1421 = x1418 - x1420;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1422 = x1421 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1423 = Fp(x1422.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1423);
            reg = x1423;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1424 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1424 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1425 = x1422 - x1424;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1426 = x1425 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1427 = Fp(x1426.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1427);
            reg = x1427;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1428 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1429 = x1426 - x1428;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1430 = x1429 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1430);
          reg = x1430;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1431 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1432 = x95 - x1431;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1433 = x1431 * x1432;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1433);
          reg = x1433;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1434 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1434 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1435 = x92 - x1431;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1436 = x1434 * x1435;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1436 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1437 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1437 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1437);
          reg = x1437;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1237;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1438 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1237);
            reg = x1237;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1438;
            host_args.at(1) = x1237;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1439 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1439 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1440 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1440 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1441 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1441 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1442 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1442 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1438);
            reg = x1438;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1439);
            reg = x1439;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1441);
            reg = x1441;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1442);
            reg = x1442;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1443 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1443 != Fp::invalid());
      if (x1443 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1444 = x1000 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1444 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1445 = x989 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1445 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x965 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1446 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1447 = Fp(x1446.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1447);
            reg = x1447;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1448 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1448 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1449 = x1446 - x1448;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1450 = x1449 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1451 = Fp(x1450.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1451);
            reg = x1451;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1452 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1452 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1453 = x1450 - x1452;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1454 = x1453 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1455 = Fp(x1454.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1455);
            reg = x1455;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1456 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1457 = x1454 - x1456;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1458 = x1457 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1459 = Fp(x1458.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1459);
            reg = x1459;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1460 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1460 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1461 = x1458 - x1460;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1462 = x1461 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1462);
          reg = x1462;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1463 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1463 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1464 = x95 - x1463;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1465 = x1463 * x1464;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1465);
          reg = x1465;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1466 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1466 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1467 = x92 - x1463;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1468 = x1466 * x1467;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1468 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1469 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1469);
          reg = x1469;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1239;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1470 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1239);
            reg = x1239;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1470;
            host_args.at(1) = x1239;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1471 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1471 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1472 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1472 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1473 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1473 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1474 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1474 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1470);
            reg = x1470;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1471);
            reg = x1471;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1472);
            reg = x1472;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1473);
            reg = x1473;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1474);
            reg = x1474;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1475 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1475 != Fp::invalid());
      if (x1475 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1476 = x1000 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1476 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x989 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1477 = x960 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1478 = x963 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1479 = x1477 + x1478;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1480 = x1479 + x1072;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1481 = x953 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1482 = x955 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1483 = x1481 + x1482;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1484 = x1483 + x957;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1485 = x953 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1480);
          reg = x1480;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1484);
          reg = x1484;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1485);
          reg = x1485;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1485);
          reg = x1485;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1486 = x1251 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1487 = Fp(x1486.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1488 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1488 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1489 = x1486 - x1488;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1490 = x1489 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1491 = Fp(x1490.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1491);
            reg = x1491;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1492 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1492 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1493 = x1490 - x1492;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1494 = x1493 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1495 = Fp(x1494.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1495);
            reg = x1495;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1496 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1496 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1497 = x1494 - x1496;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1498 = x1497 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1499 = Fp(x1498.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1500 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1501 = x1498 - x1500;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1502 = x1501 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1502);
          reg = x1502;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1503 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1504 = x95 - x1503;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1505 = x1503 * x1504;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1505);
          reg = x1505;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1506 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1506 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1507 = x92 - x1503;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1508 = x1506 * x1507;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1508 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1509 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1509 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1509);
          reg = x1509;
        }
        if (x1247 != 0) {
          host_args.at(0) = x1243;
          host_args.at(1) = x1175;
          host_args.at(2) = x1179;
          host_args.at(3) = x1187;
          host_args.at(4) = x1191;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1510 = x1243 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
          {
            host_args.at(0) = x1510;
            host_args.at(1) = x1175;
            host_args.at(2) = x1179;
            host_args.at(3) = x1187;
            host_args.at(4) = x1191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1511 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1511 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1512 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1512 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1513 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1513 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1514 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1514 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1510);
            reg = x1510;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1512);
            reg = x1512;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1513);
            reg = x1513;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1514);
            reg = x1514;
          }
        }
        if (x1246 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":49:25))
    auto x1515 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x1515 != Fp::invalid());
    if (x1515 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1516 = x754 * x76;
      {
        host_args.at(0) = x1516;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1517 = host_outs.at(0);
        auto x1518 = host_outs.at(1);
        auto x1519 = host_outs.at(2);
        auto x1520 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1517);
          reg = x1517;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1518);
          reg = x1518;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1519);
          reg = x1519;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1520);
          reg = x1520;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1521 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1521 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1522 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1522 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1523 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1523 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1524 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1524 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1516);
        reg = x1516;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1521);
        reg = x1521;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1522);
        reg = x1522;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1523);
        reg = x1523;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1524);
        reg = x1524;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1525 = Fp(x1524.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1526 = x1525 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1526);
          reg = x1526;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1527 = Fp(x1524.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1528 = x1527 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1528);
          reg = x1528;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1529 = Fp(x1524.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1530 = x1529 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1530);
          reg = x1530;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1531 = Fp(x1524.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1532 = x1531 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1532);
          reg = x1532;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1533 = Fp(x1524.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1534 = x1533 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1534);
          reg = x1534;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1535 = Fp(x1524.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1535);
          reg = x1535;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1536 = Fp(x1523.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1537 = x1536 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1537);
          reg = x1537;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1538 = Fp(x1523.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1539 = x1538 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1539);
          reg = x1539;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1540 = Fp(x1523.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1541 = x1540 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1541);
          reg = x1541;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1542 = Fp(x1523.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1543 = x1542 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1543);
          reg = x1543;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1544 = Fp(x1523.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1544);
          reg = x1544;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1545 = Fp(x1522.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1546 = x1545 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1546);
          reg = x1546;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1547 = Fp(x1522.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1548 = x1547 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1548);
          reg = x1548;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1549 = Fp(x1522.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1550 = x1549 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1550);
          reg = x1550;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1551 = Fp(x1522.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1552 = x1551 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1552);
          reg = x1552;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1553 = Fp(x1522.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1553);
          reg = x1553;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1554 = Fp(x1521.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1555 = x1554 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1555);
          reg = x1555;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1556 = Fp(x1521.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1556);
          reg = x1556;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1557 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1557 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1558 = x1557 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1559 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1559 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1560 = x1559 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1561 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1561 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1562 = x1561 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1563 = x1560 + x1562;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1564 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1564 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1565 = x1564 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1566 = x1563 + x1565;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1567 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1567 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1568 = x1566 + x1567;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1569 = x1558 + x1568;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1570 = x1569 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1571 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1571 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1572 = x1570 + x1571;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1573 = x1524 - x1572;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1573 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1574 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1574 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1575 = x1574 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1576 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1576 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1577 = x1576 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1578 = x1575 + x1577;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1579 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1579 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1580 = x1578 + x1579;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1581 = x1580 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1582 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1582 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1583 = x1582 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1584 = x1581 + x1583;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1585 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1585 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1586 = x1584 + x1585;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1587 = x1523 - x1586;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1587 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1588 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1588 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1589 = x1588 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1590 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1590 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1591 = x1590 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1592 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1592 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1593 = x1591 + x1592;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1594 = x1593 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1595 = x1589 + x1594;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1596 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1596 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1597 = x1596 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1598 = x1595 + x1597;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1599 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1599 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1600 = x1598 + x1599;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1601 = x1522 - x1600;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1601 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1602 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1603 = x1602 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1604 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1605 = x1603 + x1604;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1606 = x1521 - x1605;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1606 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1521;
        host_args.at(1) = x1522;
        host_args.at(2) = x1523;
        host_args.at(3) = x1524;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1607 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1608 = (x1607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1608);
            reg = x1608;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1609 = x1607 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1610 = (x1609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1610);
            reg = x1610;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1611 = x1607 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1612 = (x1611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1612);
            reg = x1612;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1613 = x1607 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1614 = (x1613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1614);
            reg = x1614;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1615 = x1607 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1616 = (x1615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1616);
            reg = x1616;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1617 = x1607 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1618 = (x1617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1618);
            reg = x1618;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1619 = x1607 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1620 = (x1619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1620);
            reg = x1620;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1621 = x1607 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1622 = (x1621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1622);
            reg = x1622;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1623 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1623 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1624 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1624 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1625 = x1624 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1626 = x1623 + x1625;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1627 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1627 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1628 = x1627 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1629 = x1626 + x1628;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1630 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1630 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1631 = x1630 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1632 = x1629 + x1631;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1633 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1633 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1634 = x1633 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1635 = x1632 + x1634;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1636 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1637 = x1636 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1638 = x1635 + x1637;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1639 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1640 = x1639 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1641 = x1638 + x1640;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1642 = x1641 - x1607;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1642 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1643 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1643 != Fp::invalid());
        if (x1643 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1644 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1645 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1646 = x1644 + x1645;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1647 = x1571 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1648 = x1647 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1649 = x1646 + x1648;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1650 = x1557 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1651 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1652 = x1650 + x1651;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1653 = x1652 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1654 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1654);
            reg = x1654;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1654);
            reg = x1654;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1655 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1655 != Fp::invalid());
        if (x1655 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1656 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1657 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1658 = x1656 + x1657;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1659 = x1571 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1660 = x1659 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1661 = x1658 + x1660;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1662 = x1557 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1663 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1664 = x1662 + x1663;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1665 = x1664 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1666 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1666);
            reg = x1666;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1666);
            reg = x1666;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1667 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1667 != Fp::invalid());
        if (x1667 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1668 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1669 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1670 = x1668 + x1669;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1671 = x1571 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1672 = x1671 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1673 = x1670 + x1672;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1674 = x1557 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1675 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1676 = x1674 + x1675;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1677 = x1676 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1678 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1673);
            reg = x1673;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1677);
            reg = x1677;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1678);
            reg = x1678;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1678);
            reg = x1678;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1679 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1679 != Fp::invalid());
        if (x1679 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1680 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1681 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1682 = x1680 + x1681;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1683 = x1571 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1684 = x1683 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1685 = x1682 + x1684;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1686 = x1557 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1687 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1688 = x1686 + x1687;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1689 = x1688 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1690 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1685);
            reg = x1685;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1689);
            reg = x1689;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1690);
            reg = x1690;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1690);
            reg = x1690;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1691 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1691 != Fp::invalid());
        if (x1691 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1692 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1693 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1694 = x1692 + x1693;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1695 = x1571 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1696 = x1695 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1697 = x1694 + x1696;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1698 = x1557 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1699 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1700 = x1698 + x1699;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1701 = x1700 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1702 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1703 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1703 != Fp::invalid());
        if (x1703 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1704 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1705 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1706 = x1704 + x1705;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1707 = x1596 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1708 = x1706 + x1707;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1709 = x1599 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1710 = x1708 + x1709;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1711 = x1557 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1712 = x1602 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1713 = x1711 + x1712;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1714 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1715 = x1713 + x1714;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1716 = x1715 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1717 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1716);
            reg = x1716;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1718 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1718 != Fp::invalid());
        if (x1718 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1719 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1720 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1721 = x1719 + x1720;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1722 = x1596 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1723 = x1721 + x1722;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1724 = x1599 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1725 = x1723 + x1724;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1726 = x1557 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1727 = x1602 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1728 = x1726 + x1727;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1729 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1730 = x1728 + x1729;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1731 = x1730 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1732 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1725);
            reg = x1725;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1731);
            reg = x1731;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1732);
            reg = x1732;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1732);
            reg = x1732;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1733 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1733 != Fp::invalid());
        if (x1733 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1734 = x1564 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1735 = x1567 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1736 = x1734 + x1735;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1737 = x1596 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1738 = x1736 + x1737;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1739 = x1599 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1740 = x1738 + x1739;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1741 = x1557 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1742 = x1602 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1743 = x1741 + x1742;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1744 = x1559 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1745 = x1743 + x1744;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1746 = x1745 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1747 = x1557 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1740);
            reg = x1740;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1746);
            reg = x1746;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1747);
            reg = x1747;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1747);
            reg = x1747;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1748 = x1582 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1749 = x1585 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1750 = x1748 + x1749;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1751 = x1750 + x1588;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1752 = x1751 + x47;
      {
        host_args.at(0) = x1752;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1753 = host_outs.at(0);
        auto x1754 = host_outs.at(1);
        auto x1755 = host_outs.at(2);
        auto x1756 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1755);
          reg = x1755;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1756);
          reg = x1756;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1757 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1757 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1758 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1758 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1759 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1759 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1760 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1760 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1752);
        reg = x1752;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1757);
        reg = x1757;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1758);
        reg = x1758;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1759);
        reg = x1759;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1760);
        reg = x1760;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1761 = x1571 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1762 = x1761 + x1580;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1763 = x1762 + x47;
      {
        host_args.at(0) = x1763;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1764 = host_outs.at(0);
        auto x1765 = host_outs.at(1);
        auto x1766 = host_outs.at(2);
        auto x1767 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1764);
          reg = x1764;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1765);
          reg = x1765;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1766);
          reg = x1766;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1767);
          reg = x1767;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1768 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1768 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1769 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1770 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1771 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1771 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1763);
        reg = x1763;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1768);
        reg = x1768;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1769);
        reg = x1769;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1770);
        reg = x1770;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1771);
        reg = x1771;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1772 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1772 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1773 = x95 - x1772;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1774 = x1773 * x1757;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1775 = x1773 * x1758;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1776 = x1773 * x1759;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1777 = x1773 * x1760;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1778 = x751 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1779 = x748 + x1778;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1780 = x741 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1781 = x1772 * x1780;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1782 = x1772 * x742;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1783 = x1772 * x745;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1784 = x1772 * x1779;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1785 = x1774 + x1781;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1786 = x1775 + x1782;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1787 = x1776 + x1783;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1788 = x1777 + x1784;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1789 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1790 = x95 - x1789;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1791 = x1790 * x1768;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1792 = x1790 * x1769;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1793 = x1790 * x1770;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1794 = x1790 * x1771;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1795 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1795 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1796 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1796 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1797 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1797 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1798 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1798 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1799 = x1789 * x1795;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1800 = x1789 * x1796;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1801 = x1789 * x1797;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1802 = x1789 * x1798;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1803 = x1791 + x1799;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1804 = x1792 + x1800;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1805 = x1793 + x1801;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1806 = x1794 + x1802;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1807 = Fp(x1788.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1808 = x1807 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1808);
          reg = x1808;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1809 = Fp(x1788.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1810 = x1809 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1810);
          reg = x1810;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1811 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1811 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1812 = x1811 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1813 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1813 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1814 = x1813 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1815 = x1812 + x1814;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1816 = x1788 - x1815;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1816 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1817 = Fp(x1806.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1818 = x1817 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1818);
          reg = x1818;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1819 = Fp(x1806.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1820 = x1819 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1820);
          reg = x1820;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1821 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1821 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1822 = x1821 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1823 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1823 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1824 = x1823 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1825 = x1822 + x1824;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1826 = x1806 - x1825;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1826 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1803);
        reg = x1803;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1804);
        reg = x1804;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1805);
        reg = x1805;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1806);
        reg = x1806;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1827 = Fp(x1785.asUInt32() & x1803.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1828 = Fp(x1786.asUInt32() & x1804.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1829 = Fp(x1787.asUInt32() & x1805.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1830 = Fp(x1788.asUInt32() & x1806.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1827);
          reg = x1827;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1828);
          reg = x1828;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1829);
          reg = x1829;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1830);
          reg = x1830;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1831 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1831 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1832 = x1831 * x1785;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1833 = x1831 * x1786;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1834 = x1831 * x1787;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1835 = x1831 * x1788;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1836 = x1832 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1837 = x1833 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1838 = x1834 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1839 = x1835 + x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1840 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1840 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1841 = x1840 * x1803;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1842 = x1840 * x1804;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1843 = x1840 * x1805;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1844 = x1840 * x1806;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1845 = x1836 + x1841;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1846 = x1837 + x1842;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1847 = x1838 + x1843;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1848 = x1839 + x1844;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1849 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1850 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1850 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1851 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1851 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1852 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1852 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1853 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1853 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1854 = x1849 * x1850;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1855 = x1849 * x1851;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1856 = x1849 * x1852;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1857 = x1849 * x1853;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1858 = x1845 + x1854;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1859 = x1846 + x1855;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1860 = x1847 + x1856;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1861 = x1848 + x1857;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1862 = x1859 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1863 = x1858 + x1862;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1864 = Fp(x1863.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1865 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1865 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1866 = x1863 - x1865;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1867 = x1866 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1868 = Fp(x1867.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1868);
          reg = x1868;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1869 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1869 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1870 = x1867 - x1869;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1871 = x1870 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1871);
        reg = x1871;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1872 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1872 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1873 = x1872 + x1860;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1874 = x1861 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1875 = x1873 + x1874;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1876 = Fp(x1875.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1876);
          reg = x1876;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1877 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1877 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1878 = x1875 - x1877;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1879 = x1878 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1880 = Fp(x1879.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1880);
          reg = x1880;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1881 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1881 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1882 = x1879 - x1881;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1883 = x1882 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1883);
        reg = x1883;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1884 = Fp(x1881.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1885 = x1884 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1886 = Fp(x1881.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1887 = x1886 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1887);
          reg = x1887;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1888 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1888 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1889 = x1888 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1890 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1890 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1891 = x1890 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1892 = x1889 + x1891;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1893 = x1881 - x1892;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1893 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1894 = x95 - x1821;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1895 = x1811 * x1894;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1896 = x95 - x1888;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1897 = x1895 * x1896;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1898 = x95 - x1811;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1899 = x1898 * x1821;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1900 = x1899 * x1888;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1901 = x1897 + x1900;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1901);
        reg = x1901;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1902 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1902 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1903 = x1902 + x1888;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1904 = x1902 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1905 = x1904 * x1888;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1906 = x1903 - x1905;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1906);
        reg = x1906;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1907 = x1869 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1908 = x1865 + x1907;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1909 = (x1908 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1909);
          reg = x1909;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1910 = inv(x1908);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1910);
          reg = x1910;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1911 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x1911 != Fp::invalid());
      if (x1911 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1908 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1912 = x95 - x1911;
      if (x1912 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1913 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x1913 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1914 = x1908 * x1913;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1915 = x1914 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1915 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1916 = x1881 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1917 = x1877 + x1916;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1918 = x1912 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1919 = x1917 + x1918;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1920 = (x1919 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1920);
          reg = x1920;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1921 = inv(x1919);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1921);
          reg = x1921;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1922 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x1922 != Fp::invalid());
      if (x1922 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1919 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1923 = x95 - x1922;
      if (x1923 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1924 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x1924 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1925 = x1919 * x1924;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1926 = x1925 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1926 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1927 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1927 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1928 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1928 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1929 = x95 - x1928;
      host_args.at(0) = x1795;
      host_args.at(1) = x1796;
      host_args.at(2) = x1797;
      host_args.at(3) = x1798;
      host_args.at(4) = x1751;
      host_args.at(5) = x1757;
      host_args.at(6) = x1758;
      host_args.at(7) = x1759;
      host_args.at(8) = x1760;
      host_args.at(9) = x1762;
      host_args.at(10) = x1768;
      host_args.at(11) = x1769;
      host_args.at(12) = x1770;
      host_args.at(13) = x1771;
      host_args.at(14) = x1785;
      host_args.at(15) = x1786;
      host_args.at(16) = x1787;
      host_args.at(17) = x1788;
      host_args.at(18) = x1803;
      host_args.at(19) = x1804;
      host_args.at(20) = x1805;
      host_args.at(21) = x1806;
      host_args.at(22) = x1865;
      host_args.at(23) = x1869;
      host_args.at(24) = x1877;
      host_args.at(25) = x1881;
      host_args.at(26) = x1922;
      host_args.at(27) = x1927;
      host_args.at(28) = x1929;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1930 = x1596 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1931 = x1599 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1932 = x1930 + x1931;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1933 = x1932 + x1602;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1934 = (x1933 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1935 = inv(x1933);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1935);
          reg = x1935;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x1936 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x1936 != Fp::invalid());
      if (x1936 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1933 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1937 = x95 - x1936;
      if (x1937 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1938 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x1938 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1939 = x1933 * x1938;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1940 = x1939 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1940 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x1941 = x754 + x78;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1942 = x1796 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1943 = x1795 + x1942;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1944 = x1797 * x80;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1945 = x1943 + x1944;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1946 = x1798 * x46;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1947 = x1946 * x45;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1948 = x1945 + x1947;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:14)
      auto x1949 = x754 + x1948;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1950 = x1922 * x1949;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:35)
      auto x1951 = x1923 * x1941;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1952 = x1950 + x1951;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1953 = x1922 * x1941;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:34)
      auto x1954 = x1923 * x1949;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1955 = x1953 + x1954;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x1956 = x1927 * x1949;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:36)
      auto x1957 = x95 - x1927;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x1958 = x1957 * x1941;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x1959 = x1956 + x1958;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1960 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1960 != Fp::invalid());
      if (x1960 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1961 = x1604 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1961 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1962 = x1593 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1962 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1963 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1964 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1965 = x1963 + x1964;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1966 = x1965 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1967 = x1557 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1968 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1969 = x1967 + x1968;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1970 = x1969 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1971 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1966);
          reg = x1966;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1970);
          reg = x1970;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1971);
          reg = x1971;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1971);
          reg = x1971;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1972 = x1941 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1973 = Fp(x1972.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1973);
            reg = x1973;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1974 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1974 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1975 = x1972 - x1974;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1976 = x1975 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1977 = Fp(x1976.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1977);
            reg = x1977;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1978 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1978 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1979 = x1976 - x1978;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1980 = x1979 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1981 = Fp(x1980.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1981);
            reg = x1981;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1982 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1982 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1983 = x1980 - x1982;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1984 = x1983 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1985 = Fp(x1984.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1985);
            reg = x1985;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1986 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1986 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1987 = x1984 - x1986;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1988 = x1987 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1988);
          reg = x1988;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1989 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1989 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1990 = x95 - x1989;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1991 = x1989 * x1990;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1991);
          reg = x1991;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1992 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1992 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1993 = x92 - x1989;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1994 = x1992 * x1993;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1994 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x1995 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1995 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1995);
          reg = x1995;
        }
        if (x1937 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1996 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x1996;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1997 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1997 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1998 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1998 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x1999 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1999 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2000 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2000 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1996);
            reg = x1996;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1997);
            reg = x1997;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1998);
            reg = x1998;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1999);
            reg = x1999;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2000);
            reg = x2000;
          }
        }
        if (x1936 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x2001 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2001 != Fp::invalid());
      if (x2001 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x2002 = x1604 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x2002 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x2003 = x1593 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x2003 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2004 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2005 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2006 = x2004 + x2005;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2007 = x2006 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2008 = x1557 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2009 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2010 = x2008 + x2009;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2011 = x2010 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2012 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2007);
          reg = x2007;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2011);
          reg = x2011;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2012);
          reg = x2012;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2012);
          reg = x2012;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2013 = x1941 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2014 = Fp(x2013.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2014);
            reg = x2014;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2015 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2015 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2016 = x2013 - x2015;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2017 = x2016 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2018 = Fp(x2017.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2018);
            reg = x2018;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2019 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2019 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2020 = x2017 - x2019;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2021 = x2020 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2022 = Fp(x2021.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2022);
            reg = x2022;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2023 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2023 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2024 = x2021 - x2023;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2025 = x2024 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2026 = Fp(x2025.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2026);
            reg = x2026;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2027 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2027 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2028 = x2025 - x2027;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2029 = x2028 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2029);
          reg = x2029;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2030 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2030 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2031 = x95 - x2030;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2032 = x2030 * x2031;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2032);
          reg = x2032;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2033 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2033 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2034 = x92 - x2030;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2035 = x2033 * x2034;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2035 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2036 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2036 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2036);
          reg = x2036;
        }
        if (x1937 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x2037 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x2037;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2038 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2038 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2039 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2039 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2040 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2040 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2041 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2041 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2037);
            reg = x2037;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2038);
            reg = x2038;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2039);
            reg = x2039;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2040);
            reg = x2040;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2041);
            reg = x2041;
          }
        }
        if (x1936 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x2042 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2042 != Fp::invalid());
      if (x2042 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2043 = x1604 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2043 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2044 = x1593 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2044 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2045 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2046 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2047 = x2045 + x2046;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2048 = x2047 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2049 = x1557 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2050 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2051 = x2049 + x2050;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2052 = x2051 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2053 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2052);
          reg = x2052;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2053);
          reg = x2053;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2053);
          reg = x2053;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2054 = x1941 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2055 = Fp(x2054.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2055);
            reg = x2055;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2056 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2056 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2057 = x2054 - x2056;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2058 = x2057 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2059 = Fp(x2058.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2059);
            reg = x2059;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2060 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2060 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2061 = x2058 - x2060;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2062 = x2061 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2063 = Fp(x2062.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2063);
            reg = x2063;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2064 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2064 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2065 = x2062 - x2064;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2066 = x2065 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2067 = Fp(x2066.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2067);
            reg = x2067;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2068 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2068 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2069 = x2066 - x2068;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2070 = x2069 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2070);
          reg = x2070;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2071 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2071 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2072 = x95 - x2071;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2073 = x2071 * x2072;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2073);
          reg = x2073;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2074 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2074 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2075 = x92 - x2071;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2076 = x2074 * x2075;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2076 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2077 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2077 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2077);
          reg = x2077;
        }
        if (x1937 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x2078 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x2078;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2079 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2079 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2080 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2080 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2081 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2081 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2082 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2082 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2078);
            reg = x2078;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2079);
            reg = x2079;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2080);
            reg = x2080;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2081);
            reg = x2081;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
        }
        if (x1936 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x2083 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2083 != Fp::invalid());
      if (x2083 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2084 = x1604 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2084 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2085 = x1593 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2085 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2086 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2087 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2088 = x2086 + x2087;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2089 = x2088 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2090 = x1557 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2091 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2092 = x2090 + x2091;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2093 = x2092 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2094 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2089);
          reg = x2089;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2093);
          reg = x2093;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2094);
          reg = x2094;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2094);
          reg = x2094;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2095 = x1941 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2096 = Fp(x2095.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2096);
            reg = x2096;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2097 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2097 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2098 = x2095 - x2097;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2099 = x2098 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2100 = Fp(x2099.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2100);
            reg = x2100;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2101 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2101 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2102 = x2099 - x2101;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2103 = x2102 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2104 = Fp(x2103.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2104);
            reg = x2104;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2105 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2105 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2106 = x2103 - x2105;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2107 = x2106 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2108 = Fp(x2107.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2108);
            reg = x2108;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2109 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2109 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2110 = x2107 - x2109;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2111 = x2110 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2111);
          reg = x2111;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2112 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2113 = x95 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2114 = x2112 * x2113;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2114);
          reg = x2114;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2115 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2116 = x92 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2117 = x2115 * x2116;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2117 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2118 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2118 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        if (x1937 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1927;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x2119 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1927);
            reg = x1927;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x2119;
            host_args.at(1) = x1927;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2120 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2120 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2121 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2121 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2122 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2122 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2123 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2123 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2119);
            reg = x2119;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2120);
            reg = x2120;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2121);
            reg = x2121;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2122);
            reg = x2122;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2123);
            reg = x2123;
          }
        }
        if (x1936 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x2124 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2124 != Fp::invalid());
      if (x2124 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2125 = x1604 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2125 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2126 = x1593 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2126 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2127 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2128 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2129 = x2127 + x2128;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2130 = x2129 + x1762;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2131 = x1557 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2132 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2133 = x2131 + x2132;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2134 = x2133 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2135 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2134);
          reg = x2134;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2136 = x1941 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2137 = Fp(x2136.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2137);
            reg = x2137;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2138 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2138 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2139 = x2136 - x2138;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2140 = x2139 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2141 = Fp(x2140.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2141);
            reg = x2141;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2142 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2142 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2143 = x2140 - x2142;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2144 = x2143 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2145 = Fp(x2144.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2146 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2146 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2147 = x2144 - x2146;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2148 = x2147 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2149 = Fp(x2148.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2149);
            reg = x2149;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2150 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2150 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2151 = x2148 - x2150;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2152 = x2151 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2153 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2153 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2154 = x95 - x2153;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2155 = x2153 * x2154;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2155);
          reg = x2155;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2156 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2156 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2157 = x92 - x2153;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2158 = x2156 * x2157;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2158 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2159 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2159 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2159);
          reg = x2159;
        }
        if (x1937 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1929;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2160 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1929);
            reg = x1929;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x2160;
            host_args.at(1) = x1929;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2161 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2161 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2162 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2162 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2163 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2163 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2164 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2164 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2160);
            reg = x2160;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2161);
            reg = x2161;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2162);
            reg = x2162;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2163);
            reg = x2163;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2164);
            reg = x2164;
          }
        }
        if (x1936 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2165 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2165 != Fp::invalid());
      if (x2165 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2166 = x1604 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2166 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1593 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2167 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2168 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2169 = x2167 + x2168;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2170 = x2169 + x1930;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2171 = x2170 + x1931;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2172 = x1557 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2173 = x1602 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2174 = x2172 + x2173;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2175 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2176 = x2174 + x2175;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2177 = x2176 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2178 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2171);
          reg = x2171;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2177);
          reg = x2177;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2178);
          reg = x2178;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2178);
          reg = x2178;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2179 = x1952 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2180 = Fp(x2179.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2180);
            reg = x2180;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2181 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2181 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2182 = x2179 - x2181;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2183 = x2182 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2184 = Fp(x2183.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2184);
            reg = x2184;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2185 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2185 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2186 = x2183 - x2185;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2187 = x2186 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2188 = Fp(x2187.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2188);
            reg = x2188;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2189 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2189 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2190 = x2187 - x2189;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2191 = x2190 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2192 = Fp(x2191.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2192);
            reg = x2192;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2193 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2193 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2194 = x2191 - x2193;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2195 = x2194 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2195);
          reg = x2195;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2196 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2197 = x95 - x2196;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2198 = x2196 * x2197;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2198);
          reg = x2198;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2199 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2200 = x92 - x2196;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2201 = x2199 * x2200;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2201 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2202 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2202 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2202);
          reg = x2202;
        }
        if (x94 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2203 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x2203;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2204 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2204 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2205 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2205 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2206 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2206 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2207 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2207 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2203);
            reg = x2203;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2204);
            reg = x2204;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2205);
            reg = x2205;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2206);
            reg = x2206;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2207);
            reg = x2207;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2208 = x1936 + x95;
        if (x2208 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2209 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2209 != Fp::invalid());
      if (x2209 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2210 = x1604 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2210 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2211 = x1593 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2211 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2212 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2213 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2214 = x2212 + x2213;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2215 = x2214 + x1930;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2216 = x2215 + x1931;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2217 = x1557 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2218 = x1602 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2219 = x2217 + x2218;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2220 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2221 = x2219 + x2220;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2222 = x2221 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2223 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2216);
          reg = x2216;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2222);
          reg = x2222;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2223);
          reg = x2223;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2223);
          reg = x2223;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2224 = x1955 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2225 = Fp(x2224.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2226 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2226 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2227 = x2224 - x2226;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2228 = x2227 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2229 = Fp(x2228.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2229);
            reg = x2229;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2230 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2230 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2231 = x2228 - x2230;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2232 = x2231 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2233 = Fp(x2232.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2234 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2234 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2235 = x2232 - x2234;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2236 = x2235 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2237 = Fp(x2236.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2237);
            reg = x2237;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2238 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2238 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2239 = x2236 - x2238;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2240 = x2239 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2240);
          reg = x2240;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2241 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2241 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2242 = x95 - x2241;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2243 = x2241 * x2242;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2243);
          reg = x2243;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2244 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2244 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2245 = x92 - x2241;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2246 = x2244 * x2245;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2246 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2247 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2247 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2247);
          reg = x2247;
        }
        if (x94 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2248 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x2248;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2249 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2249 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2250 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2250 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2251 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2251 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2252 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2252 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2248);
            reg = x2248;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2249);
            reg = x2249;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2250);
            reg = x2250;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2251);
            reg = x2251;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2252);
            reg = x2252;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2253 = x1936 + x95;
        if (x2253 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2254 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2254 != Fp::invalid());
      if (x2254 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2255 = x1604 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2255 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2256 = x1593 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2256 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2257 = x1564 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2258 = x1567 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2259 = x2257 + x2258;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2260 = x2259 + x1930;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2261 = x2260 + x1931;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2262 = x1557 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2263 = x1602 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2264 = x2262 + x2263;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2265 = x1559 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2266 = x2264 + x2265;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2267 = x2266 + x1561;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2268 = x1557 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2261);
          reg = x2261;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2267);
          reg = x2267;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2268);
          reg = x2268;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2268);
          reg = x2268;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2269 = x1959 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2270 = Fp(x2269.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2270);
            reg = x2270;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2271 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2271 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2272 = x2269 - x2271;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2273 = x2272 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2274 = Fp(x2273.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2275 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2275 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2276 = x2273 - x2275;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2277 = x2276 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2278 = Fp(x2277.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2278);
            reg = x2278;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2279 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2279 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2280 = x2277 - x2279;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2281 = x2280 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2282 = Fp(x2281.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2282);
            reg = x2282;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2283 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2283 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2284 = x2281 - x2283;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2285 = x2284 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2285);
          reg = x2285;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2286 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2286 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2287 = x95 - x2286;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2288 = x2286 * x2287;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2288);
          reg = x2288;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2289 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2289 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2290 = x92 - x2286;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2291 = x2289 * x2290;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2291 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2292 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2292 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2292);
          reg = x2292;
        }
        if (x94 != 0) {
          host_args.at(0) = x1933;
          host_args.at(1) = x1865;
          host_args.at(2) = x1869;
          host_args.at(3) = x1877;
          host_args.at(4) = x1881;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2293 = x1933 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          {
            host_args.at(0) = x2293;
            host_args.at(1) = x1865;
            host_args.at(2) = x1869;
            host_args.at(3) = x1877;
            host_args.at(4) = x1881;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2294 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2294 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2295 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2295 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2296 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2296 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2297 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2297 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2293);
            reg = x2293;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2294);
            reg = x2294;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2295);
            reg = x2295;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2296);
            reg = x2296;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2297);
            reg = x2297;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2298 = x1936 + x95;
        if (x2298 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":49:25))
    auto x2299 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x2299 != Fp::invalid());
    if (x2299 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2300 = x754 * x76;
      {
        host_args.at(0) = x2300;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2301 = host_outs.at(0);
        auto x2302 = host_outs.at(1);
        auto x2303 = host_outs.at(2);
        auto x2304 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2301);
          reg = x2301;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2302);
          reg = x2302;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2303);
          reg = x2303;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2304);
          reg = x2304;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2305 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2306 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2307 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2308 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2308 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2300);
        reg = x2300;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2305);
        reg = x2305;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2306);
        reg = x2306;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2307);
        reg = x2307;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2308);
        reg = x2308;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2309 = Fp(x2308.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2310 = x2309 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2310);
          reg = x2310;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2311 = Fp(x2308.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2312 = x2311 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2312);
          reg = x2312;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2313 = Fp(x2308.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2314 = x2313 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2314);
          reg = x2314;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2315 = Fp(x2308.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2316 = x2315 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2316);
          reg = x2316;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2317 = Fp(x2308.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2318 = x2317 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2318);
          reg = x2318;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2319 = Fp(x2308.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2319);
          reg = x2319;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2320 = Fp(x2307.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2321 = x2320 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2321);
          reg = x2321;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2322 = Fp(x2307.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2323 = x2322 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2323);
          reg = x2323;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2324 = Fp(x2307.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2325 = x2324 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2325);
          reg = x2325;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2326 = Fp(x2307.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2327 = x2326 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2327);
          reg = x2327;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2328 = Fp(x2307.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2328);
          reg = x2328;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2329 = Fp(x2306.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2330 = x2329 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2330);
          reg = x2330;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2331 = Fp(x2306.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2332 = x2331 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2332);
          reg = x2332;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2333 = Fp(x2306.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2334 = x2333 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2334);
          reg = x2334;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2335 = Fp(x2306.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2336 = x2335 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2337 = Fp(x2306.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2337);
          reg = x2337;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2338 = Fp(x2305.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2339 = x2338 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2339);
          reg = x2339;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2340 = Fp(x2305.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2340);
          reg = x2340;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2341 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2342 = x2341 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2343 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2344 = x2343 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2345 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2346 = x2345 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2347 = x2344 + x2346;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2348 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2349 = x2348 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2350 = x2347 + x2349;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2351 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2352 = x2350 + x2351;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2353 = x2342 + x2352;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2354 = x2353 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2355 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2356 = x2354 + x2355;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2357 = x2308 - x2356;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2357 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2358 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2359 = x2358 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2360 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2361 = x2360 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2362 = x2359 + x2361;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2363 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2363 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2364 = x2362 + x2363;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2365 = x2364 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2366 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2367 = x2366 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2368 = x2365 + x2367;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2369 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2370 = x2368 + x2369;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2371 = x2307 - x2370;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2371 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2372 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2373 = x2372 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2374 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2375 = x2374 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2376 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2377 = x2375 + x2376;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2378 = x2377 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2379 = x2373 + x2378;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2380 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2381 = x2380 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2382 = x2379 + x2381;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2383 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2384 = x2382 + x2383;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2385 = x2306 - x2384;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2385 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2386 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2386 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2387 = x2386 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2388 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2388 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2389 = x2387 + x2388;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2390 = x2305 - x2389;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2390 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2305;
        host_args.at(1) = x2306;
        host_args.at(2) = x2307;
        host_args.at(3) = x2308;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2391 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2392 = (x2391 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2392);
            reg = x2392;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2393 = x2391 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2394 = (x2393 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2394);
            reg = x2394;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2395 = x2391 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2396 = (x2395 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2396);
            reg = x2396;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2397 = x2391 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2398 = (x2397 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2398);
            reg = x2398;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2399 = x2391 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2400 = (x2399 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2400);
            reg = x2400;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2401 = x2391 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2402 = (x2401 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2402);
            reg = x2402;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2403 = x2391 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2404 = (x2403 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2404);
            reg = x2404;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2405 = x2391 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2406 = (x2405 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2406);
            reg = x2406;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2407 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2407 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2408 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2408 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2409 = x2408 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2410 = x2407 + x2409;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2411 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2411 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2412 = x2411 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2413 = x2410 + x2412;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2414 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2414 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2415 = x2414 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2416 = x2413 + x2415;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2417 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2417 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2418 = x2417 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2419 = x2416 + x2418;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2420 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2420 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2421 = x2420 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2422 = x2419 + x2421;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2423 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2423 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2424 = x2423 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2425 = x2422 + x2424;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2426 = x2425 - x2391;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2426 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2427 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x2427 != Fp::invalid());
        if (x2427 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2428 = x2348 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2429 = x2351 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2430 = x2428 + x2429;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2431 = x2380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2432 = x2430 + x2431;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2433 = x2383 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2434 = x2432 + x2433;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2435 = x2341 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2436 = x2386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2437 = x2435 + x2436;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2438 = x2343 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2439 = x2437 + x2438;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2440 = x2439 + x2345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2441 = x2341 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2434);
            reg = x2434;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2442 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2442 != Fp::invalid());
        if (x2442 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2443 = x2348 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2444 = x2351 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2445 = x2443 + x2444;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2446 = x2380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2447 = x2445 + x2446;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2448 = x2383 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2449 = x2447 + x2448;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2450 = x2341 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2451 = x2386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2452 = x2450 + x2451;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2453 = x2343 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2454 = x2452 + x2453;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2455 = x2454 + x2345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2456 = x2341 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2455);
            reg = x2455;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2456);
            reg = x2456;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2456);
            reg = x2456;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2457 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2457 != Fp::invalid());
        if (x2457 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2458 = x2348 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2459 = x2351 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2460 = x2458 + x2459;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2461 = x2380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2462 = x2460 + x2461;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2463 = x2383 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2464 = x2462 + x2463;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2465 = x2341 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2466 = x2386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2467 = x2465 + x2466;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2468 = x2343 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2469 = x2467 + x2468;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2470 = x2469 + x2345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2471 = x2341 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2464);
            reg = x2464;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2471);
            reg = x2471;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2471);
            reg = x2471;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2472 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2472 != Fp::invalid());
        if (x2472 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2473 = x2348 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2474 = x2351 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2475 = x2473 + x2474;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2476 = x2355 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2477 = x2476 + x2364;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2478 = x2475 + x2477;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2479 = x2478 - x2363;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2480 = x2363 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2481 = x2379 + x2480;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2482 = x2343 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2483 = x2481 + x2482;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2484 = x2483 + x2345;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2485 = x2341 * x42;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2486 = x2485 + x2367;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2487 = x2486 + x2369;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2488 = x2341 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2479);
            reg = x2479;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2484);
            reg = x2484;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2487);
            reg = x2487;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2488);
            reg = x2488;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2489 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2489 != Fp::invalid());
        if (x2489 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2490 = x2348 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2491 = x2351 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2492 = x2490 + x2491;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2493 = x2355 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2494 = x2493 + x2364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2495 = x2492 + x2494;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2496 = x2341 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2497 = x2343 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2498 = x2496 + x2497;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2499 = x2498 + x2345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2500 = x2341 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2495);
            reg = x2495;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2499);
            reg = x2499;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2500);
            reg = x2500;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2500);
            reg = x2500;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2501 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2501 != Fp::invalid());
        if (x2501 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2379);
            reg = x2379;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2370);
            reg = x2370;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2356);
            reg = x2356;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2502 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2502 != Fp::invalid());
        if (x2502 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2379);
            reg = x2379;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2370);
            reg = x2370;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2356);
            reg = x2356;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2503 = x2366 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2504 = x2369 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2505 = x2503 + x2504;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2506 = x2505 + x2372;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2507 = x2506 + x47;
      {
        host_args.at(0) = x2507;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2508 = host_outs.at(0);
        auto x2509 = host_outs.at(1);
        auto x2510 = host_outs.at(2);
        auto x2511 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2508);
          reg = x2508;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2509);
          reg = x2509;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2510);
          reg = x2510;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2511);
          reg = x2511;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2512 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2512 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2513 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2513 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2514 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2514 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2515 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x2515 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2507);
        reg = x2507;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2512);
        reg = x2512;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2513);
        reg = x2513;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2514);
        reg = x2514;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2515);
        reg = x2515;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2516 = x2355 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2517 = x2516 + x2364;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2518 = x2517 + x47;
      {
        host_args.at(0) = x2518;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2519 = host_outs.at(0);
        auto x2520 = host_outs.at(1);
        auto x2521 = host_outs.at(2);
        auto x2522 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2519);
          reg = x2519;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2520);
          reg = x2520;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2521);
          reg = x2521;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2522);
          reg = x2522;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2523 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x2523 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2524 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x2524 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2525 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x2525 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2526 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x2526 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2518);
        reg = x2518;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2523);
        reg = x2523;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2524);
        reg = x2524;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2525);
        reg = x2525;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2526);
        reg = x2526;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2527 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x2527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x2528 = x95 - x2527;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2529 = x2528 * x2512;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2530 = x2528 * x2513;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2531 = x2528 * x2514;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2532 = x2528 * x2515;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2533 = x751 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2534 = x748 + x2533;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2535 = x741 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2536 = x2527 * x2535;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2537 = x2527 * x742;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2538 = x2527 * x745;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2539 = x2527 * x2534;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2540 = x2529 + x2536;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2541 = x2530 + x2537;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2542 = x2531 + x2538;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2543 = x2532 + x2539;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2544 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2544 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x2545 = x95 - x2544;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2546 = x2545 * x2523;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2547 = x2545 * x2524;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2548 = x2545 * x2525;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2549 = x2545 * x2526;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2550 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2550 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2551 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2551 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2552 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x2552 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2553 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x2553 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2554 = x2544 * x2550;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2555 = x2544 * x2551;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2556 = x2544 * x2552;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2557 = x2544 * x2553;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2558 = x2546 + x2554;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2559 = x2547 + x2555;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2560 = x2548 + x2556;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2561 = x2549 + x2557;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2562 = Fp(x2543.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2563 = x2562 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2563);
          reg = x2563;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2564 = Fp(x2543.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2565 = x2564 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2565);
          reg = x2565;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2566 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2566 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2567 = x2566 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2568 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2568 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2569 = x2568 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2570 = x2567 + x2569;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2571 = x2543 - x2570;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2571 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2572 = Fp(x2561.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2573 = x2572 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2573);
          reg = x2573;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2574 = Fp(x2561.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2575 = x2574 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2575);
          reg = x2575;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2576 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2576 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2577 = x2576 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2578 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x2578 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2579 = x2578 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2580 = x2577 + x2579;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2581 = x2561 - x2580;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2581 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2558);
        reg = x2558;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2559);
        reg = x2559;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2560);
        reg = x2560;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2561);
        reg = x2561;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2582 = Fp(x2540.asUInt32() & x2558.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2583 = Fp(x2541.asUInt32() & x2559.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2584 = Fp(x2542.asUInt32() & x2560.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2585 = Fp(x2543.asUInt32() & x2561.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2582);
          reg = x2582;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2583);
          reg = x2583;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2584);
          reg = x2584;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2585);
          reg = x2585;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2586 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2586 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2587 = x2586 * x2540;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2588 = x2586 * x2541;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2589 = x2586 * x2542;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2590 = x2586 * x2543;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2591 = x2587 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2592 = x2588 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2593 = x2589 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2594 = x2590 + x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2595 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2595 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2596 = x2595 * x2558;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2597 = x2595 * x2559;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2598 = x2595 * x2560;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2599 = x2595 * x2561;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2600 = x2591 + x2596;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2601 = x2592 + x2597;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2602 = x2593 + x2598;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2603 = x2594 + x2599;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2604 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2604 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2605 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2605 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2606 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2606 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2607 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2607 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2608 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x2608 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2609 = x2604 * x2605;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2610 = x2604 * x2606;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2611 = x2604 * x2607;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2612 = x2604 * x2608;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2613 = x2600 + x2609;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2614 = x2601 + x2610;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2615 = x2602 + x2611;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2616 = x2603 + x2612;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2617 = x2614 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2618 = x2613 + x2617;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2619 = Fp(x2618.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2619);
          reg = x2619;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2620 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x2620 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2621 = x2618 - x2620;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2622 = x2621 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2623 = Fp(x2622.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2623);
          reg = x2623;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2624 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x2624 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2625 = x2622 - x2624;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2626 = x2625 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2626);
        reg = x2626;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2627 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2627 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2628 = x2627 + x2615;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2629 = x2616 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2630 = x2628 + x2629;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2631 = Fp(x2630.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2631);
          reg = x2631;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2632 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x2632 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2633 = x2630 - x2632;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2634 = x2633 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2635 = Fp(x2634.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2635);
          reg = x2635;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2636 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x2636 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2637 = x2634 - x2636;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2638 = x2637 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2638);
        reg = x2638;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2639 = Fp(x2636.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2640 = x2639 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2640);
          reg = x2640;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2641 = Fp(x2636.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2642 = x2641 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2642);
          reg = x2642;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2643 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2643 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2644 = x2643 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2645 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2645 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2646 = x2645 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2647 = x2644 + x2646;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2648 = x2636 - x2647;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2648 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2649 = x95 - x2576;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2650 = x2566 * x2649;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2651 = x95 - x2643;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2652 = x2650 * x2651;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2653 = x95 - x2566;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2654 = x2653 * x2576;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2655 = x2654 * x2643;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2656 = x2652 + x2655;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2656);
        reg = x2656;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2657 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2657 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2658 = x2657 + x2643;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2659 = x2657 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2660 = x2659 * x2643;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2661 = x2658 - x2660;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2661);
        reg = x2661;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2662 = x2624 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2663 = x2620 + x2662;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2664 = (x2663 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2664);
          reg = x2664;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2665 = inv(x2663);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2665);
          reg = x2665;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2666 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x2666 != Fp::invalid());
      if (x2666 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2663 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2667 = x95 - x2666;
      if (x2667 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2668 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x2668 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2669 = x2663 * x2668;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2670 = x2669 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2670 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2671 = x2636 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2672 = x2632 + x2671;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2673 = x2667 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2674 = x2672 + x2673;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2675 = (x2674 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2675);
          reg = x2675;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2676 = inv(x2674);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2676);
          reg = x2676;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2677 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x2677 != Fp::invalid());
      if (x2677 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2674 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2678 = x95 - x2677;
      if (x2678 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2679 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x2679 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2680 = x2674 * x2679;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2681 = x2680 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2681 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2682 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2682 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2683 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2683 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2684 = x95 - x2683;
      host_args.at(0) = x2550;
      host_args.at(1) = x2551;
      host_args.at(2) = x2552;
      host_args.at(3) = x2553;
      host_args.at(4) = x2506;
      host_args.at(5) = x2512;
      host_args.at(6) = x2513;
      host_args.at(7) = x2514;
      host_args.at(8) = x2515;
      host_args.at(9) = x2517;
      host_args.at(10) = x2523;
      host_args.at(11) = x2524;
      host_args.at(12) = x2525;
      host_args.at(13) = x2526;
      host_args.at(14) = x2540;
      host_args.at(15) = x2541;
      host_args.at(16) = x2542;
      host_args.at(17) = x2543;
      host_args.at(18) = x2558;
      host_args.at(19) = x2559;
      host_args.at(20) = x2560;
      host_args.at(21) = x2561;
      host_args.at(22) = x2620;
      host_args.at(23) = x2624;
      host_args.at(24) = x2632;
      host_args.at(25) = x2636;
      host_args.at(26) = x2677;
      host_args.at(27) = x2682;
      host_args.at(28) = x2684;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2685 = x2380 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2686 = x2383 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2687 = x2685 + x2686;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2688 = x2687 + x2386;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2689 = (x2688 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2689);
          reg = x2689;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2690 = inv(x2688);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2690);
          reg = x2690;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x2691 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x2691 != Fp::invalid());
      if (x2691 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2688 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2692 = x95 - x2691;
      if (x2692 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2693 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x2693 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2694 = x2688 * x2693;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2695 = x2694 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2695 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x2696 = x754 + x78;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2697 = x2551 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2698 = x2550 + x2697;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2699 = x2552 * x80;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2700 = x2698 + x2699;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2701 = x2553 * x46;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2702 = x2701 * x45;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2703 = x2700 + x2702;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:14)
      auto x2704 = x754 + x2703;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:57)
      auto x2705 = x2632 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2706 = x2663 + x2705;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:14)
      auto x2707 = x2636 * x79;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2708 = x2706 + x2707;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2709 = x2682 * x2696;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:35)
      auto x2710 = x95 - x2682;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:34)
      auto x2711 = x2710 * x2704;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2712 = x2709 + x2711;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2713 = x2684 * x2704;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:38)
      auto x2714 = x95 - x2684;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:37)
      auto x2715 = x2714 * x2696;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2716 = x2713 + x2715;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2717 = x2684 * x2696;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:36)
      auto x2718 = x2714 * x2704;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2719 = x2717 + x2718;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2720 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2720 != Fp::invalid());
      if (x2720 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2721 = x2388 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2721 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2722 = x2377 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2722 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2723 = x2348 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2724 = x2351 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2725 = x2723 + x2724;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2726 = x2725 + x2685;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2727 = x2726 + x2686;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2728 = x2341 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2729 = x2386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2730 = x2728 + x2729;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2731 = x2343 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2732 = x2730 + x2731;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2733 = x2732 + x2345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2734 = x2341 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2727);
          reg = x2727;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2733);
          reg = x2733;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2734);
          reg = x2734;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2734);
          reg = x2734;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2735 = x2712 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2736 = Fp(x2735.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2736);
            reg = x2736;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2737 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2737 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2738 = x2735 - x2737;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2739 = x2738 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2740 = Fp(x2739.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2740);
            reg = x2740;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2741 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2741 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2742 = x2739 - x2741;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2743 = x2742 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2744 = Fp(x2743.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2744);
            reg = x2744;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2745 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2745 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2746 = x2743 - x2745;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2747 = x2746 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2748 = Fp(x2747.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2748);
            reg = x2748;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2749 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2749 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2750 = x2747 - x2749;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2751 = x2750 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2751);
          reg = x2751;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2752 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2753 = x95 - x2752;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2754 = x2752 * x2753;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2754);
          reg = x2754;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2755 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2756 = x92 - x2752;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2757 = x2755 * x2756;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2757 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2758 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2758 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2758);
          reg = x2758;
        }
        if (x94 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x2620;
          host_args.at(2) = x2624;
          host_args.at(3) = x2632;
          host_args.at(4) = x2636;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2759 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          {
            host_args.at(0) = x2759;
            host_args.at(1) = x2620;
            host_args.at(2) = x2624;
            host_args.at(3) = x2632;
            host_args.at(4) = x2636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2760 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2760 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2761 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2761 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2762 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2762 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2763 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2763 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2759);
            reg = x2759;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2760);
            reg = x2760;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2761);
            reg = x2761;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2762);
            reg = x2762;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2763);
            reg = x2763;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2764 = x2691 + x95;
        if (x2764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2765 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2765 != Fp::invalid());
      if (x2765 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2766 = x2388 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2766 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2767 = x2377 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2767 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2768 = x2348 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2769 = x2351 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2770 = x2768 + x2769;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2771 = x2770 + x2685;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2772 = x2771 + x2686;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2773 = x2341 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2774 = x2386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2775 = x2773 + x2774;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2776 = x2343 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2777 = x2775 + x2776;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2778 = x2777 + x2345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2779 = x2341 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2772);
          reg = x2772;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2778);
          reg = x2778;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2779);
          reg = x2779;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2779);
          reg = x2779;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2780 = x2716 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2781 = Fp(x2780.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2781);
            reg = x2781;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2782 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2782 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2783 = x2780 - x2782;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2784 = x2783 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2785 = Fp(x2784.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2785);
            reg = x2785;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2786 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2786 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2787 = x2784 - x2786;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2788 = x2787 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2789 = Fp(x2788.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2790 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2790 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2791 = x2788 - x2790;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2792 = x2791 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2793 = Fp(x2792.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2793);
            reg = x2793;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2794 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2795 = x2792 - x2794;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2796 = x2795 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2796);
          reg = x2796;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2797 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2797 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2798 = x95 - x2797;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2799 = x2797 * x2798;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2799);
          reg = x2799;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2800 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2800 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2801 = x92 - x2797;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2802 = x2800 * x2801;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2802 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2803 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2803 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2803);
          reg = x2803;
        }
        if (x94 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x2620;
          host_args.at(2) = x2624;
          host_args.at(3) = x2632;
          host_args.at(4) = x2636;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2804 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          {
            host_args.at(0) = x2804;
            host_args.at(1) = x2620;
            host_args.at(2) = x2624;
            host_args.at(3) = x2632;
            host_args.at(4) = x2636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2805 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2805 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2806 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2806 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2807 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2807 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2808 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2808 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2804);
            reg = x2804;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2805);
            reg = x2805;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2806);
            reg = x2806;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2807);
            reg = x2807;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2808);
            reg = x2808;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2809 = x2691 + x95;
        if (x2809 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2810 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2810 != Fp::invalid());
      if (x2810 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2811 = x2388 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2811 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2812 = x2377 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2812 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2813 = x2348 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2814 = x2351 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2815 = x2813 + x2814;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2816 = x2815 + x2685;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2817 = x2816 + x2686;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2818 = x2341 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2819 = x2386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2820 = x2818 + x2819;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2821 = x2343 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2822 = x2820 + x2821;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2823 = x2822 + x2345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2824 = x2341 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2817);
          reg = x2817;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2823);
          reg = x2823;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2824);
          reg = x2824;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2824);
          reg = x2824;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2825 = x2719 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2826 = Fp(x2825.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2826);
            reg = x2826;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2827 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2827 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2828 = x2825 - x2827;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2829 = x2828 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2830 = Fp(x2829.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2831 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2831 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2832 = x2829 - x2831;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2833 = x2832 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2834 = Fp(x2833.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2834);
            reg = x2834;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2835 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2835 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2836 = x2833 - x2835;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2837 = x2836 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2838 = Fp(x2837.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2838);
            reg = x2838;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2839 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2839 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2840 = x2837 - x2839;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2841 = x2840 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2841);
          reg = x2841;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2842 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2842 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2843 = x95 - x2842;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2844 = x2842 * x2843;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2844);
          reg = x2844;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2845 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2845 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2846 = x92 - x2842;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2847 = x2845 * x2846;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2847 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2848 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2848 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        if (x94 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x2620;
          host_args.at(2) = x2624;
          host_args.at(3) = x2632;
          host_args.at(4) = x2636;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2849 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          {
            host_args.at(0) = x2849;
            host_args.at(1) = x2620;
            host_args.at(2) = x2624;
            host_args.at(3) = x2632;
            host_args.at(4) = x2636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2850 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2850 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2851 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2851 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2852 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2852 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2853 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2853 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2850);
            reg = x2850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2851);
            reg = x2851;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2852);
            reg = x2852;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2853);
            reg = x2853;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2854 = x2691 + x95;
        if (x2854 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2855 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2855 != Fp::invalid());
      if (x2855 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2856 = x2388 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2856 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2857 = x2348 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2858 = x2351 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2859 = x2857 + x2858;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2860 = x2859 + x2517;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2861 = x2860 - x2363;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2862 = x2363 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2863 = x2379 + x2862;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2864 = x2343 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2865 = x2863 + x2864;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2866 = x2865 + x2345;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2867 = x2341 * x42;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2868 = x2867 + x2367;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2869 = x2868 + x2369;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2870 = x2341 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2866);
          reg = x2866;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2871 = x2704 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2872 = Fp(x2871.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2872);
            reg = x2872;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2873 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2873 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2874 = x2871 - x2873;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2875 = x2874 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2876 = Fp(x2875.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2876);
            reg = x2876;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2877 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2877 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2878 = x2875 - x2877;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2879 = x2878 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2880 = Fp(x2879.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2880);
            reg = x2880;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2881 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2881 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2882 = x2879 - x2881;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2883 = x2882 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2884 = Fp(x2883.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2884);
            reg = x2884;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2885 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2886 = x2883 - x2885;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2887 = x2886 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2887);
          reg = x2887;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2888 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2888 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2889 = x95 - x2888;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2890 = x2888 * x2889;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2890);
          reg = x2890;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2891 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2891 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2892 = x92 - x2888;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2893 = x2891 * x2892;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2893 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2894 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2894 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2894);
          reg = x2894;
        }
        if (x2692 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x741;
          host_args.at(2) = x742;
          host_args.at(3) = x745;
          host_args.at(4) = x2534;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2895 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x741);
            reg = x741;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x745);
            reg = x745;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2534);
            reg = x2534;
          }
          {
            host_args.at(0) = x2895;
            host_args.at(1) = x741;
            host_args.at(2) = x742;
            host_args.at(3) = x745;
            host_args.at(4) = x2534;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2896 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2896 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2897 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2897 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2898 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2898 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2899 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2899 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2895);
            reg = x2895;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2896);
            reg = x2896;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2897);
            reg = x2897;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2898);
            reg = x2898;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2899);
            reg = x2899;
          }
        }
        if (x2691 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2900 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2900 != Fp::invalid());
      if (x2900 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2901 = x2388 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2901 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2377 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2902 = x2348 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2903 = x2351 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2904 = x2902 + x2903;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2905 = x2904 + x2517;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2906 = x2341 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2907 = x2343 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2908 = x2906 + x2907;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2909 = x2908 + x2345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2910 = x2341 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2905);
          reg = x2905;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2909);
          reg = x2909;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2910);
          reg = x2910;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2910);
          reg = x2910;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2911 = x2708 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2912 = Fp(x2911.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2912);
            reg = x2912;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2913 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2913 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2914 = x2911 - x2913;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2915 = x2914 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2916 = Fp(x2915.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2916);
            reg = x2916;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2917 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2917 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2918 = x2915 - x2917;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2919 = x2918 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2920 = Fp(x2919.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2920);
            reg = x2920;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2921 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2921 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2922 = x2919 - x2921;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2923 = x2922 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2924 = Fp(x2923.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2924);
            reg = x2924;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2925 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2926 = x2923 - x2925;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2927 = x2926 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2927);
          reg = x2927;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2928 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2928 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2929 = x95 - x2928;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2930 = x2928 * x2929;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2930);
          reg = x2930;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2931 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2931 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2932 = x92 - x2928;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2933 = x2931 * x2932;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2933 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2934 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2934 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2934);
          reg = x2934;
        }
        if (x2692 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x741;
          host_args.at(2) = x742;
          host_args.at(3) = x745;
          host_args.at(4) = x2534;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2935 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x741);
            reg = x741;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x742);
            reg = x742;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x745);
            reg = x745;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2534);
            reg = x2534;
          }
          {
            host_args.at(0) = x2935;
            host_args.at(1) = x741;
            host_args.at(2) = x742;
            host_args.at(3) = x745;
            host_args.at(4) = x2534;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2936 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2936 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2937 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2937 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2938 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2938 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2939 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2939 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2935);
            reg = x2935;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2936);
            reg = x2936;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2937);
            reg = x2937;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2938);
            reg = x2938;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2939);
            reg = x2939;
          }
        }
        if (x2691 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2940 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2940 != Fp::invalid());
      if (x2940 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2941 = x2388 - x38;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2941 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2379);
          reg = x2379;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2370);
          reg = x2370;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2356);
          reg = x2356;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2942 = x2696 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2943 = Fp(x2942.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2943);
            reg = x2943;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2944 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2944 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2945 = x2942 - x2944;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2946 = x2945 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2947 = Fp(x2946.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2947);
            reg = x2947;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2948 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2948 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2949 = x2946 - x2948;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2950 = x2949 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2951 = Fp(x2950.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2951);
            reg = x2951;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2952 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2952 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2953 = x2950 - x2952;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2954 = x2953 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2955 = Fp(x2954.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2955);
            reg = x2955;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2956 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2957 = x2954 - x2956;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2958 = x2957 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2958);
          reg = x2958;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2959 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2960 = x95 - x2959;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2961 = x2959 * x2960;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2961);
          reg = x2961;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2962 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2963 = x92 - x2959;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2964 = x2962 * x2963;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2964 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2965 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2965 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2965);
          reg = x2965;
        }
        if (x2692 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x2620;
          host_args.at(2) = x2624;
          host_args.at(3) = x2632;
          host_args.at(4) = x2636;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2966 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          {
            host_args.at(0) = x2966;
            host_args.at(1) = x2620;
            host_args.at(2) = x2624;
            host_args.at(3) = x2632;
            host_args.at(4) = x2636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2967 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2967 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2968 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2968 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2969 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2969 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2970 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2970 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2966);
            reg = x2966;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2967);
            reg = x2967;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2968);
            reg = x2968;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2969);
            reg = x2969;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2970);
            reg = x2970;
          }
        }
        if (x2691 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2971 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2971 != Fp::invalid());
      if (x2971 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2972 = x2388 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2972 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2379);
          reg = x2379;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2370);
          reg = x2370;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2356);
          reg = x2356;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2973 = x2696 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2974 = Fp(x2973.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2974);
            reg = x2974;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2975 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2975 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2976 = x2973 - x2975;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2977 = x2976 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2978 = Fp(x2977.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2978);
            reg = x2978;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2979 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2979 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2980 = x2977 - x2979;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2981 = x2980 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2982 = Fp(x2981.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2983 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2983 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2984 = x2981 - x2983;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2985 = x2984 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2986 = Fp(x2985.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2987 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2987 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2988 = x2985 - x2987;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2989 = x2988 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2989);
          reg = x2989;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2990 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2990 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2991 = x95 - x2990;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2992 = x2990 * x2991;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2992);
          reg = x2992;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2993 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2993 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2994 = x92 - x2990;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2995 = x2993 * x2994;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2995 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x2996 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2996 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2996);
          reg = x2996;
        }
        if (x2692 != 0) {
          host_args.at(0) = x2688;
          host_args.at(1) = x2620;
          host_args.at(2) = x2624;
          host_args.at(3) = x2632;
          host_args.at(4) = x2636;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2997 = x2688 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2624);
            reg = x2624;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          {
            host_args.at(0) = x2997;
            host_args.at(1) = x2620;
            host_args.at(2) = x2624;
            host_args.at(3) = x2632;
            host_args.at(4) = x2636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2998 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2998 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x2999 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2999 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3000 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3000 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3001 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3001 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2997);
            reg = x2997;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3001);
            reg = x3001;
          }
        }
        if (x2691 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":49:25))
    auto x3002 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x3002 != Fp::invalid());
    if (x3002 != 0) {
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x3003 = x754 * x76;
      {
        host_args.at(0) = x3003;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3004 = host_outs.at(0);
        auto x3005 = host_outs.at(1);
        auto x3006 = host_outs.at(2);
        auto x3007 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3004);
          reg = x3004;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3005);
          reg = x3005;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3006);
          reg = x3006;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3007);
          reg = x3007;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3008 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3009 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3010 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3011 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3011 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3003);
        reg = x3003;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3008);
        reg = x3008;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3009);
        reg = x3009;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3010);
        reg = x3010;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3011);
        reg = x3011;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3012 = Fp(x3011.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3013 = x3012 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3013);
          reg = x3013;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3014 = Fp(x3011.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3015 = x3014 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3015);
          reg = x3015;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3016 = Fp(x3011.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3017 = x3016 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3017);
          reg = x3017;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3018 = Fp(x3011.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3019 = x3018 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3019);
          reg = x3019;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3020 = Fp(x3011.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3021 = x3020 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3021);
          reg = x3021;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3022 = Fp(x3011.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3022);
          reg = x3022;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3023 = Fp(x3010.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3024 = x3023 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3024);
          reg = x3024;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3025 = Fp(x3010.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3026 = x3025 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3026);
          reg = x3026;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3027 = Fp(x3010.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3028 = x3027 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3028);
          reg = x3028;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3029 = Fp(x3010.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3030 = x3029 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3030);
          reg = x3030;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3031 = Fp(x3010.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3031);
          reg = x3031;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3032 = Fp(x3009.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3033 = x3032 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3033);
          reg = x3033;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3034 = Fp(x3009.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3035 = x3034 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3035);
          reg = x3035;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3036 = Fp(x3009.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3037 = x3036 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3037);
          reg = x3037;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3038 = Fp(x3009.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3039 = x3038 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3039);
          reg = x3039;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3040 = Fp(x3009.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3040);
          reg = x3040;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3041 = Fp(x3008.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3042 = x3041 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3042);
          reg = x3042;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3043 = Fp(x3008.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3043);
          reg = x3043;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3044 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3045 = x3044 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3046 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3046 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3047 = x3046 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3048 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3048 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3049 = x3048 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3050 = x3047 + x3049;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3051 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3051 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3052 = x3051 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3053 = x3050 + x3052;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3054 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3054 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3055 = x3053 + x3054;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3056 = x3045 + x3055;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3057 = x3056 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3058 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3058 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3059 = x3057 + x3058;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3060 = x3011 - x3059;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3060 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3061 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3061 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3062 = x3061 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3063 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3063 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3064 = x3063 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3065 = x3062 + x3064;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3066 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3066 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3067 = x3065 + x3066;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3068 = x3067 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3069 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3069 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3070 = x3069 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3071 = x3068 + x3070;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3072 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3072 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3073 = x3071 + x3072;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3074 = x3010 - x3073;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3074 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3075 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3075 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3076 = x3075 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3077 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3077 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3078 = x3077 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3079 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3079 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3080 = x3078 + x3079;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3081 = x3080 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3082 = x3076 + x3081;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3083 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3083 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3084 = x3083 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3085 = x3082 + x3084;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3086 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3087 = x3085 + x3086;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3088 = x3009 - x3087;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3088 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3089 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3090 = x3089 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3091 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3091 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3092 = x3090 + x3091;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3093 = x3008 - x3092;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3093 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3008;
        host_args.at(1) = x3009;
        host_args.at(2) = x3010;
        host_args.at(3) = x3011;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3094 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3095 = (x3094 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3095);
            reg = x3095;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3096 = x3094 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3097 = (x3096 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3097);
            reg = x3097;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3098 = x3094 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3099 = (x3098 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3099);
            reg = x3099;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3100 = x3094 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3101 = (x3100 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3101);
            reg = x3101;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3102 = x3094 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3103 = (x3102 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3103);
            reg = x3103;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3104 = x3094 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3105 = (x3104 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3105);
            reg = x3105;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3106 = x3094 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3107 = (x3106 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3107);
            reg = x3107;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3108 = x3094 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3109 = (x3108 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3109);
            reg = x3109;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3110 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3110 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3111 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3111 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3112 = x3111 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3113 = x3110 + x3112;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3114 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3114 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3115 = x3114 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3116 = x3113 + x3115;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3117 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3117 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3118 = x3117 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3119 = x3116 + x3118;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3120 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3120 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3121 = x3120 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3122 = x3119 + x3121;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3123 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3123 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3124 = x3123 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3125 = x3122 + x3124;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3126 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3126 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3127 = x3126 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3128 = x3125 + x3127;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3129 = x3128 - x3094;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3129 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3130 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3130 != Fp::invalid());
        if (x3130 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3131 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3132 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3133 = x3131 + x3132;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3134 = x3058 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3135 = x3134 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3136 = x3133 + x3135;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3137 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3138 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3139 = x3137 + x3138;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3140 = x3139 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3141 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3136);
            reg = x3136;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3140);
            reg = x3140;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3141);
            reg = x3141;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3141);
            reg = x3141;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3142 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3142 != Fp::invalid());
        if (x3142 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3143 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3144 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3145 = x3143 + x3144;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3146 = x3058 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3147 = x3146 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3148 = x3145 + x3147;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3149 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3150 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3151 = x3149 + x3150;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3152 = x3151 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3153 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3148);
            reg = x3148;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3152);
            reg = x3152;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3153);
            reg = x3153;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3153);
            reg = x3153;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3154 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3154 != Fp::invalid());
        if (x3154 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3155 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3156 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3157 = x3155 + x3156;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3158 = x3058 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3159 = x3158 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3160 = x3157 + x3159;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3161 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3162 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3163 = x3161 + x3162;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3164 = x3163 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3165 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3160);
            reg = x3160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3164);
            reg = x3164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3165);
            reg = x3165;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3165);
            reg = x3165;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3166 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3166 != Fp::invalid());
        if (x3166 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3167 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3168 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3169 = x3167 + x3168;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3170 = x3058 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3171 = x3170 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3172 = x3169 + x3171;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3173 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3174 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3175 = x3173 + x3174;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3176 = x3175 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3177 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3172);
            reg = x3172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3176);
            reg = x3176;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3177);
            reg = x3177;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3177);
            reg = x3177;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3178 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3178 != Fp::invalid());
        if (x3178 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3179 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3180 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3181 = x3179 + x3180;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3182 = x3058 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3183 = x3182 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3184 = x3181 + x3183;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3185 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3186 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3187 = x3185 + x3186;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3188 = x3187 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3189 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3184);
            reg = x3184;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3188);
            reg = x3188;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3189);
            reg = x3189;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3189);
            reg = x3189;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3190 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3190 != Fp::invalid());
        if (x3190 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3191 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3192 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3193 = x3191 + x3192;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3194 = x3083 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3195 = x3086 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3196 = x3194 + x3195;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3197 = x3196 + x3089;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3198 = x3193 + x3197;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3199 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3200 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3201 = x3199 + x3200;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3202 = x3201 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3203 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3198);
            reg = x3198;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3202);
            reg = x3202;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3203);
            reg = x3203;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3203);
            reg = x3203;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3204 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3204 != Fp::invalid());
        if (x3204 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3205 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3206 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3207 = x3205 + x3206;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3208 = x3083 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3209 = x3086 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3210 = x3208 + x3209;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3211 = x3210 + x3089;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3212 = x3207 + x3211;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3213 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3214 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3215 = x3213 + x3214;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3216 = x3215 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3217 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3212);
            reg = x3212;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3216);
            reg = x3216;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3217);
            reg = x3217;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3217);
            reg = x3217;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3218 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3218 != Fp::invalid());
        if (x3218 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3219 = x3051 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3220 = x3054 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3221 = x3219 + x3220;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3222 = x3083 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3223 = x3086 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3224 = x3222 + x3223;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3225 = x3224 + x3089;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3226 = x3221 + x3225;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3227 = x3044 * x48;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3228 = x3046 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3229 = x3227 + x3228;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3230 = x3229 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3231 = x3044 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3226);
            reg = x3226;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3230);
            reg = x3230;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3231);
            reg = x3231;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3231);
            reg = x3231;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3232 = x3069 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3233 = x3072 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3234 = x3232 + x3233;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3235 = x3234 + x3075;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3236 = x3235 + x47;
      {
        host_args.at(0) = x3236;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3237 = host_outs.at(0);
        auto x3238 = host_outs.at(1);
        auto x3239 = host_outs.at(2);
        auto x3240 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3237);
          reg = x3237;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3238);
          reg = x3238;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3239);
          reg = x3239;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3240);
          reg = x3240;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3241 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3241 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3242 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3242 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3243 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3243 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3244 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3244 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3236);
        reg = x3236;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3241);
        reg = x3241;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3242);
        reg = x3242;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3243);
        reg = x3243;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3244);
        reg = x3244;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3245 = x3058 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3246 = x3245 + x3067;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3247 = x3246 + x47;
      {
        host_args.at(0) = x3247;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3248 = host_outs.at(0);
        auto x3249 = host_outs.at(1);
        auto x3250 = host_outs.at(2);
        auto x3251 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3248);
          reg = x3248;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3249);
          reg = x3249;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3250);
          reg = x3250;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3251);
          reg = x3251;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3252 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3252 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3253 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3253 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3254 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3254 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3255 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x3255 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3247);
        reg = x3247;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3252);
        reg = x3252;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3253);
        reg = x3253;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3254);
        reg = x3254;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3255);
        reg = x3255;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3256 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3256 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3257 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3257 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3258 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3258 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3259 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3259 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3260 = x3083 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3261 = x3086 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3262 = x3260 + x3261;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3263 = x3262 + x3089;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3264 = (x3263 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3264);
          reg = x3264;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3265 = inv(x3263);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3265);
          reg = x3265;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3266 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x3266 != Fp::invalid());
      if (x3266 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3263 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3267 = x95 - x3266;
      if (x3267 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3268 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3268 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3269 = x3263 * x3268;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3270 = x3269 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3270 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":47:17)
        auto x3271 = x3241 + x3256;
        // loc("cirgen/circuit/rv32im/memio.cpp":48:18)
        auto x3272 = Fp(x3271.asUInt32() & x77.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3273 = (x3272 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3273);
            reg = x3273;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3274 = x3272 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3275 = (x3274 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3275);
            reg = x3275;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3276 = x3272 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3277 = (x3276 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3277);
            reg = x3277;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3278 = x3272 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3279 = (x3278 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3279);
            reg = x3279;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3280 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x3280 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3281 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x3281 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3282 = x3281 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3283 = x3280 + x3282;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3284 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3284 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3285 = x3284 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3286 = x3283 + x3285;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3287 = x3286 - x3272;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3287 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("cirgen/circuit/rv32im/memio.cpp":49:20)
        auto x3288 = Fp(x3271.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":49:19)
        auto x3289 = x3288 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x3290 = Fp(x3289.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3290);
            reg = x3290;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3291 = x3271 - x3286;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3292 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x3292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:33)
        auto x3293 = x3292 * x90;
        // loc("cirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3294 = x3291 - x3293;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3294);
          reg = x3294;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":52:22)
        auto x3295 = x3294 * x76;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3295);
          reg = x3295;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3296 = x3242 + x3257;
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3297 = x3296 + x3292;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:24)
        auto x3298 = Fp(x3297.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3298);
          reg = x3298;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":55:25)
        auto x3299 = Fp(x3297.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3300 = x3299 * x89;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3300);
          reg = x3300;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3301 = x3243 + x3258;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3302 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x3302 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3303 = x3301 + x3302;
        // loc("cirgen/circuit/rv32im/memio.cpp":57:24)
        auto x3304 = Fp(x3303.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3304);
          reg = x3304;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":58:25)
        auto x3305 = Fp(x3303.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3306 = x3305 * x89;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3306);
          reg = x3306;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3307 = x3244 + x3259;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3308 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x3308 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3309 = x3307 + x3308;
        // loc("cirgen/circuit/rv32im/memio.cpp":60:23)
        auto x3310 = Fp(x3309.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3310);
          reg = x3310;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":61:24)
        auto x3311 = Fp(x3309.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3312 = x3311 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3312);
          reg = x3312;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:20)
        auto x3313 = Fp(x3309.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:19)
        auto x3314 = x3313 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x3315 = Fp(x3314.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3315);
            reg = x3315;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3316 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3317 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3317 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":65:16)
      auto x3318 = x3317 * x78;
      // loc("cirgen/circuit/rv32im/memio.cpp":65:6)
      auto x3319 = x3316 - x3318;
      // loc("cirgen/circuit/rv32im/memio.cpp":65:6)
      if (x3319 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:65");
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3320 = x3241 + x3256;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3321 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x3321 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3322 = x3321 * x90;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3323 = x3322 + x3316;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3324 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x3324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3325 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x3325 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3326 = x3325 * x92;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3327 = x3324 + x3326;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3328 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x3328 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3329 = x3328 * x77;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3330 = x3327 + x3329;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3331 = x3323 + x3330;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3332 = x3320 - x3331;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      if (x3332 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:67");
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3333 = x3242 + x3257;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3334 = x3333 + x3321;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3335 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x3335 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3336 = x3335 * x90;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3337 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3337 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3338 = x3336 + x3337;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3339 = x3334 - x3338;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      if (x3339 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:69");
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3340 = x3243 + x3258;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3341 = x3340 + x3335;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3342 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x3342 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3343 = x3342 * x90;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3344 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3345 = x3343 + x3344;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3346 = x3341 - x3345;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      if (x3346 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:71");
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3347 = x3244 + x3259;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3348 = x3347 + x3342;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3349 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x3349 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3350 = x3349 * x90;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3351 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:63)
      auto x3352 = x3351 * x78;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3353 = x3350 + x3352;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3354 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3355 = x3353 + x3354;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3356 = x3348 - x3355;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      if (x3356 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:73");
      // loc("cirgen/circuit/rv32im/memio.cpp":76:15)
      auto x3357 = x95 - x3351;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3358 = x3351 * x3357;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:28)
      auto x3359 = x92 - x3351;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3360 = x3358 * x3359;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      if (x3360 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:76");
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3361 = x3351 * x79;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:41)
      auto x3362 = x3354 * x36;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3363 = x3361 + x3362;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:68)
      auto x3364 = x3344 * x35;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3365 = x3363 + x3364;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3366 = x3337 * x54;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3367 = x3365 + x3366;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3368 = x3367 + x3317;
      {
        host_args.at(0) = x3368;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3369 = host_outs.at(0);
        auto x3370 = host_outs.at(1);
        auto x3371 = host_outs.at(2);
        auto x3372 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3369);
          reg = x3369;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3370);
          reg = x3370;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3371);
          reg = x3371;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3372);
          reg = x3372;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3373 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x3373 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3374 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x3374 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3375 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x3375 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3376 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x3376 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3368);
        reg = x3368;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3373);
        reg = x3373;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3374);
        reg = x3374;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3375);
        reg = x3375;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3376);
        reg = x3376;
      }
      host_args.at(0) = x3256;
      host_args.at(1) = x3257;
      host_args.at(2) = x3258;
      host_args.at(3) = x3259;
      host_args.at(4) = x3235;
      host_args.at(5) = x3241;
      host_args.at(6) = x3242;
      host_args.at(7) = x3243;
      host_args.at(8) = x3244;
      host_args.at(9) = x3246;
      host_args.at(10) = x3252;
      host_args.at(11) = x3253;
      host_args.at(12) = x3254;
      host_args.at(13) = x3255;
      host_args.at(14) = x3368;
      host_args.at(15) = x3330;
      host_args.at(16) = x3373;
      host_args.at(17) = x3374;
      host_args.at(18) = x3375;
      host_args.at(19) = x3376;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, Addr = %10x, lowBits = %u, loaded = %w", host_args.data(), 20, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":92:17)
      auto x3377 = x754 + x78;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3378 = x3377 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3379 = Fp(x3378.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3379);
          reg = x3379;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3380 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x3380 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3381 = x3378 - x3380;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3382 = x3381 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3383 = Fp(x3382.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3383);
          reg = x3383;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3384 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x3384 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3385 = x3382 - x3384;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3386 = x3385 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3387 = Fp(x3386.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3387);
          reg = x3387;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3388 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x3388 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3389 = x3386 - x3388;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3390 = x3389 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3391 = Fp(x3390.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3391);
          reg = x3391;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3392 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3392 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3393 = x3390 - x3392;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3394 = x3393 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3394);
        reg = x3394;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3395 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3395 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3396 = x95 - x3395;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3397 = x3395 * x3396;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3397);
        reg = x3397;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3398 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3398 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3399 = x92 - x3395;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3400 = x3398 * x3399;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3400 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":93:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x63);
        reg = x63;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3401 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3401 != Fp::invalid());
      if (x3401 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3402 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3402 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3403 = x3402 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3403 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3404 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3404 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3405 = x3404 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3406 = x3405 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3406 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3407 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3407 != Fp::invalid());
        if (x3407 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3408 = Fp(x3373.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3408);
              reg = x3408;
            }
          }
        }
        if (x3324 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3409 = Fp(x3374.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3409);
              reg = x3409;
            }
          }
        }
        if (x3325 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3410 = Fp(x3375.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3410);
              reg = x3410;
            }
          }
        }
        if (x3328 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3411 = Fp(x3376.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3411);
              reg = x3411;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3412 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3412 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3413 = Fp(x3412.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3414 = x3413 * x61;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3414);
            reg = x3414;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3415 = Fp(x3412.asUInt32() & x51.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3416 = x3415 * x92;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3416);
            reg = x3416;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3417 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3417 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3418 = x95 - x3417;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3419 = x3417 * x3418;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3419 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3420 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3420 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3421 = x3417 * x62;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3422 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3422 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3423 = x3422 * x55;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3424 = x3421 + x3423;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3425 = x3420 - x3424;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3425 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3426 = x3417 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3427 = x3407 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3428 = x3324 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3429 = x3427 + x3428;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3430 = x3325 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3431 = x3429 + x3430;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3432 = x3328 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3433 = x3431 + x3432;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3433);
          reg = x3433;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3426);
          reg = x3426;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3426);
          reg = x3426;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3426);
          reg = x3426;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3434 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3434 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3435 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3435 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3436 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3436 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3437 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3437 != Fp::invalid());
        host_args.at(0) = x3426;
        host_args.at(1) = x3434;
        host_args.at(2) = x3435;
        host_args.at(3) = x3436;
        host_args.at(4) = x3437;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3267 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3438 = x3263 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3434);
            reg = x3434;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3435);
            reg = x3435;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3437);
            reg = x3437;
          }
          {
            host_args.at(0) = x3438;
            host_args.at(1) = x3434;
            host_args.at(2) = x3435;
            host_args.at(3) = x3436;
            host_args.at(4) = x3437;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3439 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3439 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3440 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3440 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3441 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3441 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3442 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3442 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3438);
            reg = x3438;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3439);
            reg = x3439;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3440);
            reg = x3440;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3441);
            reg = x3441;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3442);
            reg = x3442;
          }
        }
        if (x3266 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3443 = x3091 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3443 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3080 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3444 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3445 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3446 = x3444 + x3445;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3447 = x3446 + x3246;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3448 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3449 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3450 = x3448 + x3449;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3451 = x3450 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3452 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3447);
          reg = x3447;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3451);
          reg = x3451;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3452);
          reg = x3452;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3452);
          reg = x3452;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3453 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3453 != Fp::invalid());
      if (x3453 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3454 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3454 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3455 = x3454 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3455 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3456 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3456 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3457 = x3456 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3458 = x3457 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3458 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3459 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3459 != Fp::invalid());
        if (x3459 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3460 = Fp(x3374.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3460);
              reg = x3460;
            }
          }
        }
        if (x3325 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3461 = Fp(x3376.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3461);
              reg = x3461;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3462 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3462 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3463 = Fp(x3462.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3464 = x3463 * x61;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3464);
            reg = x3464;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3465 = Fp(x3462.asUInt32() & x51.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3466 = x3465 * x92;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3467 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3467 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3468 = x95 - x3467;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3469 = x3467 * x3468;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3469 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3470 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3470 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3471 = x3467 * x62;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3472 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3472 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3473 = x3472 * x55;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3474 = x3471 + x3473;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3475 = x3470 - x3474;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3475 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3476 = x3467 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3477 = x3459 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3478 = x3325 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3479 = x3477 + x3478;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3480 = x3459 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3481 = x3325 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3482 = x3480 + x3481;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3479);
          reg = x3479;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3482);
          reg = x3482;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3476);
          reg = x3476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3476);
          reg = x3476;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3483 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3483 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3484 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3484 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3485 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3485 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3486 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3486 != Fp::invalid());
        host_args.at(0) = x3476;
        host_args.at(1) = x3483;
        host_args.at(2) = x3484;
        host_args.at(3) = x3485;
        host_args.at(4) = x3486;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3267 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3487 = x3263 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3483);
            reg = x3483;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3484);
            reg = x3484;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3485);
            reg = x3485;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3486);
            reg = x3486;
          }
          {
            host_args.at(0) = x3487;
            host_args.at(1) = x3483;
            host_args.at(2) = x3484;
            host_args.at(3) = x3485;
            host_args.at(4) = x3486;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3488 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3488 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3489 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3489 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3490 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3490 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3491 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3491 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3487);
            reg = x3487;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3488);
            reg = x3488;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3489);
            reg = x3489;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3490);
            reg = x3490;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3491);
            reg = x3491;
          }
        }
        if (x3266 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3492 = x3091 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3492 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3493 = x3080 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3493 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3494 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3495 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3496 = x3494 + x3495;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3497 = x3496 + x3246;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3498 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3499 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3500 = x3498 + x3499;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3501 = x3500 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3502 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3497);
          reg = x3497;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3501);
          reg = x3501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3502);
          reg = x3502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3502);
          reg = x3502;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3503 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3503 != Fp::invalid());
      if (x3503 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3504 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3504 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3505 = x3504 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3505 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3506 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3506 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3507 = x3506 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3508 = x3507 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3508 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3509 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3509 != Fp::invalid());
        if (x3509 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3510 = Fp(x3376.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3510);
              reg = x3510;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3511 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3511 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3512 = Fp(x3511.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3513 = x3512 * x61;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3513);
            reg = x3513;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3514 = Fp(x3511.asUInt32() & x51.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3515 = x3514 * x92;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3515);
            reg = x3515;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3516 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3516 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3517 = x95 - x3516;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3518 = x3516 * x3517;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3518 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3519 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3519 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3520 = x3516 * x62;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3521 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3521 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3522 = x3521 * x55;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3523 = x3520 + x3522;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3524 = x3519 - x3523;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3524 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3525 = x3509 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3526 = x3509 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3527 = x3509 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3528 = x3509 * x3376;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3525);
          reg = x3525;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3526);
          reg = x3526;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3527);
          reg = x3527;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3528);
          reg = x3528;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3529 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3529 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3530 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3530 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3531 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3531 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3532 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3532 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3529;
        host_args.at(2) = x3530;
        host_args.at(3) = x3531;
        host_args.at(4) = x3532;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3267 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3533 = x3263 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3529);
            reg = x3529;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3530);
            reg = x3530;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3531);
            reg = x3531;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3532);
            reg = x3532;
          }
          {
            host_args.at(0) = x3533;
            host_args.at(1) = x3529;
            host_args.at(2) = x3530;
            host_args.at(3) = x3531;
            host_args.at(4) = x3532;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3534 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3534 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3535 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3535 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3536 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3536 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3537 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3537 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3533);
            reg = x3533;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3534);
            reg = x3534;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3535);
            reg = x3535;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3536);
            reg = x3536;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3537);
            reg = x3537;
          }
        }
        if (x3266 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3538 = x3091 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3538 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3539 = x3080 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3539 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3540 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3541 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3542 = x3540 + x3541;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3543 = x3542 + x3246;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3544 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3545 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3546 = x3544 + x3545;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3547 = x3546 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3548 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3543);
          reg = x3543;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3547);
          reg = x3547;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3548);
          reg = x3548;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3548);
          reg = x3548;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3549 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3549 != Fp::invalid());
      if (x3549 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3550 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3550 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3551 = x3550 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3551 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3552 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3552 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3553 = x3552 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3554 = x3553 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3554 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3555 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3555 != Fp::invalid());
        if (x3555 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3556 = Fp(x3373.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3556);
              reg = x3556;
            }
          }
        }
        if (x3324 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3557 = Fp(x3374.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3557);
              reg = x3557;
            }
          }
        }
        if (x3325 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3558 = Fp(x3375.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3558);
              reg = x3558;
            }
          }
        }
        if (x3328 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3559 = Fp(x3376.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3559);
              reg = x3559;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3560 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3560 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3561 = Fp(x3560.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3562 = x3561 * x61;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3562);
            reg = x3562;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3563 = Fp(x3560.asUInt32() & x51.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3564 = x3563 * x92;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3564);
            reg = x3564;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3565 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3565 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3566 = x95 - x3565;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3567 = x3565 * x3566;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3567 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3568 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3568 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3569 = x3565 * x62;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3570 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3570 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3571 = x3570 * x55;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3572 = x3569 + x3571;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3573 = x3568 - x3572;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3573 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3574 = x3555 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3575 = x3324 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3576 = x3574 + x3575;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3577 = x3325 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3578 = x3576 + x3577;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3579 = x3328 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3580 = x3578 + x3579;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3581 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3581 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3582 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3582 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3583 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3583 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3584 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3584 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3581;
        host_args.at(2) = x3582;
        host_args.at(3) = x3583;
        host_args.at(4) = x3584;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3267 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3585 = x3263 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3581);
            reg = x3581;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3582);
            reg = x3582;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3583);
            reg = x3583;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3584);
            reg = x3584;
          }
          {
            host_args.at(0) = x3585;
            host_args.at(1) = x3581;
            host_args.at(2) = x3582;
            host_args.at(3) = x3583;
            host_args.at(4) = x3584;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3586 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3586 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3587 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3587 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3588 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3588 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3589 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3589 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3585);
            reg = x3585;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3586);
            reg = x3586;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3587);
            reg = x3587;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3588);
            reg = x3588;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3589);
            reg = x3589;
          }
        }
        if (x3266 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3590 = x3091 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3590 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3591 = x3080 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3591 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3592 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3593 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3594 = x3592 + x3593;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3595 = x3594 + x3246;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3596 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3597 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3598 = x3596 + x3597;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3599 = x3598 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3600 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3595);
          reg = x3595;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3599);
          reg = x3599;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3600);
          reg = x3600;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3600);
          reg = x3600;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3601 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3601 != Fp::invalid());
      if (x3601 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3602 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3602 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3603 = x3602 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3603 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3604 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3604 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3605 = x3604 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3606 = x3605 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3606 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3607 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3607 != Fp::invalid());
        if (x3607 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3608 = Fp(x3374.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3608);
              reg = x3608;
            }
          }
        }
        if (x3325 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3609 = Fp(x3376.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3609);
              reg = x3609;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3610 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3610 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3611 = Fp(x3610.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3612 = x3611 * x61;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3612);
            reg = x3612;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3613 = Fp(x3610.asUInt32() & x51.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3614 = x3613 * x92;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3614);
            reg = x3614;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3615 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3615 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3616 = x95 - x3615;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3617 = x3615 * x3616;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3617 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3618 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3618 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3619 = x3615 * x62;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3620 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3620 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3621 = x3620 * x55;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3622 = x3619 + x3621;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3623 = x3618 - x3622;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3623 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3624 = x3607 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3625 = x3325 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3626 = x3624 + x3625;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3627 = x3607 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3628 = x3325 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3629 = x3627 + x3628;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3626);
          reg = x3626;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3630 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3630 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3631 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3631 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3632 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3632 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3633 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3633 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3630;
        host_args.at(2) = x3631;
        host_args.at(3) = x3632;
        host_args.at(4) = x3633;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3267 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3634 = x3263 + x47;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3630);
            reg = x3630;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3631);
            reg = x3631;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3632);
            reg = x3632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3633);
            reg = x3633;
          }
          {
            host_args.at(0) = x3634;
            host_args.at(1) = x3630;
            host_args.at(2) = x3631;
            host_args.at(3) = x3632;
            host_args.at(4) = x3633;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3635 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3635 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3636 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3636 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3637 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3637 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3638 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3638 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3634);
            reg = x3634;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3635);
            reg = x3635;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3636);
            reg = x3636;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3637);
            reg = x3637;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3638);
            reg = x3638;
          }
        }
        if (x3266 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3639 = x3091 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3639 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3640 = x3080 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3640 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3641 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3642 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3643 = x3641 + x3642;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3644 = x3643 + x3246;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3645 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3646 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3647 = x3645 + x3646;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3648 = x3647 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3649 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3644);
          reg = x3644;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3648);
          reg = x3648;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3649);
          reg = x3649;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3649);
          reg = x3649;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3650 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3650 != Fp::invalid());
      if (x3650 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3651 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3651 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3652 = x3651 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3652 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3653 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3653 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3654 = x3653 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3655 = x3654 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3655 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3656 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3656 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3657 = x3656 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3658 = x95 - x3656;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3659 = x3658 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3660 = x3657 + x3659;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3661 = x3324 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3662 = x95 - x3324;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3663 = x3662 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3664 = x3661 + x3663;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3665 = x3325 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3666 = x95 - x3325;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3667 = x3666 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3668 = x3665 + x3667;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3669 = x3328 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3670 = x95 - x3328;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3671 = x3670 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3672 = x3669 + x3671;
        host_args.at(0) = x3660;
        host_args.at(1) = x3664;
        host_args.at(2) = x3668;
        host_args.at(3) = x3672;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3660);
          reg = x3660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3664);
          reg = x3664;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3668);
          reg = x3668;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3672);
          reg = x3672;
        }
        {
          host_args.at(0) = x3368;
          host_args.at(1) = x3660;
          host_args.at(2) = x3664;
          host_args.at(3) = x3668;
          host_args.at(4) = x3672;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3673 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3673 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3674 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3674 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3675 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3675 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3676 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3676 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3368);
          reg = x3368;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3673);
          reg = x3673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3674);
          reg = x3674;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3675);
          reg = x3675;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3676);
          reg = x3676;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3677 = x3091 - x34;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3677 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3080 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3678 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3679 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3680 = x3678 + x3679;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3681 = x3680 + x3263;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3682 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3683 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3684 = x3682 + x3683;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3685 = x3684 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3686 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3681);
          reg = x3681;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3685);
          reg = x3685;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3686);
          reg = x3686;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3686);
          reg = x3686;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3687 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x3687 != Fp::invalid());
      if (x3687 != 0) {
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3688 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3688 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3689 = x3688 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3689 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3690 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3690 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3691 = x3690 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3692 = x3691 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3692 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3693 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3693 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3694 = x3693 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3695 = x95 - x3693;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3696 = x3695 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3697 = x3694 + x3696;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3698 = x3325 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3699 = x95 - x3325;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3700 = x3699 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3701 = x3698 + x3700;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3702 = x3693 * x3253;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3703 = x3695 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3704 = x3702 + x3703;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3705 = x3325 * x3253;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3706 = x3699 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3707 = x3705 + x3706;
        host_args.at(0) = x3697;
        host_args.at(1) = x3704;
        host_args.at(2) = x3701;
        host_args.at(3) = x3707;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3697);
          reg = x3697;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3704);
          reg = x3704;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3701);
          reg = x3701;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3707);
          reg = x3707;
        }
        {
          host_args.at(0) = x3368;
          host_args.at(1) = x3697;
          host_args.at(2) = x3704;
          host_args.at(3) = x3701;
          host_args.at(4) = x3707;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3708 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3708 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3709 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3709 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3710 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3710 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3711 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3711 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3368);
          reg = x3368;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3708);
          reg = x3708;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3709);
          reg = x3709;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3710);
          reg = x3710;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3711);
          reg = x3711;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3712 = x3091 - x34;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3712 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3713 = x3080 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3713 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3714 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3715 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3716 = x3714 + x3715;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3717 = x3716 + x3263;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3718 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3719 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3720 = x3718 + x3719;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3721 = x3720 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3722 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3717);
          reg = x3717;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3721);
          reg = x3721;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3722);
          reg = x3722;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3722);
          reg = x3722;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3723 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x3723 != Fp::invalid());
      if (x3723 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3724 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3724 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3725 = x3724 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3725 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x94 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3726 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3726 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3727 = x3726 + x3325;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3728 = x3727 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3728 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3729 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3729 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3730 = x3729 * x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3731 = x95 - x3729;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3732 = x3731 * x3373;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3733 = x3730 + x3732;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3734 = x3729 * x3253;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3735 = x3731 * x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3736 = x3734 + x3735;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3737 = x3729 * x3254;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3738 = x3731 * x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3739 = x3737 + x3738;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3740 = x3729 * x3255;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3741 = x3731 * x3376;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3742 = x3740 + x3741;
        host_args.at(0) = x3733;
        host_args.at(1) = x3736;
        host_args.at(2) = x3739;
        host_args.at(3) = x3742;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3733);
          reg = x3733;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3736);
          reg = x3736;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3739);
          reg = x3739;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
        {
          host_args.at(0) = x3368;
          host_args.at(1) = x3733;
          host_args.at(2) = x3736;
          host_args.at(3) = x3739;
          host_args.at(4) = x3742;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3743 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3744 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3745 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3746 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3746 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3368);
          reg = x3368;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3743);
          reg = x3743;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3744);
          reg = x3744;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3745);
          reg = x3745;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3746);
          reg = x3746;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3747 = x3091 - x34;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3747 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3748 = x3080 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3748 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3749 = x3051 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3750 = x3054 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3751 = x3749 + x3750;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3752 = x3751 + x3263;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3753 = x3044 * x48;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3754 = x3046 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3755 = x3753 + x3754;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3756 = x3755 + x3048;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3757 = x3044 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3752);
          reg = x3752;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3756);
          reg = x3756;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3757);
          reg = x3757;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3757);
          reg = x3757;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":49:25))
    auto x3758 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x3758 != Fp::invalid());
    if (x3758 != 0) {
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3759 = x754 * x76;
      {
        host_args.at(0) = x3759;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3760 = host_outs.at(0);
        auto x3761 = host_outs.at(1);
        auto x3762 = host_outs.at(2);
        auto x3763 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3760);
          reg = x3760;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3761);
          reg = x3761;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3762);
          reg = x3762;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3763);
          reg = x3763;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3764 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3764 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3765 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3765 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3766 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3766 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3767 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3767 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3759);
        reg = x3759;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3764);
        reg = x3764;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3765);
        reg = x3765;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3766);
        reg = x3766;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3767);
        reg = x3767;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3768 = Fp(x3767.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3769 = x3768 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3769);
          reg = x3769;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3770 = Fp(x3767.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3771 = x3770 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3771);
          reg = x3771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3772 = Fp(x3767.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3773 = x3772 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3773);
          reg = x3773;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3774 = Fp(x3767.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3775 = x3774 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3775);
          reg = x3775;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3776 = Fp(x3767.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3777 = x3776 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3777);
          reg = x3777;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3778 = Fp(x3767.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3778);
          reg = x3778;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3779 = Fp(x3766.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3780 = x3779 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3780);
          reg = x3780;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3781 = Fp(x3766.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3782 = x3781 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3782);
          reg = x3782;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3783 = Fp(x3766.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3784 = x3783 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3784);
          reg = x3784;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3785 = Fp(x3766.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3786 = x3785 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3786);
          reg = x3786;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3787 = Fp(x3766.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3787);
          reg = x3787;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3788 = Fp(x3765.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3789 = x3788 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3789);
          reg = x3789;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3790 = Fp(x3765.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3791 = x3790 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3791);
          reg = x3791;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3792 = Fp(x3765.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3793 = x3792 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3793);
          reg = x3793;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3794 = Fp(x3765.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3795 = x3794 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3795);
          reg = x3795;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3796 = Fp(x3765.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3796);
          reg = x3796;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3797 = Fp(x3764.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3798 = x3797 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3798);
          reg = x3798;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3799 = Fp(x3764.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3799);
          reg = x3799;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3800 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3801 = x3800 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3802 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3803 = x3802 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3804 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x3804 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3805 = x3804 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3806 = x3803 + x3805;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3807 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x3807 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3808 = x3807 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3809 = x3806 + x3808;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3810 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3811 = x3809 + x3810;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3812 = x3801 + x3811;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3813 = x3812 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3814 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3814 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3815 = x3813 + x3814;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3816 = x3767 - x3815;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3816 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3817 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3818 = x3817 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3819 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3820 = x3819 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3821 = x3818 + x3820;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3822 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3822 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3823 = x3821 + x3822;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3824 = x3823 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3825 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3826 = x3825 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3827 = x3824 + x3826;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3828 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3829 = x3827 + x3828;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3830 = x3766 - x3829;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3830 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3831 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3831 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3832 = x3831 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3833 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3833 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3834 = x3833 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3835 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3835 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3836 = x3834 + x3835;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3837 = x3836 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3838 = x3832 + x3837;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3839 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3839 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3840 = x3839 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3841 = x3838 + x3840;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3842 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3842 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3843 = x3841 + x3842;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3844 = x3765 - x3843;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3844 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3845 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3846 = x3845 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3847 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3847 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3848 = x3846 + x3847;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3849 = x3764 - x3848;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3849 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3764;
        host_args.at(1) = x3765;
        host_args.at(2) = x3766;
        host_args.at(3) = x3767;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3850 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3851 = (x3850 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3851);
            reg = x3851;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3852 = x3850 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3853 = (x3852 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3853);
            reg = x3853;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3854 = x3850 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3855 = (x3854 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3855);
            reg = x3855;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3856 = x3850 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3857 = (x3856 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3857);
            reg = x3857;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3858 = x3850 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3859 = (x3858 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3859);
            reg = x3859;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3860 = x3850 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3861 = (x3860 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3861);
            reg = x3861;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3862 = x3850 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3863 = (x3862 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3863);
            reg = x3863;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3864 = x3850 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3865 = (x3864 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3865);
            reg = x3865;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3866 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3866 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3867 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3867 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3868 = x3867 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3869 = x3866 + x3868;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3870 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3870 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3871 = x3870 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3872 = x3869 + x3871;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3873 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x3873 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3874 = x3873 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3875 = x3872 + x3874;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3876 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x3876 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3877 = x3876 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3878 = x3875 + x3877;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3879 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3879 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3880 = x3879 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3881 = x3878 + x3880;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3882 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3882 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3883 = x3882 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3884 = x3881 + x3883;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3885 = x3884 - x3850;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3885 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      host_args.at(0) = x94;
      host_args.at(1) = x94;
      host_args.at(2) = x94;
      host_args.at(3) = x94;
      host_args.at(4) = x94;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3886 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3887 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3887 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3888 = x3886 + x3887;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3889 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3889 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3890 = x3888 + x3889;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3891 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3892 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3892 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3893 = x3891 + x3892;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3894 = x3825 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3895 = x3828 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3896 = x3894 + x3895;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3897 = x3896 + x3831;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3898 = x3897 + x47;
      {
        host_args.at(0) = x3898;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3899 = host_outs.at(0);
        auto x3900 = host_outs.at(1);
        auto x3901 = host_outs.at(2);
        auto x3902 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3899);
          reg = x3899;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3900);
          reg = x3900;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3901);
          reg = x3901;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3903 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3903 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3904 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3904 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3905 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3905 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3906 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3906 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3898);
        reg = x3898;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3903);
        reg = x3903;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3904);
        reg = x3904;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3905);
        reg = x3905;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3906);
        reg = x3906;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3907 = x3814 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3908 = x3907 + x3823;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3909 = x3908 + x47;
      {
        host_args.at(0) = x3909;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3910 = host_outs.at(0);
        auto x3911 = host_outs.at(1);
        auto x3912 = host_outs.at(2);
        auto x3913 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3910);
          reg = x3910;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3911);
          reg = x3911;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3912);
          reg = x3912;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3913);
          reg = x3913;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3914 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3914 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3915 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3916 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3916 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3917 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x3917 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3909);
        reg = x3909;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3914);
        reg = x3914;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3915);
        reg = x3915;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3916);
        reg = x3916;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3917);
        reg = x3917;
      }
      host_args.at(0) = x3897;
      host_args.at(1) = x3903;
      host_args.at(2) = x3904;
      host_args.at(3) = x3905;
      host_args.at(4) = x3906;
      host_args.at(5) = x3908;
      host_args.at(6) = x3914;
      host_args.at(7) = x3915;
      host_args.at(8) = x3916;
      host_args.at(9) = x3917;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3918 = x3807 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3919 = x3810 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3920 = x3918 + x3919;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3921 = x3920 + x3908;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3922 = x3892 * x3921;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3923 = x95 - x3892;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3924 = x3923 * x3914;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3925 = x3922 + x3924;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3926 = Fp(x3925.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3927 = x3926 * x53;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3927);
          reg = x3927;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3928 = Fp(x3925.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3929 = x3928 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3929);
          reg = x3929;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3930 = Fp(x3925.asUInt32() & x32.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3931 = Fp(x3930.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3931);
            reg = x3931;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3932 = Fp(x3930.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3933 = x3932 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3933);
            reg = x3933;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3934 = Fp(x3930.asUInt32() & x78.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3935 = x3934 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3935);
            reg = x3935;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3936 = Fp(x3930.asUInt32() & x71.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3937 = x3936 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3937);
            reg = x3937;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3938 = Fp(x3930.asUInt32() & x63.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3939 = x3938 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3939);
            reg = x3939;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3940 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x3940 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3941 = x3940 * x64;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3942 = x3941 + x95;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3943 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x3943 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3944 = x3943 * x77;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3945 = x3944 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3946 = x3942 * x3945;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3947 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x3947 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3948 = x3947 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3949 = x3946 * x3948;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3950 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x3950 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3951 = x3950 * x92;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x3952 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3952 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3953 = x3951 + x3952;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3954 = (x3953 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3955 = x3954 * x3949;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3956 = x3953 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3957 = (x3956 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3958 = x3957 * x3949;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3959 = x3953 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3960 = (x3959 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3961 = x3960 * x3949;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3962 = x3953 - x77;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3963 = (x3962 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3964 = x3963 * x3949;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3955);
            reg = x3955;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3958);
            reg = x3958;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3961);
            reg = x3961;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3964);
            reg = x3964;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3965 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3965 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3966 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x3966 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3967 = x3966 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3968 = x3965 + x3967;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3969 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3969 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3970 = x3969 * x78;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3971 = x3968 + x3970;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3972 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3972 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3973 = x3972 * x71;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3974 = x3971 + x3973;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x3975 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3975 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3976 = x3975 * x63;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3977 = x3974 + x3976;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3978 = x3977 - x3930;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3978 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3979 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3979 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3980 = x3979 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3981 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3982 = x3981 * x59;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3983 = x3980 + x3982;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3984 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3985 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3985 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3986 = x3985 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3987 = x3984 + x3986;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3988 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3988 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3989 = x3988 * x78;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3990 = x3987 + x3989;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3991 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3991 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3992 = x3991 * x71;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3993 = x3990 + x3992;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3994 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3994 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3995 = x3994 * x63;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3996 = x3993 + x3995;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3997 = x3983 + x3996;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3998 = x3925 - x3997;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3998 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x3999 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4000 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4001 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4002 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4002 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4003 = x3893 * x3999;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4004 = x3893 * x4000;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4005 = x3893 * x4001;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4006 = x3893 * x4002;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x4007 = x95 - x3893;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4008 = x4007 * x3914;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4009 = x4007 * x3915;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4010 = x4007 * x3916;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4011 = x4007 * x3917;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4012 = x4003 + x4008;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4013 = x4004 + x4009;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4014 = x4005 + x4010;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4015 = x4006 + x4011;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4016 = Fp(x3906.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4017 = x4016 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4017);
          reg = x4017;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4018 = Fp(x3906.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4019 = x4018 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4019);
          reg = x4019;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4020 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4020 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4021 = x4020 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4022 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4022 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4023 = x4022 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4024 = x4021 + x4023;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4025 = x3906 - x4024;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4025 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4026 = Fp(x4015.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4027 = x4026 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4027);
          reg = x4027;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4028 = Fp(x4015.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4029 = x4028 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4029);
          reg = x4029;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4030 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4031 = x4030 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4032 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4032 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4033 = x4032 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4034 = x4031 + x4033;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4035 = x4015 - x4034;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4035 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x4036 = x3886 * x4030;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4036);
        reg = x4036;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x4037 = x3888 * x4020;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4037);
        reg = x4037;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4038 = x3903 * x4012;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4039 = x3904 * x4012;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4040 = x3903 * x4013;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4041 = x4039 + x4040;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4042 = x4041 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4043 = x4038 + x4042;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4044 = Fp(x4043.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4044);
          reg = x4044;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4045 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4045 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4046 = x4043 - x4045;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4047 = x4046 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4048 = Fp(x4047.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4048);
          reg = x4048;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4049 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4049 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4050 = x4047 - x4049;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4051 = x4050 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4052 = Fp(x4051.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4052);
          reg = x4052;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4053 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4053 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4054 = x4051 - x4053;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4055 = x4054 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4055);
        reg = x4055;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4056 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4056 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4057 = x4056 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4058 = x4053 + x4057;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4059 = x3905 * x4012;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4060 = x3904 * x4013;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4061 = x4059 + x4060;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4062 = x3903 * x4014;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4063 = x4061 + x4062;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4064 = x4058 + x4063;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4065 = x3906 * x4012;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4066 = x3905 * x4013;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4067 = x4065 + x4066;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4068 = x3904 * x4014;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4069 = x4067 + x4068;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4070 = x3903 * x4015;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4071 = x4069 + x4070;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4072 = x4071 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4073 = x4064 + x4072;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4074 = Fp(x4073.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4074);
          reg = x4074;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4075 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4075 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4076 = x4073 - x4075;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4077 = x4076 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4078 = Fp(x4077.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4078);
          reg = x4078;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4079 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4079 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4080 = x4077 - x4079;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4081 = x4080 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4082 = Fp(x4081.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4082);
          reg = x4082;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4083 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4083 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4084 = x4081 - x4083;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4085 = x4084 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4085);
        reg = x4085;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4086 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4086 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4087 = x4086 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4088 = x4083 + x4087;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4089 = x3906 * x4013;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4090 = x3905 * x4014;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4091 = x4089 + x4090;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4092 = x3904 * x4015;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4093 = x4091 + x4092;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4094 = x4088 + x4093;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4095 = x3906 * x4014;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4096 = x3905 * x4015;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4097 = x4095 + x4096;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4098 = x4097 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4099 = x4094 + x4098;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4100 = x4099 + x31;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4101 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4101 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x4102 = x3904 * x90;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x4103 = x3903 + x4102;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x4104 = x4101 * x4103;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4105 = x4100 - x4104;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4106 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x4106 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x4107 = x4013 * x90;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x4108 = x4012 + x4107;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x4109 = x4106 * x4108;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4110 = x4105 - x4109;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4111 = Fp(x4110.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4111);
          reg = x4111;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4112 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4112 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4113 = x4110 - x4112;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4114 = x4113 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4115 = Fp(x4114.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4115);
          reg = x4115;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4116 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4116 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4117 = x4114 - x4116;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4118 = x4117 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4119 = Fp(x4118.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4119);
          reg = x4119;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4120 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4120 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4121 = x4118 - x4120;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4122 = x4121 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4122);
        reg = x4122;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4123 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4123 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4124 = x4123 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4125 = x4120 + x4124;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4126 = x3906 * x4015;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4127 = x4125 + x4126;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4128 = x4127 + x30;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x4129 = x3906 * x90;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x4130 = x3905 + x4129;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x4131 = x4101 * x4130;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4132 = x4128 - x4131;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x4133 = x4015 * x90;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x4134 = x4014 + x4133;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x4135 = x4106 * x4134;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4136 = x4132 - x4135;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4137 = Fp(x4136.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4137);
          reg = x4137;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4138 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4138 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4139 = x4136 - x4138;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4140 = x4139 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4141 = Fp(x4140.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4141);
          reg = x4141;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4142 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4142 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4143 = x4140 - x4142;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4144 = x4143 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4144);
        reg = x4144;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4145 = x3839 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4146 = x3842 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4147 = x4145 + x4146;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4148 = x4147 + x3845;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4149 = (x4148 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4149);
          reg = x4149;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4150 = inv(x4148);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4150);
          reg = x4150;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4151 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x4151 != Fp::invalid());
      if (x4151 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4148 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4152 = x95 - x4151;
      if (x4152 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4153 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x4153 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4154 = x4148 * x4153;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4155 = x4154 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4155 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x4156 = x754 + x78;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4157 = x4156 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4158 = Fp(x4157.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4158);
          reg = x4158;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4159 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4159 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4160 = x4157 - x4159;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4161 = x4160 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4162 = Fp(x4161.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4162);
          reg = x4162;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4163 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4163 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4164 = x4161 - x4163;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4165 = x4164 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4166 = Fp(x4165.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4166);
          reg = x4166;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4167 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4167 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4168 = x4165 - x4167;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4169 = x4168 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4170 = Fp(x4169.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4170);
          reg = x4170;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4171 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4172 = x4169 - x4171;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4173 = x4172 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4173);
        reg = x4173;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4174 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4175 = x95 - x4174;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4176 = x4174 * x4175;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4176);
        reg = x4176;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4177 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4178 = x92 - x4174;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4179 = x4177 * x4178;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4179 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x63);
        reg = x63;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4180 = x3890 * x4152;
      if (x4180 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4181 = x4148 + x47;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4112);
          reg = x4112;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4116);
          reg = x4116;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4138);
          reg = x4138;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4142);
          reg = x4142;
        }
        {
          host_args.at(0) = x4181;
          host_args.at(1) = x4112;
          host_args.at(2) = x4116;
          host_args.at(3) = x4138;
          host_args.at(4) = x4142;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4182 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4182 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4183 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4183 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4184 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4184 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4185 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4185 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4181);
          reg = x4181;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4182);
          reg = x4182;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4183);
          reg = x4183;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4184);
          reg = x4184;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4185);
          reg = x4185;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4186 = x95 - x3890;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4187 = x4186 * x4152;
      if (x4187 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4188 = x4148 + x47;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4045);
          reg = x4045;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4049);
          reg = x4049;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4075);
          reg = x4075;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4079);
          reg = x4079;
        }
        {
          host_args.at(0) = x4188;
          host_args.at(1) = x4045;
          host_args.at(2) = x4049;
          host_args.at(3) = x4075;
          host_args.at(4) = x4079;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4189 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4189 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4190 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4190 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4191 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4191 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4192 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4192 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4188);
          reg = x4188;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4189);
          reg = x4189;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4190);
          reg = x4190;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4191);
          reg = x4191;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4192);
          reg = x4192;
        }
      }
      if (x4151 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4193 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4193 != Fp::invalid());
      if (x4193 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4194 = x3847 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4194 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3836 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4195 = x3812 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4195 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3886 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4196 = x3847 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4196 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4197 = x3836 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4197 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4198 = x3812 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4198 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3887 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4199 = x3847 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4199 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4200 = x3836 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4200 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4201 = x3812 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4201 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3889 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4202 = x3847 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4202 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4203 = x3836 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4203 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4204 = x3812 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4204 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3891 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4205 = x3847 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4205 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4206 = x3836 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4206 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3812 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3892 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4207 = x3847 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4207 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4208 = x3836 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4208 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3812 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":49:25))
    auto x4209 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x4209 != Fp::invalid());
    if (x4209 != 0) {
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4210 = x754 * x76;
      {
        host_args.at(0) = x4210;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4211 = host_outs.at(0);
        auto x4212 = host_outs.at(1);
        auto x4213 = host_outs.at(2);
        auto x4214 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4211);
          reg = x4211;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4212);
          reg = x4212;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4213);
          reg = x4213;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4214);
          reg = x4214;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4215 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4216 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4216 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4217 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4217 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4218 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4218 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4210);
        reg = x4210;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4215);
        reg = x4215;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4216);
        reg = x4216;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4217);
        reg = x4217;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4218);
        reg = x4218;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4219 = Fp(x4218.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4220 = x4219 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4220);
          reg = x4220;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4221 = Fp(x4218.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4222 = x4221 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4222);
          reg = x4222;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4223 = Fp(x4218.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4224 = x4223 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4224);
          reg = x4224;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4225 = Fp(x4218.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4226 = x4225 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4226);
          reg = x4226;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4227 = Fp(x4218.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4228 = x4227 * x55;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4228);
          reg = x4228;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4229 = Fp(x4218.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4229);
          reg = x4229;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4230 = Fp(x4217.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4231 = x4230 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4231);
          reg = x4231;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4232 = Fp(x4217.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4233 = x4232 * x58;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4233);
          reg = x4233;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4234 = Fp(x4217.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4235 = x4234 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4235);
          reg = x4235;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4236 = Fp(x4217.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4237 = x4236 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4237);
          reg = x4237;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4238 = Fp(x4217.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4238);
          reg = x4238;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4239 = Fp(x4216.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4240 = x4239 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4240);
          reg = x4240;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4241 = Fp(x4216.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4242 = x4241 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4242);
          reg = x4242;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4243 = Fp(x4216.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4244 = x4243 * x57;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4244);
          reg = x4244;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4245 = Fp(x4216.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4246 = x4245 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4246);
          reg = x4246;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4247 = Fp(x4216.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4247);
          reg = x4247;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4248 = Fp(x4215.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4249 = x4248 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4249);
          reg = x4249;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4250 = Fp(x4215.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4250);
          reg = x4250;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4251 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4251 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4252 = x4251 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4253 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4254 = x4253 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4255 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4255 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4256 = x4255 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4257 = x4254 + x4256;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4258 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4258 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4259 = x4258 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4260 = x4257 + x4259;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4261 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x4261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4262 = x4260 + x4261;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4263 = x4252 + x4262;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4264 = x4263 * x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4265 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4266 = x4264 + x4265;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4267 = x4218 - x4266;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4267 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4268 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4268 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4269 = x4268 * x71;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4270 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x4270 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4271 = x4270 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4272 = x4269 + x4271;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4273 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4273 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4274 = x4272 + x4273;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4275 = x4274 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4276 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4276 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4277 = x4276 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4278 = x4275 + x4277;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4279 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4279 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4280 = x4278 + x4279;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4281 = x4217 - x4280;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4281 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4282 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4282 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4283 = x4282 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4284 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4284 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4285 = x4284 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4286 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4286 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4287 = x4285 + x4286;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4288 = x4287 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4289 = x4283 + x4288;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4290 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4290 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4291 = x4290 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4292 = x4289 + x4291;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4293 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4293 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4294 = x4292 + x4293;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4295 = x4216 - x4294;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4295 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4296 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4296 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4297 = x4296 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4298 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4298 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4299 = x4297 + x4298;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4300 = x4215 - x4299;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4300 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4215;
        host_args.at(1) = x4216;
        host_args.at(2) = x4217;
        host_args.at(3) = x4218;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4301 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4302 = (x4301 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4302);
            reg = x4302;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4303 = x4301 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4304 = (x4303 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4304);
            reg = x4304;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4305 = x4301 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4306 = (x4305 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4306);
            reg = x4306;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4307 = x4301 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4308 = (x4307 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4308);
            reg = x4308;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4309 = x4301 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4310 = (x4309 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4310);
            reg = x4310;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4311 = x4301 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4312 = (x4311 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4312);
            reg = x4312;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4313 = x4301 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4314 = (x4313 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4314);
            reg = x4314;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4315 = x4301 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4316 = (x4315 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4316);
            reg = x4316;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4317 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4318 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4318 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4319 = x4318 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4320 = x4317 + x4319;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4321 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4321 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4322 = x4321 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4323 = x4320 + x4322;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4324 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4324 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4325 = x4324 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4326 = x4323 + x4325;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4327 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x4327 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4328 = x4327 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4329 = x4326 + x4328;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4330 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x4330 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4331 = x4330 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4332 = x4329 + x4331;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4333 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x4333 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4334 = x4333 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4335 = x4332 + x4334;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x4336 = x4335 - x4301;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x4336 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4337 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4337 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4338 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4338 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4339 = x4337 + x4338;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4340 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4340 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4341 = x4338 + x4340;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4342 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4342 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4343 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4343 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4344 = x4342 + x4343;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4345 = x4339 + x4343;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4346 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4346 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4347 = x4344 + x4346;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4348 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4348 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4349 = x4346 + x4348;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4350 = x4347 + x4348;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4351 = x4345 + x4348;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4352 = x4343 + x4348;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4351);
        reg = x4351;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4352);
        reg = x4352;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4353 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4353 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4354 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4354 != Fp::invalid());
      host_args.at(0) = x4349;
      host_args.at(1) = x4350;
      host_args.at(2) = x4353;
      host_args.at(3) = x4354;
      host_args.at(4) = x4341;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4355 = x4276 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4356 = x4279 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4357 = x4355 + x4356;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4358 = x4357 + x4282;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4359 = x4358 + x47;
      {
        host_args.at(0) = x4359;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4360 = host_outs.at(0);
        auto x4361 = host_outs.at(1);
        auto x4362 = host_outs.at(2);
        auto x4363 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4361);
          reg = x4361;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4362);
          reg = x4362;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4364 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4364 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4365 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4366 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4367 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4367 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4359);
        reg = x4359;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4364);
        reg = x4364;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4365);
        reg = x4365;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4366);
        reg = x4366;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4367);
        reg = x4367;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4368 = x4265 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4369 = x4368 + x4274;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4370 = x4369 + x47;
      {
        host_args.at(0) = x4370;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4371 = host_outs.at(0);
        auto x4372 = host_outs.at(1);
        auto x4373 = host_outs.at(2);
        auto x4374 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4371);
          reg = x4371;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4372);
          reg = x4372;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4373);
          reg = x4373;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4374);
          reg = x4374;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4375 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4375 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4376 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4376 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4377 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4377 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4378 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4378 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4370);
        reg = x4370;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4375);
        reg = x4375;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4376);
        reg = x4376;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4377);
        reg = x4377;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4378);
        reg = x4378;
      }
      host_args.at(0) = x4358;
      host_args.at(1) = x4364;
      host_args.at(2) = x4365;
      host_args.at(3) = x4366;
      host_args.at(4) = x4367;
      host_args.at(5) = x4369;
      host_args.at(6) = x4375;
      host_args.at(7) = x4376;
      host_args.at(8) = x4377;
      host_args.at(9) = x4378;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4379 = x4258 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4380 = x4261 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4381 = x4379 + x4380;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4382 = x4381 + x4369;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4383 = x4349 * x4382;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4384 = x95 - x4349;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4385 = x4384 * x4375;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4386 = x4383 + x4385;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4387 = Fp(x4386.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4388 = x4387 * x53;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4388);
          reg = x4388;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4389 = Fp(x4386.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4390 = x4389 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4390);
          reg = x4390;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4391 = Fp(x4386.asUInt32() & x32.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4392 = Fp(x4391.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4392);
            reg = x4392;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4393 = Fp(x4391.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4394 = x4393 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4394);
            reg = x4394;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4395 = Fp(x4391.asUInt32() & x78.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4396 = x4395 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4396);
            reg = x4396;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4397 = Fp(x4391.asUInt32() & x71.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4398 = x4397 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4398);
            reg = x4398;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4399 = Fp(x4391.asUInt32() & x63.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4400 = x4399 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4400);
            reg = x4400;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x4401 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4401 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4402 = x4401 * x64;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4403 = x4402 + x95;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x4404 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4404 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4405 = x4404 * x77;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4406 = x4405 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4407 = x4403 * x4406;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x4408 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4408 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4409 = x4408 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4410 = x4407 * x4409;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x4411 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x4411 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4412 = x4411 * x92;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x4413 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4413 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4414 = x4412 + x4413;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4415 = (x4414 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4416 = x4415 * x4410;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4417 = x4414 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4418 = (x4417 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4419 = x4418 * x4410;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4420 = x4414 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4421 = (x4420 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4422 = x4421 * x4410;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4423 = x4414 - x77;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4424 = (x4423 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4425 = x4424 * x4410;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4416);
            reg = x4416;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4419);
            reg = x4419;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4422);
            reg = x4422;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4425);
            reg = x4425;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4426 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4426 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4427 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4427 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4428 = x4427 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4429 = x4426 + x4428;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4430 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4430 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4431 = x4430 * x78;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4432 = x4429 + x4431;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4433 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4433 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4434 = x4433 * x71;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4435 = x4432 + x4434;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4436 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x4436 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4437 = x4436 * x63;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4438 = x4435 + x4437;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4439 = x4438 - x4391;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4439 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4440 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4440 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4441 = x4440 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4442 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4443 = x4442 * x59;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4444 = x4441 + x4443;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4445 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4445 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4446 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4446 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4447 = x4446 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4448 = x4445 + x4447;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4449 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4449 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4450 = x4449 * x78;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4451 = x4448 + x4450;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4452 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4452 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4453 = x4452 * x71;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4454 = x4451 + x4453;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4455 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4455 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4456 = x4455 * x63;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4457 = x4454 + x4456;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4458 = x4444 + x4457;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4459 = x4386 - x4458;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4459 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4460 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4460 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4461 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4461 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4462 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4462 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4463 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4463 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4464 = x4350 * x4460;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4465 = x4350 * x4461;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4466 = x4350 * x4462;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4467 = x4350 * x4463;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4468 = x95 - x4350;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4469 = x4468 * x4375;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4470 = x4468 * x4376;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4471 = x4468 * x4377;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4472 = x4468 * x4378;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4473 = x4464 + x4469;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4474 = x4465 + x4470;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4475 = x4466 + x4471;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4476 = x4467 + x4472;
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4473);
        reg = x4473;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4474);
        reg = x4474;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4475);
        reg = x4475;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4476);
        reg = x4476;
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4477 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x4477 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4478 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x4478 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4479 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x4479 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4480 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x4480 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4481 = x4353 + x4354;
        host_args.at(0) = x4364;
        host_args.at(1) = x4365;
        host_args.at(2) = x4366;
        host_args.at(3) = x4367;
        host_args.at(4) = x4477;
        host_args.at(5) = x4478;
        host_args.at(6) = x4479;
        host_args.at(7) = x4480;
        host_args.at(8) = x4481;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4482 = host_outs.at(0);
        auto x4483 = host_outs.at(1);
        auto x4484 = host_outs.at(2);
        auto x4485 = host_outs.at(3);
        auto x4486 = host_outs.at(4);
        auto x4487 = host_outs.at(5);
        auto x4488 = host_outs.at(6);
        auto x4489 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4482);
          reg = x4482;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4488);
          reg = x4488;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4489);
          reg = x4489;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4490 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4490 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4491 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4491 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4492 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4492 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4493 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4493 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4494 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4494 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4495 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4495 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4496 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4496 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4497 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4497 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4498 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4498 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4499 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4499 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4500 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4500 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4501 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4501 != Fp::invalid());
      host_args.at(0) = x4364;
      host_args.at(1) = x4365;
      host_args.at(2) = x4366;
      host_args.at(3) = x4367;
      host_args.at(4) = x4490;
      host_args.at(5) = x4491;
      host_args.at(6) = x4492;
      host_args.at(7) = x4493;
      host_args.at(8) = x4494;
      host_args.at(9) = x4495;
      host_args.at(10) = x4496;
      host_args.at(11) = x4497;
      host_args.at(12) = x4498;
      host_args.at(13) = x4499;
      host_args.at(14) = x4500;
      host_args.at(15) = x4501;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4502 = x4290 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4503 = x4293 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4504 = x4502 + x4503;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4505 = x4504 + x4296;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4506 = (x4505 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4507 = inv(x4505);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4508 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4508 != Fp::invalid());
      if (x4508 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4505 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4509 = x95 - x4508;
      if (x4509 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4510 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x4510 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4511 = x4505 * x4510;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4512 = x4511 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4512 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4513 = x4341 * x4509;
      if (x4513 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4514 = x4505 + x47;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4498);
          reg = x4498;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        {
          host_args.at(0) = x4514;
          host_args.at(1) = x4498;
          host_args.at(2) = x4499;
          host_args.at(3) = x4500;
          host_args.at(4) = x4501;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4515 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4515 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4516 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4516 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4517 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4517 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4518 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4518 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4514);
          reg = x4514;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4515);
          reg = x4515;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4516);
          reg = x4516;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4518);
          reg = x4518;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4519 = x95 - x4341;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4520 = x4519 * x4509;
      if (x4520 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4521 = x4505 + x47;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4494);
          reg = x4494;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4496);
          reg = x4496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4497);
          reg = x4497;
        }
        {
          host_args.at(0) = x4521;
          host_args.at(1) = x4494;
          host_args.at(2) = x4495;
          host_args.at(3) = x4496;
          host_args.at(4) = x4497;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4522 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4523 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4523 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4524 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x4525 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4525 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4522);
          reg = x4522;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4523);
          reg = x4523;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4524);
          reg = x4524;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
      }
      if (x4508 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4526 = x754 + x78;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4527 = x4526 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4528 = Fp(x4527.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4528);
          reg = x4528;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4529 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4529 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4530 = x4527 - x4529;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4531 = x4530 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4532 = Fp(x4531.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4532);
          reg = x4532;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4533 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4533 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4534 = x4531 - x4533;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4535 = x4534 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4536 = Fp(x4535.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4536);
          reg = x4536;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4537 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4537 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4538 = x4535 - x4537;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4539 = x4538 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4540 = Fp(x4539.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4540);
          reg = x4540;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4541 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4541 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4542 = x4539 - x4541;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4543 = x4542 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4543);
        reg = x4543;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4544 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4544 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4545 = x95 - x4544;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4546 = x4544 * x4545;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4546);
        reg = x4546;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4547 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4547 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4548 = x92 - x4544;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4549 = x4547 * x4548;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4549 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x72);
        reg = x72;
      }
      if (x4337 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4550 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4550 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4551 = x4287 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4551 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4552 = x4263 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4552 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4553 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4553 != Fp::invalid());
      if (x4553 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4554 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4554 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4555 = x4287 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4555 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4556 = x4263 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4556 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4338 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4557 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4557 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4558 = x4287 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4558 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4559 = x4263 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4559 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4340 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4560 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4560 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4561 = x4287 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4561 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4562 = x4263 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4562 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4342 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4563 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4563 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4564 = x4287 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4564 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4263 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4343 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4565 = x4298 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4565 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4566 = x4287 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4566 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4567 = x4263 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4567 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4346 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4568 = x4298 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4568 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4569 = x4287 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4569 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4263 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4348 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4570 = x4298 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4570 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4571 = x4287 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4571 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4572 = x4263 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4572 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":49:25))
    auto x4573 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x4573 != Fp::invalid());
    if (x4573 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4574 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x4574 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4575 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x4575 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4576 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x4576 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4577 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x4577 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4578 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x4578 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4579 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x4579 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4580 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x4580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4581 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x4581 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4582 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x4582 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4583 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x4583 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4584 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x4584 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4585 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x4585 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4586 = Fp(x4574.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4586);
          reg = x4586;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4587 = Fp(x4578.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4587);
          reg = x4587;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4588 = Fp(x4574.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4589 = x4588 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4589);
          reg = x4589;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4590 = Fp(x4578.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4591 = x4590 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4591);
          reg = x4591;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4592 = Fp(x4574.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4593 = x4592 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4593);
          reg = x4593;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4594 = Fp(x4578.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4595 = x4594 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4595);
          reg = x4595;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4596 = Fp(x4574.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4597 = x4596 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4597);
          reg = x4597;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4598 = Fp(x4578.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4599 = x4598 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4599);
          reg = x4599;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4600 = Fp(x4574.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4601 = x4600 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4601);
          reg = x4601;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4602 = Fp(x4578.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4603 = x4602 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4603);
          reg = x4603;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4604 = Fp(x4574.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4605 = x4604 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4605);
          reg = x4605;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4606 = Fp(x4578.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4607 = x4606 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4607);
          reg = x4607;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4608 = Fp(x4574.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4609 = x4608 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4609);
          reg = x4609;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4610 = Fp(x4578.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4611 = x4610 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4611);
          reg = x4611;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4612 = Fp(x4574.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4613 = x4612 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4613);
          reg = x4613;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4614 = Fp(x4578.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4615 = x4614 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4615);
          reg = x4615;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4616 = Fp(x4575.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4616);
          reg = x4616;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4617 = Fp(x4579.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4617);
          reg = x4617;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4618 = Fp(x4575.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4619 = x4618 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4619);
          reg = x4619;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4620 = Fp(x4579.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4621 = x4620 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4621);
          reg = x4621;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4622 = Fp(x4575.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4623 = x4622 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4623);
          reg = x4623;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4624 = Fp(x4579.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4625 = x4624 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4625);
          reg = x4625;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4626 = Fp(x4575.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4627 = x4626 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4627);
          reg = x4627;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4628 = Fp(x4579.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4629 = x4628 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4629);
          reg = x4629;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4630 = Fp(x4575.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4631 = x4630 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4631);
          reg = x4631;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4632 = Fp(x4579.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4633 = x4632 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4633);
          reg = x4633;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4634 = Fp(x4575.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4635 = x4634 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4635);
          reg = x4635;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4636 = Fp(x4579.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4637 = x4636 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4637);
          reg = x4637;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4638 = Fp(x4575.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4639 = x4638 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4639);
          reg = x4639;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4640 = Fp(x4579.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4641 = x4640 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4641);
          reg = x4641;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4642 = Fp(x4575.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4643 = x4642 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4643);
          reg = x4643;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4644 = Fp(x4579.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4645 = x4644 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4645);
          reg = x4645;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4646 = Fp(x4576.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4646);
          reg = x4646;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4647 = Fp(x4580.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4647);
          reg = x4647;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4648 = Fp(x4576.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4649 = x4648 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4649);
          reg = x4649;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4650 = Fp(x4580.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4651 = x4650 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4651);
          reg = x4651;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4652 = Fp(x4576.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4653 = x4652 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4653);
          reg = x4653;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4654 = Fp(x4580.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4655 = x4654 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4655);
          reg = x4655;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4656 = Fp(x4576.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4657 = x4656 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4657);
          reg = x4657;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4658 = Fp(x4580.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4659 = x4658 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4659);
          reg = x4659;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4660 = Fp(x4576.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4661 = x4660 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4661);
          reg = x4661;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4662 = Fp(x4580.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4663 = x4662 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4663);
          reg = x4663;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4664 = Fp(x4576.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4665 = x4664 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4665);
          reg = x4665;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4666 = Fp(x4580.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4667 = x4666 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4667);
          reg = x4667;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4668 = Fp(x4576.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4669 = x4668 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4669);
          reg = x4669;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4670 = Fp(x4580.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4671 = x4670 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4671);
          reg = x4671;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4672 = Fp(x4576.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4673 = x4672 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4673);
          reg = x4673;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4674 = Fp(x4580.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4675 = x4674 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4675);
          reg = x4675;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4676 = Fp(x4577.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4676);
          reg = x4676;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4677 = Fp(x4581.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4677);
          reg = x4677;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4678 = Fp(x4577.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4679 = x4678 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4679);
          reg = x4679;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4680 = Fp(x4581.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4681 = x4680 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4681);
          reg = x4681;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4682 = Fp(x4577.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4683 = x4682 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4683);
          reg = x4683;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4684 = Fp(x4581.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4685 = x4684 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4685);
          reg = x4685;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4686 = Fp(x4577.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4687 = x4686 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4687);
          reg = x4687;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4688 = Fp(x4581.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4689 = x4688 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4689);
          reg = x4689;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4690 = Fp(x4577.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4691 = x4690 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4691);
          reg = x4691;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4692 = Fp(x4581.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4693 = x4692 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4693);
          reg = x4693;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4694 = Fp(x4577.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4695 = x4694 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4695);
          reg = x4695;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4696 = Fp(x4581.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4697 = x4696 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4697);
          reg = x4697;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4698 = Fp(x4577.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4699 = x4698 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4699);
          reg = x4699;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4700 = Fp(x4581.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4701 = x4700 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4701);
          reg = x4701;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4702 = Fp(x4577.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4703 = x4702 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4703);
          reg = x4703;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4704 = Fp(x4581.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4705 = x4704 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4705);
          reg = x4705;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4706 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4706 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4707 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4708 = x4706 * x4707;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4709 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4709 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4710 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4711 = x4709 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4712 = x4706 + x4711;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4713 = x4710 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4714 = x4707 + x4713;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4715 = x4709 * x4710;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4716 = x4715 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4717 = x4708 + x4716;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4718 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4719 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4719 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4720 = x4718 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4721 = x4712 + x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4722 = x4719 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4723 = x4714 + x4722;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4724 = x4718 * x4719;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4725 = x4724 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4726 = x4717 + x4725;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4727 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4727 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4728 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4729 = x4727 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4730 = x4721 + x4729;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4731 = x4728 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4732 = x4723 + x4731;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4733 = x4727 * x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4734 = x4733 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4735 = x4726 + x4734;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4736 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4736 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4737 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4737 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4738 = x4736 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4739 = x4730 + x4738;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4740 = x4737 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4741 = x4732 + x4740;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4742 = x4736 * x4737;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4743 = x4742 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4744 = x4735 + x4743;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4745 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4745 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4746 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4746 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4747 = x4745 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4748 = x4739 + x4747;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4749 = x4746 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4750 = x4741 + x4749;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4751 = x4745 * x4746;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4752 = x4751 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4753 = x4744 + x4752;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4754 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4754 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4755 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4755 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4756 = x4754 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4757 = x4748 + x4756;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4758 = x4755 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4759 = x4750 + x4758;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4760 = x4754 * x4755;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4761 = x4760 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4762 = x4753 + x4761;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4763 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4763 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4764 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4764 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4765 = x4763 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4766 = x4757 + x4765;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4767 = x4764 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4768 = x4759 + x4767;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4769 = x4763 * x4764;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4770 = x4769 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4771 = x4762 + x4770;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4772 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4772 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4773 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4773 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4774 = x4772 * x4773;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4775 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4775 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4776 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4776 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4777 = x4775 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4778 = x4772 + x4777;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4779 = x4776 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4780 = x4773 + x4779;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4781 = x4775 * x4776;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4782 = x4781 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4783 = x4774 + x4782;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4784 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4784 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4785 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4786 = x4784 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4787 = x4778 + x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4788 = x4785 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4789 = x4780 + x4788;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4790 = x4784 * x4785;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4791 = x4790 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4792 = x4783 + x4791;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4793 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4794 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4794 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4795 = x4793 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4796 = x4787 + x4795;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4797 = x4794 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4798 = x4789 + x4797;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4799 = x4793 * x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4800 = x4799 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4801 = x4792 + x4800;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4802 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4802 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4803 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4804 = x4802 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4805 = x4796 + x4804;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4806 = x4803 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4807 = x4798 + x4806;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4808 = x4802 * x4803;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4809 = x4808 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4810 = x4801 + x4809;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4811 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4811 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4812 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4812 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4813 = x4811 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4814 = x4805 + x4813;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4815 = x4812 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4816 = x4807 + x4815;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4817 = x4811 * x4812;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4818 = x4817 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4819 = x4810 + x4818;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4820 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4820 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4821 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4821 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4822 = x4820 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4823 = x4814 + x4822;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4824 = x4821 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4825 = x4816 + x4824;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4826 = x4820 * x4821;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4827 = x4826 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4828 = x4819 + x4827;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4829 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4829 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4830 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4831 = x4829 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4832 = x4823 + x4831;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4833 = x4830 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4834 = x4825 + x4833;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4835 = x4829 * x4830;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4836 = x4835 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4837 = x4828 + x4836;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4838 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4838 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4839 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4839 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4840 = x4838 * x4839;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4841 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4842 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4842 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4843 = x4841 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4844 = x4838 + x4843;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4845 = x4842 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4846 = x4839 + x4845;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4847 = x4841 * x4842;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4848 = x4847 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4849 = x4840 + x4848;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4850 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4850 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4851 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4851 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4852 = x4850 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4853 = x4844 + x4852;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4854 = x4851 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4855 = x4846 + x4854;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4856 = x4850 * x4851;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4857 = x4856 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4858 = x4849 + x4857;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4859 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4859 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4860 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4860 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4861 = x4859 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4862 = x4853 + x4861;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4863 = x4860 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4864 = x4855 + x4863;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4865 = x4859 * x4860;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4866 = x4865 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4867 = x4858 + x4866;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4868 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4868 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4869 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4869 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4870 = x4868 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4871 = x4862 + x4870;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4872 = x4869 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4873 = x4864 + x4872;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4874 = x4868 * x4869;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4875 = x4874 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4876 = x4867 + x4875;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4877 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4877 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4878 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4878 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4879 = x4877 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4880 = x4871 + x4879;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4881 = x4878 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4882 = x4873 + x4881;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4883 = x4877 * x4878;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4884 = x4883 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4885 = x4876 + x4884;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4886 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4887 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4887 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4888 = x4886 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4889 = x4880 + x4888;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4890 = x4887 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4891 = x4882 + x4890;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4892 = x4886 * x4887;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4893 = x4892 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4894 = x4885 + x4893;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4895 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4895 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4896 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4896 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4897 = x4895 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4898 = x4889 + x4897;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4899 = x4896 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4900 = x4891 + x4899;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4901 = x4895 * x4896;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4902 = x4901 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4903 = x4894 + x4902;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4904 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4904 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4905 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4906 = x4904 * x4905;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4907 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4907 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4908 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4908 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4909 = x4907 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4910 = x4904 + x4909;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4911 = x4908 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4912 = x4905 + x4911;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4913 = x4907 * x4908;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4914 = x4913 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4915 = x4906 + x4914;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4916 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4916 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4917 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4918 = x4916 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4919 = x4910 + x4918;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4920 = x4917 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4921 = x4912 + x4920;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4922 = x4916 * x4917;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4923 = x4922 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4924 = x4915 + x4923;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4925 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4925 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4926 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4927 = x4925 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4928 = x4919 + x4927;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4929 = x4926 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4930 = x4921 + x4929;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4931 = x4925 * x4926;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4932 = x4931 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4933 = x4924 + x4932;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4934 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4934 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4935 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4936 = x4934 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4937 = x4928 + x4936;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4938 = x4935 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4939 = x4930 + x4938;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4940 = x4934 * x4935;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4941 = x4940 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4942 = x4933 + x4941;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4943 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4943 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4944 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4944 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4945 = x4943 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4946 = x4937 + x4945;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4947 = x4944 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4948 = x4939 + x4947;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4949 = x4943 * x4944;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4950 = x4949 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4951 = x4942 + x4950;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4952 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4952 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4953 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4954 = x4952 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4955 = x4946 + x4954;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4956 = x4953 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4957 = x4948 + x4956;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4958 = x4952 * x4953;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4959 = x4958 * x54;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4960 = x4951 + x4959;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4961 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4962 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4962 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4963 = x4961 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4964 = x4955 + x4963;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4965 = x4962 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4966 = x4957 + x4965;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4967 = x4961 * x4962;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4968 = x4967 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4969 = x4960 + x4968;
      host_args.at(0) = x4574;
      host_args.at(1) = x4575;
      host_args.at(2) = x4576;
      host_args.at(3) = x4577;
      host_args.at(4) = x4766;
      host_args.at(5) = x4832;
      host_args.at(6) = x4898;
      host_args.at(7) = x4964;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4578;
      host_args.at(1) = x4579;
      host_args.at(2) = x4580;
      host_args.at(3) = x4581;
      host_args.at(4) = x4768;
      host_args.at(5) = x4834;
      host_args.at(6) = x4900;
      host_args.at(7) = x4966;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4582;
      host_args.at(1) = x4583;
      host_args.at(2) = x4584;
      host_args.at(3) = x4585;
      host_args.at(4) = x4771;
      host_args.at(5) = x4837;
      host_args.at(6) = x4903;
      host_args.at(7) = x4969;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4970 = x4574 - x4766;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4970 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4971 = x4575 - x4832;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4971 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4972 = x4576 - x4898;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4972 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4973 = x4577 - x4964;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4973 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4974 = x4578 - x4768;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4974 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4975 = x4579 - x4834;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4975 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4976 = x4580 - x4900;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4976 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4977 = x4581 - x4966;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4977 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4978 = x4582 - x4771;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4978 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4979 = x4583 - x4837;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4979 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4980 = x4584 - x4903;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4980 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4981 = x4585 - x4969;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4981 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4982 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4983 = Fp(x4982.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4983);
          reg = x4983;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4984 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4984 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4985 = x4982 - x4984;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4986 = x4985 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4987 = Fp(x4986.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4987);
          reg = x4987;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4988 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4988 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4989 = x4986 - x4988;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4990 = x4989 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4991 = Fp(x4990.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4991);
          reg = x4991;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4992 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4992 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4993 = x4990 - x4992;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4994 = x4993 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4995 = Fp(x4994.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4995);
          reg = x4995;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4996 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4996 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4997 = x4994 - x4996;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4998 = x4997 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4998);
        reg = x4998;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x4999 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4999 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5000 = x95 - x4999;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5001 = x4999 * x5000;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5001);
        reg = x5001;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5002 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5002 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5003 = x92 - x4999;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5004 = x5002 * x5003;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5004 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":236:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x63);
        reg = x63;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":49:25))
    auto x5005 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x5005 != Fp::invalid());
    if (x5005 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5006 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x5006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5007 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x5007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5008 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x5008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5009 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x5009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5010 = args[2][18 * steps + ((cycle - 1) & mask)];
      assert(x5010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5011 = args[2][19 * steps + ((cycle - 1) & mask)];
      assert(x5011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5012 = args[2][20 * steps + ((cycle - 1) & mask)];
      assert(x5012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5013 = args[2][21 * steps + ((cycle - 1) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5014 = args[2][22 * steps + ((cycle - 1) & mask)];
      assert(x5014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5015 = args[2][23 * steps + ((cycle - 1) & mask)];
      assert(x5015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5016 = args[2][24 * steps + ((cycle - 1) & mask)];
      assert(x5016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5017 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5018 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x5018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5019 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x5019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5020 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x5020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5021 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x5021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x5022 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x5022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x5023 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x5023 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x5024 = Fp(x5009.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x5025 = x5024 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5025);
          reg = x5025;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x5026 = Fp(x5009.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x5027 = x5026 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5027);
          reg = x5027;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5028 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x5028 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5029 = x5028 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5030 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x5030 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x5031 = x5030 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5032 = x5029 + x5031;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x5033 = x5009 - x5032;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x5033 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x5034 = Fp(x5013.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x5035 = x5034 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5035);
          reg = x5035;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x5036 = Fp(x5013.asUInt32() & x51.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x5037 = x5036 * x92;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5037);
          reg = x5037;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5038 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5038 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5039 = x5038 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5040 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5040 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x5041 = x5040 * x55;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5042 = x5039 + x5041;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x5043 = x5013 - x5042;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x5043 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x5044 = x5022 * x5028;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5044);
        reg = x5044;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x5045 = x95 - x5023;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5046 = x5022 * x5045;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5047 = x5046 * x5038;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5047);
        reg = x5047;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5048 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5048 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x5049 = x95 - x5048;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5050 = x5049 * x5006;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5051 = x5049 * x5007;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5052 = x5049 * x5008;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5053 = x5049 * x5009;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5054 = x5050 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5055 = x5051 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5056 = x5052 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5057 = x5053 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5058 = x5048 * x5006;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5059 = x5048 * x5007;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5060 = x5048 * x5008;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5061 = x5048 * x5009;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5062 = x5054 - x5058;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5063 = x5055 - x5059;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5064 = x5056 - x5060;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5065 = x5057 - x5061;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x5066 = x5048 * x5023;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5067 = x5062 - x5066;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5068 = x5063 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5069 = x5067 + x5068;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5070 = Fp(x5069.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5070);
          reg = x5070;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5071 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5071 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5072 = x5069 - x5071;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5073 = x5072 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5074 = Fp(x5073.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5074);
          reg = x5074;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5075 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5075 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5076 = x5073 - x5075;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5077 = x5076 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5077);
        reg = x5077;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5078 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5078 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5079 = x5078 + x5064;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5080 = x5065 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5081 = x5079 + x5080;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5082 = Fp(x5081.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5082);
          reg = x5082;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5083 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5083 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5084 = x5081 - x5083;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5085 = x5084 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5086 = Fp(x5085.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5086);
          reg = x5086;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5087 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5087 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5088 = x5085 - x5087;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5089 = x5088 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5089);
        reg = x5089;
      }
      host_args.at(0) = x5006;
      host_args.at(1) = x5007;
      host_args.at(2) = x5008;
      host_args.at(3) = x5009;
      host_args.at(4) = x5071;
      host_args.at(5) = x5075;
      host_args.at(6) = x5083;
      host_args.at(7) = x5087;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5090 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x5091 = x95 - x5090;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5092 = x5091 * x5010;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5093 = x5091 * x5011;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5094 = x5091 * x5012;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5095 = x5091 * x5013;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5096 = x5092 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5097 = x5093 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5098 = x5094 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5099 = x5095 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5100 = x5090 * x5010;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5101 = x5090 * x5011;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5102 = x5090 * x5012;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5103 = x5090 * x5013;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5104 = x5096 - x5100;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5105 = x5097 - x5101;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5106 = x5098 - x5102;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5107 = x5099 - x5103;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x5108 = x5090 * x5023;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5109 = x5104 - x5108;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5110 = x5105 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5111 = x5109 + x5110;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5112 = Fp(x5111.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5112);
          reg = x5112;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5113 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5113 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5114 = x5111 - x5113;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5115 = x5114 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5116 = Fp(x5115.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5116);
          reg = x5116;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5117 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5117 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5118 = x5115 - x5117;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5119 = x5118 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5119);
        reg = x5119;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5120 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5120 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5121 = x5120 + x5106;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5122 = x5107 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5123 = x5121 + x5122;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5124 = Fp(x5123.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5124);
          reg = x5124;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5125 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5125 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5126 = x5123 - x5125;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5127 = x5126 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5128 = Fp(x5127.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5128);
          reg = x5128;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5129 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5129 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5130 = x5127 - x5129;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5131 = x5130 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5131);
        reg = x5131;
      }
      host_args.at(0) = x5010;
      host_args.at(1) = x5011;
      host_args.at(2) = x5012;
      host_args.at(3) = x5013;
      host_args.at(4) = x5113;
      host_args.at(5) = x5117;
      host_args.at(6) = x5125;
      host_args.at(7) = x5129;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x5132 = x5117 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x5133 = x5113 + x5132;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5134 = (x5133 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5134);
          reg = x5134;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5135 = inv(x5133);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5135);
          reg = x5135;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5136 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5136 != Fp::invalid());
      if (x5136 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5133 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5137 = x95 - x5136;
      if (x5137 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5138 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5138 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5139 = x5133 * x5138;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5140 = x5139 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5140 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x5141 = x5129 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x5142 = x5125 + x5141;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x5143 = x5137 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x5144 = x5142 + x5143;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5145 = (x5144 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5145);
          reg = x5145;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5146 = inv(x5144);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5146);
          reg = x5146;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5147 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x5147 != Fp::invalid());
      if (x5147 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5144 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5148 = x95 - x5147;
      if (x5148 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5149 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5149 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5150 = x5144 * x5149;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5151 = x5150 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5151 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5152 = x5048 + x5090;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5153 = x5048 * x92;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5154 = x5153 * x5090;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5155 = x5152 - x5154;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x5156 = x5147 * x5048;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5157 = x5155 - x5156;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5157);
        reg = x5157;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5158 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5158 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x5159 = x95 - x5158;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5160 = x5159 * x5014;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5161 = x5159 * x5015;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5162 = x5159 * x5016;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5163 = x5159 * x5017;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5164 = x5160 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5165 = x5161 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5166 = x5162 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5167 = x5163 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5168 = x5158 * x5014;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5169 = x5158 * x5015;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5170 = x5158 * x5016;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5171 = x5158 * x5017;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5172 = x5164 - x5168;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5173 = x5165 - x5169;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5174 = x5166 - x5170;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5175 = x5167 - x5171;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5176 = x5158 * x5023;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5177 = x5172 - x5176;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5178 = x5173 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5179 = x5177 + x5178;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5180 = Fp(x5179.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5180);
          reg = x5180;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5181 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5181 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5182 = x5179 - x5181;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5183 = x5182 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5184 = Fp(x5183.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5184);
          reg = x5184;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5185 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5185 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5186 = x5183 - x5185;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5187 = x5186 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5187);
        reg = x5187;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5188 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5188 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5189 = x5188 + x5174;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5190 = x5175 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5191 = x5189 + x5190;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5192 = Fp(x5191.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5192);
          reg = x5192;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5193 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5193 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5194 = x5191 - x5193;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5195 = x5194 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5196 = Fp(x5195.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5196);
          reg = x5196;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5197 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5197 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5198 = x5195 - x5197;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5199 = x5198 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5199);
        reg = x5199;
      }
      host_args.at(0) = x5014;
      host_args.at(1) = x5015;
      host_args.at(2) = x5016;
      host_args.at(3) = x5017;
      host_args.at(4) = x5181;
      host_args.at(5) = x5185;
      host_args.at(6) = x5193;
      host_args.at(7) = x5197;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5200 = x5049 * x5018;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5201 = x5049 * x5019;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5202 = x5049 * x5020;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5203 = x5049 * x5021;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5204 = x5200 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5205 = x5201 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5206 = x5202 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5207 = x5203 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5208 = x5048 * x5018;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5209 = x5048 * x5019;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5210 = x5048 * x5020;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5211 = x5048 * x5021;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5212 = x5204 - x5208;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5213 = x5205 - x5209;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5214 = x5206 - x5210;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5215 = x5207 - x5211;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5216 = x5212 - x5066;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5217 = x5213 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5218 = x5216 + x5217;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5219 = Fp(x5218.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5219);
          reg = x5219;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5220 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5220 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5221 = x5218 - x5220;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5222 = x5221 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5223 = Fp(x5222.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5223);
          reg = x5223;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5224 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5224 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5225 = x5222 - x5224;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5226 = x5225 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5226);
        reg = x5226;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5227 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5227 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5228 = x5227 + x5214;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5229 = x5215 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5230 = x5228 + x5229;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5231 = Fp(x5230.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5231);
          reg = x5231;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5232 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5232 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5233 = x5230 - x5232;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5234 = x5233 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5235 = Fp(x5234.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5236 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5236 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5237 = x5234 - x5236;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5238 = x5237 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5238);
        reg = x5238;
      }
      host_args.at(0) = x5018;
      host_args.at(1) = x5019;
      host_args.at(2) = x5020;
      host_args.at(3) = x5021;
      host_args.at(4) = x5220;
      host_args.at(5) = x5224;
      host_args.at(6) = x5232;
      host_args.at(7) = x5236;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5239 = x5113 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5240 = x5117 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5241 = x5125 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5242 = x5129 + x91;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5243 = x5239 - x95;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5244 = x5243 - x5220;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5245 = x5240 - x5224;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5246 = x5241 - x5232;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5247 = x5242 - x5236;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5248 = x5245 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5249 = x5244 + x5248;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5250 = Fp(x5249.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5250);
          reg = x5250;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5251 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5251 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5252 = x5249 - x5251;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5253 = x5252 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5254 = Fp(x5253.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5254);
          reg = x5254;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5255 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5255 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5256 = x5253 - x5255;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5257 = x5256 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5257);
        reg = x5257;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5258 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5258 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5259 = x5258 + x5246;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5260 = x5247 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5261 = x5259 + x5260;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5262 = Fp(x5261.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5262);
          reg = x5262;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5263 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5263 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5264 = x5261 - x5263;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5265 = x5264 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5266 = Fp(x5265.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5266);
          reg = x5266;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5267 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5267 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5268 = x5265 - x5267;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5269 = x5268 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5269);
        reg = x5269;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5270 = x5181 * x5113;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5271 = x5270 + x5220;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5272 = x5181 * x5117;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5273 = x5185 * x5113;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5274 = x5272 + x5273;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5275 = x5274 + x5224;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5276 = x5275 * x90;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5277 = x5271 + x5276;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5278 = Fp(x5277.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5278);
          reg = x5278;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5279 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5279 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5280 = x5277 - x5279;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5281 = x5280 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5282 = Fp(x5281.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5282);
          reg = x5282;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5283 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5283 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5284 = x5281 - x5283;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5285 = x5284 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5286 = Fp(x5285.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5286);
          reg = x5286;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5287 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5287 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5288 = x5285 - x5287;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5289 = x5288 * x89;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5289);
        reg = x5289;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5290 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5290 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5291 = x5290 * x90;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5292 = x5291 + x5287;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5293 = x5185 * x5129;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5293 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5294 = x5193 * x5125;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5294 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5295 = x5197 * x5117;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5295 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5296 = x5193 * x5129;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5296 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5297 = x5197 * x5125;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5297 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5298 = x5197 * x5129;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5298 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5299 = x5193 * x5113;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5300 = x5185 * x5117;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5301 = x5299 + x5300;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5302 = x5181 * x5125;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5303 = x5301 + x5302;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5304 = x5303 + x5232;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5305 = x5304 + x5292;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5306 = x5197 * x5113;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5307 = x5193 * x5117;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5308 = x5306 + x5307;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5309 = x5185 * x5125;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5310 = x5308 + x5309;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5311 = x5181 * x5129;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5312 = x5310 + x5311;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5313 = x5312 + x5236;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5314 = x5313 * x90;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5315 = x5305 + x5314;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5316 = Fp(x5315.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5316);
          reg = x5316;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5317 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5317 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5318 = x5315 - x5317;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5319 = x5318 * x89;
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5319);
        reg = x5319;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5320 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5320 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5321 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5321 != Fp::invalid());
      host_args.at(0) = x5279;
      host_args.at(1) = x5283;
      host_args.at(2) = x5317;
      host_args.at(3) = x5320;
      host_args.at(4) = x5321;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5322 = x5279 - x5071;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5322 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5323 = x5283 - x5075;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5323 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5324 = x5317 - x5083;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5324 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5325 = x5320 - x5087;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5325 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x5148 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5326 = x5321 - x95;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5326 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5327 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5328 = Fp(x5327.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5328);
          reg = x5328;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5329 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5329 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5330 = x5327 - x5329;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5331 = x5330 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5332 = Fp(x5331.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5332);
          reg = x5332;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5333 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5333 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5334 = x5331 - x5333;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5335 = x5334 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5336 = Fp(x5335.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5336);
          reg = x5336;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5337 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5337 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5338 = x5335 - x5337;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5339 = x5338 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5340 = Fp(x5339.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5340);
          reg = x5340;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5341 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5342 = x5339 - x5341;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5343 = x5342 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5343);
        reg = x5343;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5344 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5345 = x95 - x5344;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5346 = x5344 * x5345;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5346);
        reg = x5346;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5347 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5348 = x92 - x5344;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5349 = x5347 * x5348;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5349 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x63);
        reg = x63;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./cirgen/components/mux.h":49:25))
    auto x5350 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x5350 != Fp::invalid());
    if (x5350 != 0) {
      // loc("cirgen/circuit/rv32im/ecall.cpp":132:41)
      auto x5351 = x754 * x76;
      {
        host_args.at(0) = x5351;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5352 = host_outs.at(0);
        auto x5353 = host_outs.at(1);
        auto x5354 = host_outs.at(2);
        auto x5355 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5352);
          reg = x5352;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5353);
          reg = x5353;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5354);
          reg = x5354;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5355);
          reg = x5355;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5356 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5356 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5357 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5357 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5358 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5358 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5359 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5359 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5351);
        reg = x5351;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5356);
        reg = x5356;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5357);
        reg = x5357;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5358);
        reg = x5358;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5359);
        reg = x5359;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":134:6)
      auto x5360 = x5356 - x29;
      // loc("cirgen/circuit/rv32im/ecall.cpp":134:6)
      if (x5360 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:134");
      // loc("cirgen/circuit/rv32im/ecall.cpp":135:7)
      if (x5357 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:135");
      // loc("cirgen/circuit/rv32im/ecall.cpp":136:7)
      if (x5358 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:136");
      // loc("cirgen/circuit/rv32im/ecall.cpp":137:7)
      if (x5359 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:137");
      {
        host_args.at(0) = x28;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5361 = host_outs.at(0);
        auto x5362 = host_outs.at(1);
        auto x5363 = host_outs.at(2);
        auto x5364 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5361);
          reg = x5361;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5362);
          reg = x5362;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5363);
          reg = x5363;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5364);
          reg = x5364;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5365 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x5365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5366 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x5366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5367 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x5367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5368 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x5368 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x28);
        reg = x28;
      }
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x740);
        reg = x740;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5365);
        reg = x5365;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5366);
        reg = x5366;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5367);
        reg = x5367;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5368);
        reg = x5368;
      }
      {
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5369 = (x5365 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5369);
          reg = x5369;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5370 = x5365 - x95;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5371 = (x5370 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5371);
          reg = x5371;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5372 = x5365 - x92;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5373 = (x5372 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5373);
          reg = x5373;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5374 = x5365 - x77;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5375 = (x5374 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5375);
          reg = x5375;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5376 = x5365 - x78;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5377 = (x5376 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5377);
          reg = x5377;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5378 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x5378 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5379 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x5379 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5380 = x5379 * x92;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5381 = x5378 + x5380;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5382 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x5382 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5383 = x5382 * x77;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5384 = x5381 + x5383;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5385 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x5385 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5386 = x5385 * x78;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5387 = x5384 + x5386;
      // loc("./cirgen/components/onehot.h":40:8)
      auto x5388 = x5387 - x5365;
      // loc("./cirgen/components/onehot.h":40:8)
      if (x5388 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":144:47)
        auto x5389 = (x5387 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":144:47)
        auto x5390 = x95 - x5389;
        if (x5390 != 0) {
          host_args.at(0) = x5365;
          host_args.at(1) = x5366;
          host_args.at(2) = x5367;
          host_args.at(3) = x5368;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":49:25))
      auto x5391 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x5391 != Fp::invalid());
      if (x5391 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5392 = host_outs.at(0);
          auto x5393 = host_outs.at(1);
          auto x5394 = host_outs.at(2);
          auto x5395 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5392);
            reg = x5392;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5393);
            reg = x5393;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5394);
            reg = x5394;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5395);
            reg = x5395;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5396 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5396 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5397 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5397 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5398 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5398 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5399 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5399 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5396);
          reg = x5396;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5397);
          reg = x5397;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5398);
          reg = x5398;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5399);
          reg = x5399;
        }
        host_args.at(0) = x5396;
        host_args.at(1) = x5397;
        host_args.at(2) = x5398;
        host_args.at(3) = x5399;
        host(ctx, "log", "ECallHalt> %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5400 = x754 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5401 = Fp(x5400.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5401);
            reg = x5401;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5402 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5402 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5403 = x5400 - x5402;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5404 = x5403 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5405 = Fp(x5404.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5405);
            reg = x5405;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5406 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5406 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5407 = x5404 - x5406;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5408 = x5407 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5409 = Fp(x5408.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5409);
            reg = x5409;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5410 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5410 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5411 = x5408 - x5410;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5412 = x5411 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5413 = Fp(x5412.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5413);
            reg = x5413;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5414 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5414 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5415 = x5412 - x5414;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5416 = x5415 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5416);
          reg = x5416;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5417 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5417 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5418 = x95 - x5417;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5419 = x5417 * x5418;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5419);
          reg = x5419;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5420 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5420 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5421 = x92 - x5417;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5422 = x5420 * x5421;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5422 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":19:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
      if (x5378 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5423 = host_outs.at(0);
          auto x5424 = host_outs.at(1);
          auto x5425 = host_outs.at(2);
          auto x5426 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5423);
            reg = x5423;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5424);
            reg = x5424;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5425);
            reg = x5425;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5426);
            reg = x5426;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5427 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5427 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5428 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5428 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5429 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5429 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5430 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5430 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5427);
          reg = x5427;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5428);
          reg = x5428;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5429);
          reg = x5429;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5430);
          reg = x5430;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5431 = host_outs.at(0);
          auto x5432 = host_outs.at(1);
          auto x5433 = host_outs.at(2);
          auto x5434 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5431);
            reg = x5431;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5432);
            reg = x5432;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5433);
            reg = x5433;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5434);
            reg = x5434;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5435 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5435 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5436 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5436 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5437 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5437 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5438 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5438 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5435);
          reg = x5435;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5436);
          reg = x5436;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5437);
          reg = x5437;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5438);
          reg = x5438;
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5439 = (x5427 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5439);
            reg = x5439;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5440 = x5427 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5441 = (x5440 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5441);
            reg = x5441;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5442 = x5427 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5443 = (x5442 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5443);
            reg = x5443;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5444 = x5427 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5445 = (x5444 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5445);
            reg = x5445;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5446 = x5427 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5447 = (x5446 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5447);
            reg = x5447;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5448 = x5427 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5449 = (x5448 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5449);
            reg = x5449;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5450 = x5427 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5451 = (x5450 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5451);
            reg = x5451;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5452 = x5427 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5453 = (x5452 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5453);
            reg = x5453;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5454 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x5454 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5455 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x5455 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5456 = x5455 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5457 = x5454 + x5456;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5458 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x5458 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5459 = x5458 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5460 = x5457 + x5459;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5461 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x5461 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5462 = x5461 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5463 = x5460 + x5462;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5464 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x5464 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5465 = x5464 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5466 = x5463 + x5465;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5467 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x5467 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5468 = x5467 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5469 = x5466 + x5468;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5470 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5471 = x5470 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5472 = x5469 + x5471;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x5473 = x5472 - x5427;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x5473 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallOutput)/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":36:24))
        auto x5474 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5474 != Fp::invalid());
        if (x5474 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][73] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][74] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][75] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][76] = x5438;
        }
        if (x5454 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][77] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][78] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][79] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][80] = x5438;
        }
        if (x5455 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][81] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][82] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][83] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][84] = x5438;
        }
        if (x5458 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][85] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][86] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][87] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][88] = x5438;
        }
        if (x5461 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][89] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][90] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][91] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][92] = x5438;
        }
        if (x5464 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][93] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][94] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][95] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][96] = x5438;
        }
        if (x5467 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][97] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][98] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][99] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][100] = x5438;
        }
        if (x5470 != 0) {
          host_args.at(0) = x5472;
          host_args.at(1) = x5435;
          host_args.at(2) = x5436;
          host_args.at(3) = x5437;
          host_args.at(4) = x5438;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][101] = x5435;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][102] = x5436;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][103] = x5437;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][104] = x5438;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":42:17)
        auto x5475 = x754 + x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5476 = x5475 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5477 = Fp(x5476.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5477);
            reg = x5477;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5478 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5478 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5479 = x5476 - x5478;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5480 = x5479 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5481 = Fp(x5480.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5481);
            reg = x5481;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5482 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5482 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5483 = x5480 - x5482;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5484 = x5483 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5485 = Fp(x5484.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5485);
            reg = x5485;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5486 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5486 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5487 = x5484 - x5486;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5488 = x5487 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5489 = Fp(x5488.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5489);
            reg = x5489;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5490 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5491 = x5488 - x5490;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5492 = x5491 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5492);
          reg = x5492;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5493 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5493 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5494 = x95 - x5493;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5495 = x5493 * x5494;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5495);
          reg = x5495;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5496 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5497 = x92 - x5493;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5498 = x5496 * x5497;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5498 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":43:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
      if (x5379 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5499 = host_outs.at(0);
          auto x5500 = host_outs.at(1);
          auto x5501 = host_outs.at(2);
          auto x5502 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5499);
            reg = x5499;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5500);
            reg = x5500;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5501);
            reg = x5501;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5502);
            reg = x5502;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5503 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5503 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5504 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5504 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5505 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5505 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5506 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5506 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5503);
          reg = x5503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5504);
          reg = x5504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5506);
          reg = x5506;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5507 = host_outs.at(0);
          auto x5508 = host_outs.at(1);
          auto x5509 = host_outs.at(2);
          auto x5510 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5507);
            reg = x5507;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5508);
            reg = x5508;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5509);
            reg = x5509;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5510);
            reg = x5510;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5511 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5511 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5512 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5512 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5513 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5513 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5514 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5514 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5511);
          reg = x5511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5512);
          reg = x5512;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5513);
          reg = x5513;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5514);
          reg = x5514;
        }
        {
          // loc("./cirgen/components/u32.h":25:12)
          auto x5515 = x5512 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5516 = x5511 + x5515;
          // loc("./cirgen/components/u32.h":26:12)
          auto x5517 = x5513 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5518 = x5516 + x5517;
          // loc("./cirgen/components/u32.h":27:12)
          auto x5519 = x5514 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5520 = x5518 + x5519;
          // loc("cirgen/circuit/rv32im/ecall.cpp":70:22)
          auto x5521 = Fp(x5520.asUInt32() & x77.asUInt32());
          if (x5521 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:26)
            auto x5522 = x5520 - x5521;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:26)
            auto x5523 = x5522 + x78;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:25)
            auto x5524 = x5523 * x76;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:7)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5524);
              reg = x5524;
            }
            // loc("cirgen/circuit/rv32im/ecall.cpp":73:42)
            auto x5525 = x5521 - x95;
            // loc("./cirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5525);
              reg = x5525;
            }
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":75:23)
          auto x5526 = (x5521 == 0) ? Fp(1) : Fp(0);
          if (x5526 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":76:25)
            auto x5527 = x5520 * x76;
            // loc("cirgen/circuit/rv32im/ecall.cpp":76:7)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5527);
              reg = x5527;
            }
            // loc("./cirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x77);
              reg = x77;
            }
          }
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5528 = x5512 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5529 = x5511 + x5528;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5530 = x5513 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5531 = x5529 + x5530;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5532 = x5514 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5533 = x5531 + x5532;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5534 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5534 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5535 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x5535 != Fp::invalid());
        host_args.at(0) = x5533;
        host_args.at(1) = x5534;
        host_args.at(2) = x5535;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:7)
        auto x5536 = x5534 - x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:6)
        auto x5537 = x5536 * x78;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:44)
        auto x5538 = x5535 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:6)
        auto x5539 = x5537 + x5538;
        // loc("cirgen/circuit/rv32im/ecall.cpp":85:6)
        auto x5540 = x5533 - x5539;
        // loc("cirgen/circuit/rv32im/ecall.cpp":85:6)
        if (x5540 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:85");
        // loc("cirgen/circuit/rv32im/ecall.cpp":89:31)
        auto x5541 = x5503 * x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5542 = Fp(x5541.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5542);
            reg = x5542;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5543 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5543 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5544 = x5541 - x5543;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5545 = x5544 * x89;
        // loc("cirgen/circuit/rv32im/ecall.cpp":89:7)
        if (x5545 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:89");
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5546 = Fp(x5541.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5546);
            reg = x5546;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5547 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5547 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5548 = x5541 - x5547;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5549 = x5548 * x89;
        // loc("cirgen/circuit/rv32im/ecall.cpp":90:7)
        if (x5549 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:90");
        {
          host_args.at(0) = x5533;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5550 = x754 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5551 = Fp(x5550.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5551);
            reg = x5551;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5552 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5552 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5553 = x5550 - x5552;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5554 = x5553 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5555 = Fp(x5554.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5555);
            reg = x5555;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5556 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5556 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5557 = x5554 - x5556;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5558 = x5557 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5559 = Fp(x5558.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5559);
            reg = x5559;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5560 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5560 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5561 = x5558 - x5560;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5562 = x5561 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5563 = Fp(x5562.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5564 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5564 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5565 = x5562 - x5564;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5566 = x5565 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5566);
          reg = x5566;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5567 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5568 = x95 - x5567;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5569 = x5567 * x5568;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5569);
          reg = x5569;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5570 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5571 = x92 - x5567;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5572 = x5570 * x5571;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5572 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":95:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5382 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5573 = host_outs.at(0);
          auto x5574 = host_outs.at(1);
          auto x5575 = host_outs.at(2);
          auto x5576 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5573);
            reg = x5573;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5574);
            reg = x5574;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5575);
            reg = x5575;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5576);
            reg = x5576;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5577 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5577 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5578 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5579 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5579 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5580 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5577);
          reg = x5577;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5578);
          reg = x5578;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5579);
          reg = x5579;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5580);
          reg = x5580;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5581 = host_outs.at(0);
          auto x5582 = host_outs.at(1);
          auto x5583 = host_outs.at(2);
          auto x5584 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5581);
            reg = x5581;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5582);
            reg = x5582;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5583);
            reg = x5583;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5584);
            reg = x5584;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5585 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5585 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5586 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5586 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5587 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5587 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5588 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5588 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5585);
          reg = x5585;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5586);
          reg = x5586;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5587);
          reg = x5587;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5588);
          reg = x5588;
        }
        {
          host_args.at(0) = x25;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5589 = host_outs.at(0);
          auto x5590 = host_outs.at(1);
          auto x5591 = host_outs.at(2);
          auto x5592 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5589);
            reg = x5589;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5590);
            reg = x5590;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5591);
            reg = x5591;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5592);
            reg = x5592;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5593 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x5593 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5594 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x5594 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5595 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x5595 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5596 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x5596 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5593);
          reg = x5593;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5594);
          reg = x5594;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5595);
          reg = x5595;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5596);
          reg = x5596;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":109:17)
        auto x5597 = x754 + x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5598 = x5597 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5599 = Fp(x5598.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5599);
            reg = x5599;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5600 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5600 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5601 = x5598 - x5600;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5602 = x5601 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5603 = Fp(x5602.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5603);
            reg = x5603;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5604 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5604 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5605 = x5602 - x5604;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5606 = x5605 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5607 = Fp(x5606.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5607);
            reg = x5607;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5608 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5608 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5609 = x5606 - x5608;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5610 = x5609 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5611 = Fp(x5610.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5611);
            reg = x5611;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5612 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5613 = x5610 - x5612;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5614 = x5613 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5614);
          reg = x5614;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5615 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5616 = x95 - x5615;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5617 = x5615 * x5616;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5617);
          reg = x5617;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5618 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5619 = x92 - x5615;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5620 = x5618 * x5619;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5620 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":110:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x5385 != 0) {
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5621 = host_outs.at(0);
          auto x5622 = host_outs.at(1);
          auto x5623 = host_outs.at(2);
          auto x5624 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5621);
            reg = x5621;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5622);
            reg = x5622;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5623);
            reg = x5623;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5624);
            reg = x5624;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5625 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5626 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5626 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5627 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5628 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5628 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5625);
          reg = x5625;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5626);
          reg = x5626;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5628);
          reg = x5628;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5629 = x754 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5630 = Fp(x5629.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5630);
            reg = x5630;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5631 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5631 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5632 = x5629 - x5631;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5633 = x5632 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5634 = Fp(x5633.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5634);
            reg = x5634;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5635 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5635 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5636 = x5633 - x5635;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5637 = x5636 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5638 = Fp(x5637.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5638);
            reg = x5638;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5639 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5640 = x5637 - x5639;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5641 = x5640 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5642 = Fp(x5641.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5642);
            reg = x5642;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5643 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5644 = x5641 - x5643;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5645 = x5644 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5645);
          reg = x5645;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5646 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5647 = x95 - x5646;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5648 = x5646 * x5647;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5649 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5649 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5650 = x92 - x5646;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5651 = x5649 * x5650;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5651 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":122:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./cirgen/components/mux.h":49:25))
    auto x5652 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x5652 != Fp::invalid());
    if (x5652 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5653 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x5653 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5654 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x5654 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5655 = x5653 + x5654;
      if (x5655 != 0) {
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5656 = x95 - x5653;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5657 = x5656 - x5654;
      if (x5657 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5658 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5658);
          reg = x5658;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5659 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5660 = x5659 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5661 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5661 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5662 = (x5661 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5663 = inv(x5661);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5664 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x5664 != Fp::invalid());
      if (x5664 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5661 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5665 = x95 - x5664;
      if (x5665 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5666 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x5666 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5667 = x5661 * x5666;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5668 = x5667 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5668 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5664 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
      if (x5665 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5669 = x2299 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5670 = x1515 + x5669;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5671 = x3002 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5672 = x5670 + x5671;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5673 = x3758 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5674 = x5672 + x5673;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5675 = x4209 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5676 = x5674 + x5675;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5677 = x4573 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5678 = x5676 + x5677;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5679 = x5005 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5680 = x5678 + x5679;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5681 = x5350 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5682 = x5680 + x5681;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5683 = x5652 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5684 = x5682 + x5683;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5685 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5686 = x5685 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5687 = x5684 + x5686;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5688 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5689 = x5688 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5690 = x5687 + x5689;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5691 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5692 = x5691 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5693 = x5690 + x5692;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5694 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5694 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5695 = x5694 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5696 = x5693 + x5695;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5697 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5697 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5698 = x5697 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5699 = x5696 + x5698;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5700 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5700 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5701 = x5700 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5702 = x5699 + x5701;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5702);
          reg = x5702;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5703 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5704 = Fp(x5703.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5704);
          reg = x5704;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5705 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5705 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5706 = x5703 - x5705;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5707 = x5706 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5708 = Fp(x5707.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5708);
          reg = x5708;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5709 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5709 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5710 = x5707 - x5709;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5711 = x5710 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5712 = Fp(x5711.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5712);
          reg = x5712;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5713 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5713 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5714 = x5711 - x5713;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5715 = x5714 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5716 = Fp(x5715.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5716);
          reg = x5716;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5717 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5717 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5718 = x5715 - x5717;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5719 = x5718 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5719);
        reg = x5719;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5720 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5720 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5721 = x95 - x5720;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5722 = x5720 * x5721;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5722);
        reg = x5722;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5723 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5723 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5724 = x92 - x5720;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5725 = x5723 * x5724;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5725 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5726 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x5726 != Fp::invalid());
      host_args.at(0) = x70;
      host_args.at(1) = x5726;
      host_args.at(2) = x5661;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5653 != 0) {
        {
          host_args.at(0) = x24;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5727 = host_outs.at(0);
          auto x5728 = host_outs.at(1);
          auto x5729 = host_outs.at(2);
          auto x5730 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5727);
            reg = x5727;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5728);
            reg = x5728;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5729);
            reg = x5729;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5730);
            reg = x5730;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5731 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5731 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5732 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5732 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5733 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5733 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5734 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5734 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5732);
          reg = x5732;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5733);
          reg = x5733;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5734);
          reg = x5734;
        }
        {
          host_args.at(0) = x23;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5735 = host_outs.at(0);
          auto x5736 = host_outs.at(1);
          auto x5737 = host_outs.at(2);
          auto x5738 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5735);
            reg = x5735;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5736);
            reg = x5736;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5737);
            reg = x5737;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5738);
            reg = x5738;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5739 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5739 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5740 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5740 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5741 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5741 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5742 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5742 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x23);
          reg = x23;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5739);
          reg = x5739;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5740);
          reg = x5740;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5741);
          reg = x5741;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5742);
          reg = x5742;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5743 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5744 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5745 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5746 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x5746 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5747 = x5744 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5748 = x5743 + x5747;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5749 = x5745 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5750 = x5748 + x5749;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5751 = x5746 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5752 = x5750 + x5751;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5753 = x5752 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5753);
          reg = x5753;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5754 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5754 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5755 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5755 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5756 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5756 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5757 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5757 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5758 = x5755 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5759 = x5754 + x5758;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5760 = x5756 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5761 = x5759 + x5760;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5762 = x5757 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5763 = x5761 + x5762;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5764 = x5763 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5765 = x5732 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5766 = x5731 + x5765;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5767 = x5733 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5768 = x5766 + x5767;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5769 = x5734 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5770 = x5768 + x5769;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5771 = x5770 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5771);
          reg = x5771;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5772 = x5740 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5773 = x5739 + x5772;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5774 = x5741 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5775 = x5773 + x5774;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5776 = x5742 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5777 = x5775 + x5776;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5778 = x5777 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5778);
          reg = x5778;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5779 = args[2][147 * steps + ((cycle - 1) & mask)];
        assert(x5779 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5780 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x5780 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5781 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5781 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5782 = args[2][150 * steps + ((cycle - 1) & mask)];
        assert(x5782 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5783 = x5780 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5784 = x5779 + x5783;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5785 = x5781 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5786 = x5784 + x5785;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5787 = x5782 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5788 = x5786 + x5787;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5788);
          reg = x5788;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":203:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5789 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5790 = x5789 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5791 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5792 = x5791 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5793 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5794 = x5793 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5795 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":208:10)
        auto x5796 = x5795 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5797 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x5797 != Fp::invalid());
        host_args.at(0) = x5790;
        host_args.at(1) = x5792;
        host_args.at(2) = x5794;
        host_args.at(3) = x5796;
        host_args.at(4) = x5797;
        host(ctx, "log", "  FromEcall: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5654 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("cirgen/circuit/rv32im/sha.cpp":215:53))
        auto x5798 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x5798 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5798);
          reg = x5798;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("cirgen/circuit/rv32im/sha.cpp":216:51))
        auto x5799 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x5799 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5799);
          reg = x5799;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("cirgen/circuit/rv32im/sha.cpp":217:64))
        auto x5800 = args[2][120 * steps + ((cycle - 1) & mask)];
        assert(x5800 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5801 = x5800 * x22;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5802 = x5801 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5802);
          reg = x5802;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":218:64)
        auto x5803 = x5802 + x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5803);
          reg = x5803;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("cirgen/circuit/rv32im/sha.cpp":219:49))
        auto x5804 = args[2][121 * steps + ((cycle - 1) & mask)];
        assert(x5804 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5804);
          reg = x5804;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5805 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x5805 != Fp::invalid());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5805);
          reg = x5805;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":221:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5806 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5806 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5807 = x5806 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5808 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5808 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5809 = x5808 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5810 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5810 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":225:10)
        auto x5811 = x5810 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5812 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5812 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":226:10)
        auto x5813 = x5812 * x78;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5814 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x5814 != Fp::invalid());
        host_args.at(0) = x5807;
        host_args.at(1) = x5809;
        host_args.at(2) = x5811;
        host_args.at(3) = x5813;
        host_args.at(4) = x5814;
        host(ctx, "log", "  FromPageFault: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5657 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":230:42))
        auto x5815 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5815);
          reg = x5815;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":231:40))
        auto x5816 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5816 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5816);
          reg = x5816;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":232:36))
        auto x5817 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5817);
          reg = x5817;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":233:36))
        auto x5818 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":233:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5818);
          reg = x5818;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":234:38))
        auto x5819 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x5819 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":234:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5819);
          reg = x5819;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5820 = args[2][151 * steps + ((cycle - 1) & mask)];
        assert(x5820 != Fp::invalid());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5820);
          reg = x5820;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":236:38))
        auto x5821 = args[2][152 * steps + ((cycle - 1) & mask)];
        assert(x5821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5821);
          reg = x5821;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5822 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":239:24)
        auto x5823 = x5822 + x5661;
        {
          host_args.at(0) = x5823;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5824 = host_outs.at(0);
          auto x5825 = host_outs.at(1);
          auto x5826 = host_outs.at(2);
          auto x5827 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5824);
            reg = x5824;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5825);
            reg = x5825;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5826);
            reg = x5826;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5827);
            reg = x5827;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5828 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5828 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5829 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5829 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5830 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5830 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5831 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5831 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5823);
          reg = x5823;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5828);
          reg = x5828;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5829);
          reg = x5829;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5830);
          reg = x5830;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5831);
          reg = x5831;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":240:24)
        auto x5832 = x5823 + x78;
        {
          host_args.at(0) = x5832;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5833 = host_outs.at(0);
          auto x5834 = host_outs.at(1);
          auto x5835 = host_outs.at(2);
          auto x5836 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5833);
            reg = x5833;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5834);
            reg = x5834;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5835);
            reg = x5835;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5836);
            reg = x5836;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5837 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5838 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5838 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5839 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5839 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x5840 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5840 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5832);
          reg = x5832;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5837);
          reg = x5837;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5838);
          reg = x5838;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5839);
          reg = x5839;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5840);
          reg = x5840;
        }
      }
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5841 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x5841 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5842 = (x5841 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5842);
          reg = x5842;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5843 = inv(x5841);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5843);
          reg = x5843;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5844 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x5844 != Fp::invalid());
      if (x5844 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5841 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5845 = x95 - x5844;
      if (x5845 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5846 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x5846 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5847 = x5841 * x5846;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5848 = x5847 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5848 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5849 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x5849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5850 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5850 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5851 = x5850 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5852 = x5849 + x5851;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5853 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5853 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5854 = x5853 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5855 = x5852 + x5854;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5856 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5856 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5857 = x5856 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5858 = x5855 + x5857;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5859 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5859 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5860 = x5859 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5861 = x5858 + x5860;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5862 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5863 = x5862 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5864 = x5861 + x5863;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5865 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5866 = x5865 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5867 = x5864 + x5866;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5868 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5869 = x5868 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5870 = x5867 + x5869;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5871 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5872 = x5871 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5873 = x5870 + x5872;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5874 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5875 = x5874 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5876 = x5873 + x5875;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5877 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5878 = x5877 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5879 = x5876 + x5878;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5880 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5881 = x5880 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5882 = x5879 + x5881;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5883 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5883 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5884 = x5883 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5885 = x5882 + x5884;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5886 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5887 = x5886 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5888 = x5885 + x5887;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5889 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5890 = x5889 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5891 = x5888 + x5890;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5892 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5892 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5893 = x5892 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5894 = x5891 + x5893;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5895 = x94 - x5894;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5896 = x5895 * x9;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5896);
        reg = x5896;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5897 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5897 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5898 = Fp(x5897.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5898);
          reg = x5898;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5899 = Fp(x5897.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5900 = x5899 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5900);
          reg = x5900;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5901 = Fp(x5897.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5902 = x5901 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5902);
          reg = x5902;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5903 = Fp(x5897.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5904 = x5903 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5904);
          reg = x5904;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5905 = Fp(x5897.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5906 = x5905 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5906);
          reg = x5906;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5907 = Fp(x5897.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5908 = x5907 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5908);
          reg = x5908;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5909 = Fp(x5897.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5910 = x5909 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5910);
          reg = x5910;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5911 = Fp(x5897.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5912 = x5911 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5912);
          reg = x5912;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5913 = Fp(x5897.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5914 = x5913 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5914);
          reg = x5914;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5915 = Fp(x5897.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5916 = x5915 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5916);
          reg = x5916;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5917 = Fp(x5897.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5918 = x5917 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5918);
          reg = x5918;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5919 = Fp(x5897.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5920 = x5919 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5920);
          reg = x5920;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5921 = Fp(x5897.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5922 = x5921 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5922);
          reg = x5922;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5923 = Fp(x5897.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5924 = x5923 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5924);
          reg = x5924;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5925 = Fp(x5897.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5926 = x5925 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5926);
          reg = x5926;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5927 = Fp(x5897.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5928 = x5927 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5928);
          reg = x5928;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5929 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5929 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5930 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5931 = x5930 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5932 = x5929 + x5931;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5933 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5933 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5934 = x5933 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5935 = x5932 + x5934;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5936 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5936 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5937 = x5936 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5938 = x5935 + x5937;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5939 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5939 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5940 = x5939 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5941 = x5938 + x5940;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5942 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5942 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5943 = x5942 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5944 = x5941 + x5943;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5945 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5945 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5946 = x5945 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5947 = x5944 + x5946;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5948 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5948 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5949 = x5948 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5950 = x5947 + x5949;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5951 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5951 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5952 = x5951 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5953 = x5950 + x5952;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5954 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5954 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5955 = x5954 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5956 = x5953 + x5955;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5957 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5958 = x5957 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5959 = x5956 + x5958;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5960 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5961 = x5960 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5962 = x5959 + x5961;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5963 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5964 = x5963 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5965 = x5962 + x5964;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5966 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5967 = x5966 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5968 = x5965 + x5967;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5969 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5969 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5970 = x5969 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5971 = x5968 + x5970;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5972 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5973 = x5972 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5974 = x5971 + x5973;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5975 = x5897 - x5974;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5976 = x5975 * x9;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5976);
        reg = x5976;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5977 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5978 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5979 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x5980 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5980 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5981 = x5979 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5982 = x5980 + x5981;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5983 = x5977 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5984 = x5978 + x5983;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5985 = Fp(x5982.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5985);
          reg = x5985;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5986 = Fp(x5982.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5987 = x5986 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5987);
          reg = x5987;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5988 = Fp(x5982.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5989 = x5988 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5989);
          reg = x5989;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5990 = Fp(x5982.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5991 = x5990 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5991);
          reg = x5991;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5992 = Fp(x5982.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5993 = x5992 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5993);
          reg = x5993;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5994 = Fp(x5982.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5995 = x5994 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5996 = Fp(x5982.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5997 = x5996 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5997);
          reg = x5997;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5998 = Fp(x5982.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5999 = x5998 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5999);
          reg = x5999;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6000 = Fp(x5982.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6001 = x6000 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6001);
          reg = x6001;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6002 = Fp(x5982.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6003 = x6002 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6003);
          reg = x6003;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6004 = Fp(x5982.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6005 = x6004 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6005);
          reg = x6005;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6006 = Fp(x5982.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6007 = x6006 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6007);
          reg = x6007;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6008 = Fp(x5982.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6009 = x6008 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6010 = Fp(x5982.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6011 = x6010 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6012 = Fp(x5982.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6013 = x6012 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6014 = Fp(x5982.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6015 = x6014 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6015);
          reg = x6015;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6016 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x6016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6017 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x6017 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6018 = x6017 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6019 = x6016 + x6018;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6020 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x6020 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6021 = x6020 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6022 = x6019 + x6021;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6023 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x6023 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6024 = x6023 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6025 = x6022 + x6024;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6026 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x6026 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6027 = x6026 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6028 = x6025 + x6027;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6029 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x6029 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6030 = x6029 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6031 = x6028 + x6030;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6032 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x6032 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6033 = x6032 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6034 = x6031 + x6033;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6035 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x6035 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6036 = x6035 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6037 = x6034 + x6036;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6038 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x6038 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6039 = x6038 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6040 = x6037 + x6039;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6041 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x6041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6042 = x6041 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6043 = x6040 + x6042;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6044 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x6044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6045 = x6044 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6046 = x6043 + x6045;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6047 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x6047 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6048 = x6047 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6049 = x6046 + x6048;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6050 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x6050 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6051 = x6050 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6052 = x6049 + x6051;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6053 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6053 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6054 = x6053 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6055 = x6052 + x6054;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6056 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6056 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6057 = x6056 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6058 = x6055 + x6057;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6059 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6059 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6060 = x6059 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6061 = x6058 + x6060;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6062 = x5982 - x6061;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6063 = x6062 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6064 = Fp(x6063.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6064);
          reg = x6064;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6065 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6065 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6066 = x6063 - x6065;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6067 = x6066 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6068 = x95 - x6067;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6069 = x6067 * x6068;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6069 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6070 = x5984 + x6063;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6071 = Fp(x6070.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6071);
          reg = x6071;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6072 = Fp(x6070.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6073 = x6072 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6073);
          reg = x6073;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6074 = Fp(x6070.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6075 = x6074 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6075);
          reg = x6075;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6076 = Fp(x6070.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6077 = x6076 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6077);
          reg = x6077;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6078 = Fp(x6070.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6079 = x6078 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6079);
          reg = x6079;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6080 = Fp(x6070.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6081 = x6080 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6081);
          reg = x6081;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6082 = Fp(x6070.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6083 = x6082 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6083);
          reg = x6083;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6084 = Fp(x6070.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6085 = x6084 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6085);
          reg = x6085;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6086 = Fp(x6070.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6087 = x6086 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6087);
          reg = x6087;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6088 = Fp(x6070.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6089 = x6088 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6089);
          reg = x6089;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6090 = Fp(x6070.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6091 = x6090 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6091);
          reg = x6091;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6092 = Fp(x6070.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6093 = x6092 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6093);
          reg = x6093;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6094 = Fp(x6070.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6095 = x6094 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6096 = Fp(x6070.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6097 = x6096 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6097);
          reg = x6097;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6098 = Fp(x6070.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6099 = x6098 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6099);
          reg = x6099;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6100 = Fp(x6070.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6101 = x6100 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6101);
          reg = x6101;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6102 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6103 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6103 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6104 = x6103 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6105 = x6102 + x6104;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6106 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6106 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6107 = x6106 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6108 = x6105 + x6107;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6109 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6109 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6110 = x6109 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6111 = x6108 + x6110;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6112 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6112 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6113 = x6112 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6114 = x6111 + x6113;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6115 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6115 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6116 = x6115 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6117 = x6114 + x6116;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6118 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6118 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6119 = x6118 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6120 = x6117 + x6119;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6121 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6121 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6122 = x6121 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6123 = x6120 + x6122;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6124 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6124 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6125 = x6124 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6126 = x6123 + x6125;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6127 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6127 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6128 = x6127 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6129 = x6126 + x6128;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6130 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6131 = x6130 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6132 = x6129 + x6131;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6133 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6134 = x6133 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6135 = x6132 + x6134;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6136 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6136 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6137 = x6136 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6138 = x6135 + x6137;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6139 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6139 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6140 = x6139 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6141 = x6138 + x6140;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6142 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6143 = x6142 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6144 = x6141 + x6143;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6145 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6146 = x6145 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6147 = x6144 + x6146;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6148 = x6070 - x6147;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6149 = x6148 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6150 = Fp(x6149.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6150);
          reg = x6150;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6151 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x6151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6152 = x6149 - x6151;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6153 = x6152 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6154 = x95 - x6153;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6155 = x6153 * x6154;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6155 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6156 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6156 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6157 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6157 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6158 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6158 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6159 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x6159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6160 = x6158 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6161 = x6159 + x6160;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6162 = x6156 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6163 = x6157 + x6162;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6164 = Fp(x6161.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6164);
          reg = x6164;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6165 = Fp(x6161.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6166 = x6165 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6166);
          reg = x6166;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6167 = Fp(x6161.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6168 = x6167 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6168);
          reg = x6168;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6169 = Fp(x6161.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6170 = x6169 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6170);
          reg = x6170;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6171 = Fp(x6161.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6172 = x6171 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6172);
          reg = x6172;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6173 = Fp(x6161.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6174 = x6173 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6174);
          reg = x6174;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6175 = Fp(x6161.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6176 = x6175 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6176);
          reg = x6176;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6177 = Fp(x6161.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6178 = x6177 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6178);
          reg = x6178;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6179 = Fp(x6161.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6180 = x6179 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6180);
          reg = x6180;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6181 = Fp(x6161.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6182 = x6181 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6182);
          reg = x6182;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6183 = Fp(x6161.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6184 = x6183 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6184);
          reg = x6184;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6185 = Fp(x6161.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6186 = x6185 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6186);
          reg = x6186;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6187 = Fp(x6161.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6188 = x6187 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6188);
          reg = x6188;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6189 = Fp(x6161.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6190 = x6189 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6190);
          reg = x6190;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6191 = Fp(x6161.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6192 = x6191 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6192);
          reg = x6192;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6193 = Fp(x6161.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6194 = x6193 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6194);
          reg = x6194;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6195 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6195 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6196 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6197 = x6196 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6198 = x6195 + x6197;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6199 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6200 = x6199 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6201 = x6198 + x6200;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6202 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6202 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6203 = x6202 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6204 = x6201 + x6203;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6205 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6205 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6206 = x6205 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6207 = x6204 + x6206;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6208 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6208 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6209 = x6208 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6210 = x6207 + x6209;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6211 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6211 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6212 = x6211 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6213 = x6210 + x6212;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6214 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6214 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6215 = x6214 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6216 = x6213 + x6215;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6217 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6217 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6218 = x6217 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6219 = x6216 + x6218;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6220 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6221 = x6220 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6222 = x6219 + x6221;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6223 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6223 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6224 = x6223 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6225 = x6222 + x6224;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6226 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6227 = x6226 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6228 = x6225 + x6227;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6229 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6229 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6230 = x6229 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6231 = x6228 + x6230;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6232 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6233 = x6232 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6234 = x6231 + x6233;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6235 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6235 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6236 = x6235 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6237 = x6234 + x6236;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6238 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6239 = x6238 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6240 = x6237 + x6239;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6241 = x6161 - x6240;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6242 = x6241 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6243 = Fp(x6242.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6243);
          reg = x6243;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6244 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x6244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6245 = x6242 - x6244;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6246 = x6245 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6247 = x95 - x6246;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6248 = x6246 * x6247;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6248 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6249 = x6163 + x6242;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6250 = Fp(x6249.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6250);
          reg = x6250;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6251 = Fp(x6249.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6252 = x6251 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6252);
          reg = x6252;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6253 = Fp(x6249.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6254 = x6253 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6254);
          reg = x6254;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6255 = Fp(x6249.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6256 = x6255 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6256);
          reg = x6256;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6257 = Fp(x6249.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6258 = x6257 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6258);
          reg = x6258;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6259 = Fp(x6249.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6260 = x6259 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6260);
          reg = x6260;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6261 = Fp(x6249.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6262 = x6261 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6262);
          reg = x6262;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6263 = Fp(x6249.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6264 = x6263 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6264);
          reg = x6264;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6265 = Fp(x6249.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6266 = x6265 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6266);
          reg = x6266;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6267 = Fp(x6249.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6268 = x6267 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6268);
          reg = x6268;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6269 = Fp(x6249.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6270 = x6269 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6270);
          reg = x6270;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6271 = Fp(x6249.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6272 = x6271 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6272);
          reg = x6272;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6273 = Fp(x6249.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6274 = x6273 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6274);
          reg = x6274;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6275 = Fp(x6249.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6276 = x6275 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6276);
          reg = x6276;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6277 = Fp(x6249.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6278 = x6277 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6278);
          reg = x6278;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6279 = Fp(x6249.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6280 = x6279 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6280);
          reg = x6280;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6281 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6281 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6282 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6282 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6283 = x6282 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6284 = x6281 + x6283;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6285 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6285 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6286 = x6285 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6287 = x6284 + x6286;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6288 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6288 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6289 = x6288 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6290 = x6287 + x6289;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6291 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6291 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6292 = x6291 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6293 = x6290 + x6292;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6294 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6294 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6295 = x6294 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6296 = x6293 + x6295;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6297 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6297 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6298 = x6297 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6299 = x6296 + x6298;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6300 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x6300 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6301 = x6300 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6302 = x6299 + x6301;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6303 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x6303 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6304 = x6303 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6305 = x6302 + x6304;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6306 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x6306 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6307 = x6306 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6308 = x6305 + x6307;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6309 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x6309 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6310 = x6309 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6311 = x6308 + x6310;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6312 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x6312 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6313 = x6312 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6314 = x6311 + x6313;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6315 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x6315 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6316 = x6315 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6317 = x6314 + x6316;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6318 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x6318 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6319 = x6318 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6320 = x6317 + x6319;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6321 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x6321 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6322 = x6321 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6323 = x6320 + x6322;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6324 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x6324 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6325 = x6324 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6326 = x6323 + x6325;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6327 = x6249 - x6326;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6328 = x6327 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6329 = Fp(x6328.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6329);
          reg = x6329;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6330 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x6330 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6331 = x6328 - x6330;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6332 = x6331 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6333 = x95 - x6332;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6334 = x6332 * x6333;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6334 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./cirgen/components/mux.h":49:25))
    auto x6335 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x6335 != Fp::invalid());
    if (x6335 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("cirgen/circuit/rv32im/sha.cpp":262:70))
      auto x6336 = args[2][109 * steps + ((cycle - 1) & mask)];
      assert(x6336 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("cirgen/circuit/rv32im/sha.cpp":263:70))
      auto x6337 = args[2][111 * steps + ((cycle - 1) & mask)];
      assert(x6337 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":264:29)
      auto x6338 = x6336 + x6337;
      if (x6338 != 0) {
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":266:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6339 = x95 - x6336;
      // loc("cirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6340 = x6339 - x6337;
      if (x6340 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6341 = args[2][144 * steps + ((cycle - 1) & mask)];
        assert(x6341 != Fp::invalid());
        if (x6341 != 0) {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":272:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":274:20)
        auto x6342 = x95 - x6341;
        if (x6342 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x6343 = args[2][149 * steps + ((cycle - 1) & mask)];
          assert(x6343 != Fp::invalid());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6343);
            reg = x6343;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":277:42))
          auto x6344 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x6344 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":277:42)
          auto x6345 = x6344 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":277:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6345);
            reg = x6345;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6346 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x6346 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6347 = (x6346 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6347);
          reg = x6347;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6348 = inv(x6346);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6349 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x6349 != Fp::invalid());
      if (x6349 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6346 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6350 = x95 - x6349;
      if (x6350 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6351 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x6351 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6352 = x6346 * x6351;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6353 = x6352 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6353 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6349 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6354 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x6354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":284:17)
        auto x6355 = x95 - x6354;
        if (x6355 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":284:21)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        if (x6354 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":285:17)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
      }
      if (x6350 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6356 = x2299 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6357 = x1515 + x6356;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6358 = x3002 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6359 = x6357 + x6358;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6360 = x3758 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6361 = x6359 + x6360;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6362 = x4209 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6363 = x6361 + x6362;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6364 = x4573 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6365 = x6363 + x6364;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6366 = x5005 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6367 = x6365 + x6366;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6368 = x5350 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6369 = x6367 + x6368;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6370 = x5652 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6371 = x6369 + x6370;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6372 = x6335 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6373 = x6371 + x6372;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6374 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6374 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6375 = x6374 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6376 = x6373 + x6375;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6377 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6377 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6378 = x6377 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6379 = x6376 + x6378;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6380 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6380 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6381 = x6380 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6382 = x6379 + x6381;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6383 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x6383 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6384 = x6383 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6385 = x6382 + x6384;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6386 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x6386 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6387 = x6386 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6388 = x6385 + x6387;
        // loc("cirgen/circuit/rv32im/sha.cpp":287:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6388);
          reg = x6388;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6389 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6390 = Fp(x6389.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6390);
          reg = x6390;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6391 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6392 = x6389 - x6391;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6393 = x6392 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6394 = Fp(x6393.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6394);
          reg = x6394;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6395 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x6395 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6396 = x6393 - x6395;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6397 = x6396 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6398 = Fp(x6397.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6398);
          reg = x6398;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6399 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x6399 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6400 = x6397 - x6399;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6401 = x6400 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6402 = Fp(x6401.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6402);
          reg = x6402;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6403 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x6403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6404 = x6401 - x6403;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6405 = x6404 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6405);
        reg = x6405;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6406 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x6406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6407 = x95 - x6406;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6408 = x6406 * x6407;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6408);
        reg = x6408;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6409 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6410 = x92 - x6406;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6411 = x6409 * x6410;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6411 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":290:40))
      auto x6412 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x6412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6412);
        reg = x6412;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":291:38))
      auto x6413 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x6413 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6413);
        reg = x6413;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":292:34))
      auto x6414 = args[2][141 * steps + ((cycle - 1) & mask)];
      assert(x6414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":292:3)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6414);
        reg = x6414;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":293:34))
      auto x6415 = args[2][142 * steps + ((cycle - 1) & mask)];
      assert(x6415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":293:3)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6415);
        reg = x6415;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":294:36))
      auto x6416 = args[2][146 * steps + ((cycle - 1) & mask)];
      assert(x6416 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":294:3)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6416);
        reg = x6416;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6417 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6417 != Fp::invalid());
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6417);
        reg = x6417;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":296:36))
      auto x6418 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":296:3)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6418);
        reg = x6418;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6419 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6419 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6420 = (x6419 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6420);
          reg = x6420;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6421 = inv(x6419);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6421);
          reg = x6421;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6422 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x6422 != Fp::invalid());
      if (x6422 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6419 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6423 = x95 - x6422;
      if (x6423 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6424 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6424 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6425 = x6419 * x6424;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6426 = x6425 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6426 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6427 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":304:8)
      auto x6428 = x6427 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6429 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x6429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":305:8)
      auto x6430 = x6429 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6431 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":306:8)
      auto x6432 = x6431 * x78;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6433 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x6433 != Fp::invalid());
      host_args.at(0) = x69;
      host_args.at(1) = x6433;
      host_args.at(2) = x6346;
      host_args.at(3) = x6428;
      host_args.at(4) = x6430;
      host_args.at(5) = x6432;
      host_args.at(6) = x6419;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = %10x, data1 = %10x, state = %10x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":310:15)
      auto x6434 = x95 - x6433;
      if (x6434 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6435 = x6427 + x72;
        // loc("cirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6436 = x6435 - x6346;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":311:43))
        auto x6437 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6437 != Fp::invalid());
        {
          host_args.at(0) = x6436;
          host_args.at(1) = x6437;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6438 = host_outs.at(0);
          auto x6439 = host_outs.at(1);
          auto x6440 = host_outs.at(2);
          auto x6441 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6438);
            reg = x6438;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6439);
            reg = x6439;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6440);
            reg = x6440;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6441);
            reg = x6441;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6442 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6442 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6443 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6443 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6444 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6444 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6445 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6445 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6436);
          reg = x6436;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6437);
          reg = x6437;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6443);
          reg = x6443;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6445);
          reg = x6445;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":312:24)
        auto x6446 = x8 - x6346;
        {
          host_args.at(0) = x6446;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6447 = host_outs.at(0);
          auto x6448 = host_outs.at(1);
          auto x6449 = host_outs.at(2);
          auto x6450 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6447);
            reg = x6447;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6448);
            reg = x6448;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6449);
            reg = x6449;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6450);
            reg = x6450;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6451 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6451 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6452 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6452 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6453 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6453 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6454 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6454 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6451);
          reg = x6451;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6453);
          reg = x6453;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6454);
          reg = x6454;
        }
      }
      if (x6433 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6455 = x6429 + x72;
        // loc("cirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6456 = x6455 - x6346;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":315:43))
        auto x6457 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6457 != Fp::invalid());
        {
          host_args.at(0) = x6456;
          host_args.at(1) = x6457;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6458 = host_outs.at(0);
          auto x6459 = host_outs.at(1);
          auto x6460 = host_outs.at(2);
          auto x6461 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6458);
            reg = x6458;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6459);
            reg = x6459;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6460);
            reg = x6460;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6461);
            reg = x6461;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6462 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6462 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6463 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6463 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6464 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6464 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6465 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6465 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6456);
          reg = x6456;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6457);
          reg = x6457;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6462);
          reg = x6462;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6463);
          reg = x6463;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6464);
          reg = x6464;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6465);
          reg = x6465;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":316:24)
        auto x6466 = x7 - x6346;
        {
          host_args.at(0) = x6466;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6467 = host_outs.at(0);
          auto x6468 = host_outs.at(1);
          auto x6469 = host_outs.at(2);
          auto x6470 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6467);
            reg = x6467;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6468);
            reg = x6468;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6469);
            reg = x6469;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6470);
            reg = x6470;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6471 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6471 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6472 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6472 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6473 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6473 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x6474 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6474 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6466);
          reg = x6466;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6471);
          reg = x6471;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6472);
          reg = x6472;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6473);
          reg = x6473;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6474);
          reg = x6474;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6475 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6476 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6476 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6477 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6477 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6478 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6478 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6479 = x6477 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6480 = x6478 + x6479;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6481 = x6475 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6482 = x6476 + x6481;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6483 = Fp(x6480.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6483);
          reg = x6483;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6484 = Fp(x6480.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6485 = x6484 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6485);
          reg = x6485;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6486 = Fp(x6480.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6487 = x6486 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6487);
          reg = x6487;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6488 = Fp(x6480.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6489 = x6488 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6489);
          reg = x6489;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6490 = Fp(x6480.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6491 = x6490 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6491);
          reg = x6491;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6492 = Fp(x6480.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6493 = x6492 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6493);
          reg = x6493;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6494 = Fp(x6480.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6495 = x6494 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6495);
          reg = x6495;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6496 = Fp(x6480.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6497 = x6496 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6497);
          reg = x6497;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6498 = Fp(x6480.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6499 = x6498 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6499);
          reg = x6499;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6500 = Fp(x6480.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6501 = x6500 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6501);
          reg = x6501;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6502 = Fp(x6480.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6503 = x6502 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6503);
          reg = x6503;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6504 = Fp(x6480.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6505 = x6504 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6505);
          reg = x6505;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6506 = Fp(x6480.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6507 = x6506 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6507);
          reg = x6507;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6508 = Fp(x6480.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6509 = x6508 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6509);
          reg = x6509;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6510 = Fp(x6480.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6511 = x6510 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6511);
          reg = x6511;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6512 = Fp(x6480.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6513 = x6512 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6513);
          reg = x6513;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6514 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6515 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6516 = x6515 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6517 = x6514 + x6516;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6518 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6519 = x6518 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6520 = x6517 + x6519;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6521 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6522 = x6521 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6523 = x6520 + x6522;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6524 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6525 = x6524 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6526 = x6523 + x6525;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6527 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6528 = x6527 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6529 = x6526 + x6528;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6530 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6531 = x6530 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6532 = x6529 + x6531;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6533 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6534 = x6533 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6535 = x6532 + x6534;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6536 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6537 = x6536 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6538 = x6535 + x6537;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6539 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6540 = x6539 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6541 = x6538 + x6540;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6542 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6543 = x6542 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6544 = x6541 + x6543;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6545 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6546 = x6545 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6547 = x6544 + x6546;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6548 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6549 = x6548 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6550 = x6547 + x6549;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6551 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6552 = x6551 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6553 = x6550 + x6552;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6554 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6555 = x6554 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6556 = x6553 + x6555;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6557 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6558 = x6557 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6559 = x6556 + x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6560 = x6480 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6561 = x6560 * x9;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6561);
        reg = x6561;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6562 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6563 = x6482 + x6562;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6564 = Fp(x6563.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6564);
          reg = x6564;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6565 = Fp(x6563.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6566 = x6565 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6566);
          reg = x6566;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6567 = Fp(x6563.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6568 = x6567 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6568);
          reg = x6568;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6569 = Fp(x6563.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6570 = x6569 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6570);
          reg = x6570;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6571 = Fp(x6563.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6572 = x6571 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6572);
          reg = x6572;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6573 = Fp(x6563.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6574 = x6573 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6574);
          reg = x6574;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6575 = Fp(x6563.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6576 = x6575 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6576);
          reg = x6576;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6577 = Fp(x6563.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6578 = x6577 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6578);
          reg = x6578;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6579 = Fp(x6563.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6580 = x6579 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6580);
          reg = x6580;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6581 = Fp(x6563.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6582 = x6581 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6582);
          reg = x6582;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6583 = Fp(x6563.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6584 = x6583 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6584);
          reg = x6584;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6585 = Fp(x6563.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6586 = x6585 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6586);
          reg = x6586;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6587 = Fp(x6563.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6588 = x6587 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6588);
          reg = x6588;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6589 = Fp(x6563.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6590 = x6589 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6590);
          reg = x6590;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6591 = Fp(x6563.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6592 = x6591 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6592);
          reg = x6592;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6593 = Fp(x6563.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6594 = x6593 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6594);
          reg = x6594;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6595 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6596 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6597 = x6596 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6598 = x6595 + x6597;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6599 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6600 = x6599 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6601 = x6598 + x6600;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6602 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6603 = x6602 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6604 = x6601 + x6603;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6605 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6606 = x6605 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6607 = x6604 + x6606;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6608 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6609 = x6608 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6610 = x6607 + x6609;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6611 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6612 = x6611 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6613 = x6610 + x6612;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6614 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6615 = x6614 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6616 = x6613 + x6615;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6617 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6618 = x6617 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6619 = x6616 + x6618;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6620 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6621 = x6620 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6622 = x6619 + x6621;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6623 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6624 = x6623 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6625 = x6622 + x6624;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6626 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6627 = x6626 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6628 = x6625 + x6627;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6629 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6630 = x6629 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6631 = x6628 + x6630;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6632 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6633 = x6632 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6634 = x6631 + x6633;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6635 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6636 = x6635 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6637 = x6634 + x6636;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6638 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6639 = x6638 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6640 = x6637 + x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6641 = x6563 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6642 = x6641 * x9;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6642);
        reg = x6642;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6643 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6644 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6645 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6646 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6647 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6648 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6649 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6650 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6651 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6652 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6653 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6654 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6655 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6656 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6657 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6658 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6659 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6660 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6661 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6662 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6663 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6664 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6665 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6666 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6667 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6668 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6669 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6670 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6671 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6672 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6673 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6674 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6675 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6676 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6677 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6678 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6679 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6680 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6681 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6682 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6683 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6684 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6685 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6686 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6687 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6688 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6689 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6690 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6691 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6692 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6693 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6694 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6695 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6696 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6697 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6698 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6699 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6700 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6701 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6702 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6703 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6704 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6705 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6706 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6707 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6708 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6709 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6710 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6711 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6712 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6713 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6714 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6715 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6716 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6717 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6718 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6719 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6720 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6721 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6722 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6723 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6724 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6725 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6726 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6727 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6728 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6729 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6730 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6731 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6732 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6733 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6734 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6735 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6736 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6737 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6738 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6739 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6740 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6741 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6742 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6743 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6744 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6745 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6746 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6747 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6748 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6749 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6750 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6751 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6752 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6753 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6754 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6755 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6756 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6757 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6758 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6759 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6760 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6761 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6762 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6763 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6764 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6765 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6766 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6767 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6768 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6769 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6770 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6771 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6772 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6773 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6774 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6775 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6776 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6777 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6778 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6779 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6779 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6780 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6780 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6781 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6781 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6782 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6782 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6783 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6783 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6784 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6784 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6785 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6785 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6786 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6786 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6787 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6788 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6789 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6789 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6790 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6790 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6791 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6792 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6792 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6793 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6794 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6795 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x6795 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6796 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x6796 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6797 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6798 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x6798 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6799 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x6799 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6800 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6801 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x6801 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6802 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x6802 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6803 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6804 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6804 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6805 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6805 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6806 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6807 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6808 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6809 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6810 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6811 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6812 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6813 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6814 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6815 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6816 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6816 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6817 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6818 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6819 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6819 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6820 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6821 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6822 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6822 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6823 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6824 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6825 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6825 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6826 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x6826 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6827 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x6827 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6828 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x6828 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6829 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x6829 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6830 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x6830 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6831 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x6831 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6832 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x6832 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6833 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x6833 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6834 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x6834 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6835 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6836 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6836 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6837 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6837 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6838 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6839 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6839 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6840 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6840 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6841 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6842 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6842 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6843 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6843 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6844 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6845 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6845 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6846 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6846 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6847 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6847 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6848 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6848 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6849 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6850 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6850 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6851 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6851 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6852 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6852 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6853 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6853 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6854 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6854 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6855 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6855 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6856 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6856 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6857 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6857 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6858 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x6858 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6859 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x6859 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6860 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x6860 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6861 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x6861 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6862 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x6862 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6863 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x6863 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6864 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x6864 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6865 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x6865 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6866 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x6866 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6867 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6867 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6868 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6868 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6869 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6869 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6870 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6870 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6871 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6871 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6872 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6872 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6873 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6873 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6874 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6874 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6875 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6875 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6876 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6876 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6877 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6877 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6878 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6878 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6879 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6879 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6880 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6880 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6881 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6881 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6882 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6882 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6883 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6883 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6884 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6884 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6885 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6885 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6886 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6887 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6887 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6888 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6889 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6889 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6890 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x6890 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6891 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x6891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6892 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x6892 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6893 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x6893 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6894 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x6894 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6895 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x6895 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6896 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x6896 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6897 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x6897 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6898 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x6898 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6899 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6899 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6900 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6900 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6901 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6901 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x6902 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x6902 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6903 = x6900 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6904 = x6899 + x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6905 = x6902 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6906 = x6901 + x6905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6656 + x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6908 = x6656 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6908 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6907 - x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6657 + x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6657 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6913 = x6912 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6911 - x6913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6915 = x6658 + x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6916 = x6658 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6917 = x6916 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6918 = x6915 - x6917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6659 + x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6920 = x6659 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6920 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6919 - x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6660 + x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6660 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6925 = x6924 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6923 - x6925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6927 = x6661 + x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6928 = x6661 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6929 = x6928 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6930 = x6927 - x6929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6662 + x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6932 = x6662 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6932 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6931 - x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6663 + x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6663 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6937 = x6936 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6935 - x6937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6939 = x6664 + x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6940 = x6664 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6941 = x6940 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6942 = x6939 - x6941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6665 + x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6944 = x6665 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6944 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6943 - x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6666 + x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6666 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6949 = x6948 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6947 - x6949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6951 = x6667 + x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6952 = x6667 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6953 = x6952 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6954 = x6951 - x6953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6668 + x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6956 = x6668 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6957 = x6956 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6955 - x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6669 + x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6669 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6961 = x6960 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6959 - x6961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6963 = x6670 + x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6964 = x6670 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6965 = x6964 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6966 = x6963 - x6965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6671 + x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6968 = x6671 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6969 = x6968 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6967 - x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6672 + x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6672 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6973 = x6972 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6971 - x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6975 = x6673 + x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6976 = x6673 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6977 = x6976 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6978 = x6975 - x6977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6979 = x6674 + x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6980 = x6674 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6981 = x6980 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6982 = x6979 - x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6643 + x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6984 = x6643 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6985 = x6984 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6983 - x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6987 = x6644 + x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6988 = x6644 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6989 = x6988 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6990 = x6987 - x6989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6991 = x6645 + x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6992 = x6645 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6993 = x6992 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6994 = x6991 - x6993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6646 + x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6996 = x6646 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6997 = x6996 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6995 - x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6999 = x6647 + x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7000 = x6647 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7001 = x7000 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7002 = x6999 - x7001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7003 = x6648 + x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7004 = x6648 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7005 = x7004 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7006 = x7003 - x7005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x6649 + x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7008 = x6649 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x7008 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x7007 - x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x6650 + x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7012 = x6650 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7013 = x7012 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x7011 - x7013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7015 = x6651 + x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7016 = x6651 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7017 = x7016 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7018 = x7015 - x7017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x6652 + x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7020 = x6652 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x7020 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x7019 - x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x6653 + x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7024 = x6653 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7025 = x7024 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x7023 - x7025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7027 = x6654 + x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7028 = x6654 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7029 = x7028 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7030 = x7027 - x7029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x6655 + x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7032 = x6655 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x7032 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x7031 - x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x6645 + x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7036 = x6992 * x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7037 = x7035 - x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x6646 + x6914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7039 = x6996 * x6914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x7038 - x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7041 = x6647 + x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x7000 * x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x7041 - x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x6648 + x6922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x7004 * x6922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7046 = x7044 - x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x6649 + x6926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7048 = x7008 * x6926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7049 = x7047 - x7048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7050 = x6650 + x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7051 = x7012 * x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x7050 - x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7053 = x6651 + x6934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x7016 * x6934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x7053 - x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x6652 + x6938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x7020 * x6938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7058 = x7056 - x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x6653 + x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7060 = x7024 * x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7061 = x7059 - x7060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7062 = x6654 + x6946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7063 = x7028 * x6946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x7062 - x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7065 = x6655 + x6950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x7032 * x6950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x7065 - x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x6656 + x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x6908 * x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7070 = x7068 - x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x6657 + x6958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7072 = x6912 * x6958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7073 = x7071 - x7072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7074 = x6658 + x6962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7075 = x6916 * x6962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7076 = x7074 - x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7077 = x6659 + x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7078 = x6920 * x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7079 = x7077 - x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7080 = x6660 + x6970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7081 = x6924 * x6970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7082 = x7080 - x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7083 = x6661 + x6974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7084 = x6928 * x6974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7085 = x7083 - x7084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7086 = x6662 + x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7087 = x6932 * x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7088 = x7086 - x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7089 = x6663 + x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7090 = x6936 * x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7091 = x7089 - x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7092 = x6664 + x6986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7093 = x6940 * x6986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7094 = x7092 - x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7095 = x6665 + x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7096 = x6944 * x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7097 = x7095 - x7096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x6666 + x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7099 = x6948 * x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7100 = x7098 - x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7101 = x6667 + x6998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7102 = x6952 * x6998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x7101 - x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x6668 + x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x6956 * x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x7104 - x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x6669 + x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7108 = x6960 * x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7109 = x7107 - x7108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x6670 + x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7111 = x6964 * x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7112 = x7110 - x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7113 = x6671 + x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7114 = x6968 * x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x7113 - x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x6672 + x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x6972 * x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7118 = x7116 - x7117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x6673 + x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7120 = x6976 * x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7121 = x7119 - x7120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x6674 + x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7123 = x6980 * x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7124 = x7122 - x7123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x6643 + x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7126 = x6984 * x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7127 = x7125 - x7126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x6644 + x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7129 = x6988 * x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7130 = x7128 - x7129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x6782 + x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7132 = x6782 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x7132 * x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7131 - x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6783 + x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x6783 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7137 = x7136 * x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x7135 - x7137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7139 = x6784 + x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7140 = x6784 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7141 = x7140 * x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7142 = x7139 - x7141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x6785 + x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7144 = x6785 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7144 * x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7143 - x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6786 + x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x6786 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7149 = x7148 * x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x7147 - x7149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7151 = x6787 + x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7152 = x6787 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7153 = x7152 * x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7154 = x7151 - x7153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x6788 + x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7156 = x6788 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7156 * x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7155 - x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6789 + x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x6789 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7161 = x7160 * x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x7159 - x7161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7163 = x6790 + x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7164 = x6790 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7165 = x7164 * x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7166 = x7163 - x7165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x6791 + x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7168 = x6791 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7168 * x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7167 - x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6792 + x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x6792 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7173 = x7172 * x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x7171 - x7173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7175 = x6793 + x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7176 = x6793 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7177 = x7176 * x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7178 = x7175 - x7177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x6794 + x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7180 = x6794 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7180 * x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7179 - x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6795 + x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x6795 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7185 = x7184 * x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x7183 - x7185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7187 = x6796 + x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7188 = x6796 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7189 = x7188 * x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7190 = x7187 - x7189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x6797 + x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7192 = x6797 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7193 = x7192 * x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x7191 - x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x6798 + x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x6798 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7197 = x7196 * x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x7195 - x7197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7199 = x6799 + x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7200 = x6799 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7201 = x7200 * x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7202 = x7199 - x7201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7203 = x6800 + x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7204 = x6800 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7205 = x7204 * x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7206 = x7203 - x7205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x6801 + x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7208 = x6801 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7209 = x7208 * x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x7207 - x7209;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7211 = x6802 + x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7212 = x6802 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7213 = x7212 * x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7214 = x7211 - x7213;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7215 = x6771 + x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7216 = x6771 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7217 = x7216 * x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7218 = x7215 - x7217;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7219 = x6772 + x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7220 = x6772 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7221 = x7220 * x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7222 = x7219 - x7221;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7223 = x6773 + x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7224 = x6773 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7225 = x7224 * x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7226 = x7223 - x7225;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7227 = x6774 + x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7228 = x6774 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7229 = x7228 * x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7230 = x7227 - x7229;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7231 = x6775 + x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7232 = x6775 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7233 = x7232 * x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7234 = x7231 - x7233;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7235 = x6776 + x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7236 = x6776 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7237 = x7236 * x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7238 = x7235 - x7237;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7239 = x6777 + x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7240 = x6777 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7241 = x7240 * x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7242 = x7239 - x7241;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7243 = x6778 + x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7244 = x6778 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7245 = x7244 * x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7246 = x7243 - x7245;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7247 = x6779 + x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7248 = x6779 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7249 = x7248 * x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7250 = x7247 - x7249;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7251 = x6780 + x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7252 = x6780 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7253 = x7252 * x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7254 = x7251 - x7253;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7255 = x6781 + x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7256 = x6781 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7257 = x7256 * x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7258 = x7255 - x7257;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7259 = x6777 + x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7260 = x7240 * x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7261 = x7259 - x7260;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7262 = x6778 + x7138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7263 = x7244 * x7138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7264 = x7262 - x7263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7265 = x6779 + x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7266 = x7248 * x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7267 = x7265 - x7266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7268 = x6780 + x7146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7269 = x7252 * x7146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7270 = x7268 - x7269;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7271 = x6781 + x7150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7272 = x7256 * x7150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7273 = x7271 - x7272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7274 = x6782 + x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7275 = x7132 * x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7276 = x7274 - x7275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7277 = x6783 + x7158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7278 = x7136 * x7158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7279 = x7277 - x7278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7280 = x6784 + x7162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7281 = x7140 * x7162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7282 = x7280 - x7281;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7283 = x6785 + x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7284 = x7144 * x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7285 = x7283 - x7284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7286 = x6786 + x7170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7287 = x7148 * x7170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7288 = x7286 - x7287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7289 = x6787 + x7174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7290 = x7152 * x7174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7291 = x7289 - x7290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7292 = x6788 + x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7293 = x7156 * x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7294 = x7292 - x7293;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7295 = x6789 + x7182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7296 = x7160 * x7182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7297 = x7295 - x7296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7298 = x6790 + x7186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7299 = x7164 * x7186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7300 = x7298 - x7299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7301 = x6791 + x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7302 = x7168 * x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7303 = x7301 - x7302;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7304 = x6792 + x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7305 = x7172 * x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7306 = x7304 - x7305;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7307 = x6793 + x7198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7308 = x7176 * x7198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7309 = x7307 - x7308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7310 = x6794 + x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7311 = x7180 * x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7312 = x7310 - x7311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7313 = x6795 + x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7314 = x7184 * x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7315 = x7313 - x7314;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7316 = x6796 + x7210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7317 = x7188 * x7210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7318 = x7316 - x7317;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7319 = x6797 + x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7320 = x7192 * x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7321 = x7319 - x7320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7322 = x6798 + x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7323 = x7196 * x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7324 = x7322 - x7323;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7325 = x6799 + x7222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7326 = x7200 * x7222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7327 = x7325 - x7326;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7328 = x6800 + x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7329 = x7204 * x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7330 = x7328 - x7329;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7331 = x6801 + x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7332 = x7208 * x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7333 = x7331 - x7332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7334 = x6802 + x7234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7335 = x7212 * x7234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7336 = x7334 - x7335;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7337 = x6771 + x7238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7338 = x7216 * x7238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7339 = x7337 - x7338;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7340 = x6772 + x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7341 = x7220 * x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7342 = x7340 - x7341;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7343 = x6773 + x7246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7344 = x7224 * x7246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7345 = x7343 - x7344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7346 = x6774 + x7250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7347 = x7228 * x7250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7348 = x7346 - x7347;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7349 = x6775 + x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7350 = x7232 * x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7351 = x7349 - x7350;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7352 = x6776 + x7258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7353 = x7236 * x7258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7354 = x7352 - x7353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7355 = x6868 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7356 = x6867 + x7355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7357 = x6869 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7358 = x7356 + x7357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7359 = x6870 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7360 = x7358 + x7359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7361 = x6871 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7362 = x7360 + x7361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7363 = x6872 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7364 = x7362 + x7363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7365 = x6873 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7366 = x7364 + x7365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7367 = x6874 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7368 = x7366 + x7367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7369 = x6875 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7370 = x7368 + x7369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7371 = x6876 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7372 = x7370 + x7371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7373 = x6877 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7374 = x7372 + x7373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7375 = x6878 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7376 = x7374 + x7375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7377 = x6879 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7378 = x7376 + x7377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7379 = x6880 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7380 = x7378 + x7379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7381 = x6881 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7382 = x7380 + x7381;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7383 = x6882 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7384 = x7382 + x7383;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7385 = x6884 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7386 = x6883 + x7385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7387 = x6885 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7388 = x7386 + x7387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7389 = x6886 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7390 = x7388 + x7389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7391 = x6887 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7392 = x7390 + x7391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7393 = x6888 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7394 = x7392 + x7393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7395 = x6889 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7396 = x7394 + x7395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7397 = x6890 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7398 = x7396 + x7397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7399 = x6891 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7400 = x7398 + x7399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7401 = x6892 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7402 = x7400 + x7401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7403 = x6893 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7404 = x7402 + x7403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7405 = x6894 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7406 = x7404 + x7405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7407 = x6895 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7408 = x7406 + x7407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7409 = x6896 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7410 = x7408 + x7409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7411 = x6897 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7412 = x7410 + x7411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7413 = x6898 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7414 = x7412 + x7413;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7415 = x6771 * x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7416 = x95 - x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7417 = x7416 * x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7418 = x7415 + x7417;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7419 = x6772 * x6804;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7420 = x95 - x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7421 = x7420 * x6836;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7422 = x7419 + x7421;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7423 = x6773 * x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7424 = x95 - x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7425 = x7424 * x6837;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7426 = x7423 + x7425;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7427 = x6774 * x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7428 = x95 - x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7429 = x7428 * x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7430 = x7427 + x7429;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7431 = x6775 * x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7432 = x95 - x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7433 = x7432 * x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7434 = x7431 + x7433;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7435 = x6776 * x6808;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7436 = x95 - x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7437 = x7436 * x6840;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7438 = x7435 + x7437;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7439 = x6777 * x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7440 = x95 - x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7441 = x7440 * x6841;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7442 = x7439 + x7441;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7443 = x6778 * x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7444 = x95 - x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7445 = x7444 * x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7446 = x7443 + x7445;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7447 = x6779 * x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7448 = x95 - x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7449 = x7448 * x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7450 = x7447 + x7449;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7451 = x6780 * x6812;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7452 = x95 - x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7453 = x7452 * x6844;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7454 = x7451 + x7453;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7455 = x6781 * x6813;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7456 = x95 - x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7457 = x7456 * x6845;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7458 = x7455 + x7457;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7459 = x6782 * x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7460 = x95 - x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7461 = x7460 * x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7462 = x7459 + x7461;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7463 = x6783 * x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7464 = x95 - x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7465 = x7464 * x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7466 = x7463 + x7465;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7467 = x6784 * x6816;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7468 = x95 - x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7469 = x7468 * x6848;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7470 = x7467 + x7469;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7471 = x6785 * x6817;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7472 = x95 - x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7473 = x7472 * x6849;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7474 = x7471 + x7473;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7475 = x6786 * x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7476 = x95 - x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7477 = x7476 * x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7478 = x7475 + x7477;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7479 = x6787 * x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7480 = x95 - x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7481 = x7480 * x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7482 = x7479 + x7481;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7483 = x6788 * x6820;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7484 = x95 - x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7485 = x7484 * x6852;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7486 = x7483 + x7485;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7487 = x6789 * x6821;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7488 = x95 - x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7489 = x7488 * x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7490 = x7487 + x7489;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7491 = x6790 * x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7492 = x95 - x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7493 = x7492 * x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7494 = x7491 + x7493;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7495 = x6791 * x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7496 = x95 - x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7497 = x7496 * x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7498 = x7495 + x7497;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7499 = x6792 * x6824;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7500 = x95 - x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7501 = x7500 * x6856;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7502 = x7499 + x7501;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7503 = x6793 * x6825;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7504 = x95 - x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7505 = x7504 * x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7506 = x7503 + x7505;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7507 = x6794 * x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7508 = x95 - x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7509 = x7508 * x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7510 = x7507 + x7509;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7511 = x6795 * x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7512 = x95 - x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7513 = x7512 * x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7514 = x7511 + x7513;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7515 = x6796 * x6828;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7516 = x95 - x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7517 = x7516 * x6860;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7518 = x7515 + x7517;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7519 = x6797 * x6829;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7520 = x95 - x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7521 = x7520 * x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7522 = x7519 + x7521;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7523 = x6798 * x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7524 = x95 - x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7525 = x7524 * x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7526 = x7523 + x7525;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7527 = x6799 * x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7528 = x95 - x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7529 = x7528 * x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7530 = x7527 + x7529;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7531 = x6800 * x6832;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7532 = x95 - x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7533 = x7532 * x6864;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7534 = x7531 + x7533;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7535 = x6801 * x6833;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7536 = x95 - x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7537 = x7536 * x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7538 = x7535 + x7537;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7539 = x6802 * x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7540 = x95 - x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7541 = x7540 * x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7542 = x7539 + x7541;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7543 = x7422 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7544 = x7418 + x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7545 = x7426 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7546 = x7544 + x7545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7547 = x7430 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7548 = x7546 + x7547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7549 = x7434 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7550 = x7548 + x7549;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7551 = x7438 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7552 = x7550 + x7551;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7553 = x7442 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7554 = x7552 + x7553;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7555 = x7446 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7556 = x7554 + x7555;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7557 = x7450 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7558 = x7556 + x7557;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7559 = x7454 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7560 = x7558 + x7559;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7561 = x7458 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7562 = x7560 + x7561;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7563 = x7462 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7564 = x7562 + x7563;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7565 = x7466 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7566 = x7564 + x7565;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7567 = x7470 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7568 = x7566 + x7567;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7569 = x7474 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7570 = x7568 + x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7571 = x7478 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7572 = x7570 + x7571;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7573 = x7486 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7574 = x7482 + x7573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7575 = x7490 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7576 = x7574 + x7575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7577 = x7494 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7578 = x7576 + x7577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7579 = x7498 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7580 = x7578 + x7579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7581 = x7502 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7582 = x7580 + x7581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7583 = x7506 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7584 = x7582 + x7583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7585 = x7510 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7586 = x7584 + x7585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7587 = x7514 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7588 = x7586 + x7587;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7589 = x7518 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7590 = x7588 + x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7591 = x7522 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7592 = x7590 + x7591;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7593 = x7526 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7594 = x7592 + x7593;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7595 = x7530 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7596 = x7594 + x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7597 = x7534 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7598 = x7596 + x7597;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7599 = x7538 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7600 = x7598 + x7599;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7601 = x7542 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7602 = x7600 + x7601;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7603 = x7264 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7604 = x7261 + x7603;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7605 = x7267 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7606 = x7604 + x7605;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7607 = x7270 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7608 = x7606 + x7607;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7609 = x7273 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7610 = x7608 + x7609;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7611 = x7276 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7612 = x7610 + x7611;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7613 = x7279 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7614 = x7612 + x7613;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7615 = x7282 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7616 = x7614 + x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7617 = x7285 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7618 = x7616 + x7617;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7619 = x7288 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7620 = x7618 + x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7621 = x7291 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7622 = x7620 + x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7623 = x7294 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7624 = x7622 + x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7625 = x7297 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7626 = x7624 + x7625;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7627 = x7300 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7628 = x7626 + x7627;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7629 = x7303 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7630 = x7628 + x7629;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7631 = x7306 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7632 = x7630 + x7631;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7633 = x7312 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7634 = x7309 + x7633;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7635 = x7315 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7636 = x7634 + x7635;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7637 = x7318 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7638 = x7636 + x7637;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7639 = x7321 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7640 = x7638 + x7639;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7641 = x7324 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7642 = x7640 + x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7643 = x7327 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7644 = x7642 + x7643;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7645 = x7330 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7646 = x7644 + x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7647 = x7333 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7648 = x7646 + x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7649 = x7336 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7650 = x7648 + x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7651 = x7339 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7652 = x7650 + x7651;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7653 = x7342 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7654 = x7652 + x7653;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7655 = x7345 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7656 = x7654 + x7655;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7657 = x7348 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7658 = x7656 + x7657;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7659 = x7351 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7660 = x7658 + x7659;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7661 = x7354 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7662 = x7660 + x7661;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7663 = x7572 + x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7664 = x7602 + x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7665 = x7384 + x7663;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7666 = x7414 + x7664;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7667 = x6904 + x7665;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7668 = x6906 + x7666;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7669 = x6559 + x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7670 = x6640 + x7668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7671 = x6643 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7672 = x95 - x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7673 = x7671 * x7672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7674 = x95 - x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7675 = x6643 * x7674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7676 = x7675 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7677 = x7673 + x7676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7678 = x95 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7679 = x7678 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7680 = x7679 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7681 = x7677 + x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7682 = x7671 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7683 = x7681 + x7682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7684 = x6644 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7685 = x95 - x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7686 = x7684 * x7685;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7687 = x95 - x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7688 = x6644 * x7687;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7689 = x7688 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7690 = x7686 + x7689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7691 = x95 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7692 = x7691 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7693 = x7692 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7694 = x7690 + x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7695 = x7684 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7696 = x7694 + x7695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7697 = x6645 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7698 = x95 - x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7699 = x7697 * x7698;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7700 = x95 - x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7701 = x6645 * x7700;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7702 = x7701 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7703 = x7699 + x7702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7704 = x95 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7705 = x7704 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7706 = x7705 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7707 = x7703 + x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7708 = x7697 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7709 = x7707 + x7708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7710 = x6646 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7711 = x95 - x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7712 = x7710 * x7711;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7713 = x95 - x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7714 = x6646 * x7713;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7715 = x7714 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7716 = x7712 + x7715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7717 = x95 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7718 = x7717 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7719 = x7718 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7720 = x7716 + x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7721 = x7710 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7722 = x7720 + x7721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7723 = x6647 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7724 = x95 - x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7725 = x7723 * x7724;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7726 = x95 - x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7727 = x6647 * x7726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7728 = x7727 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7729 = x7725 + x7728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7730 = x95 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7731 = x7730 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7732 = x7731 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7733 = x7729 + x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7734 = x7723 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7735 = x7733 + x7734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7736 = x6648 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7737 = x95 - x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7738 = x7736 * x7737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7739 = x95 - x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7740 = x6648 * x7739;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7741 = x7740 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7742 = x7738 + x7741;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7743 = x95 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7744 = x7743 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7745 = x7744 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7746 = x7742 + x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7747 = x7736 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7748 = x7746 + x7747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7749 = x6649 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7750 = x95 - x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7751 = x7749 * x7750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7752 = x95 - x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7753 = x6649 * x7752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7754 = x7753 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7755 = x7751 + x7754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7756 = x95 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7757 = x7756 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7758 = x7757 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7759 = x7755 + x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7760 = x7749 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7761 = x7759 + x7760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7762 = x6650 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7763 = x95 - x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7764 = x7762 * x7763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7765 = x95 - x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7766 = x6650 * x7765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7767 = x7766 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7768 = x7764 + x7767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7769 = x95 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7770 = x7769 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7771 = x7770 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7772 = x7768 + x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7773 = x7762 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7774 = x7772 + x7773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7775 = x6651 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7776 = x95 - x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7777 = x7775 * x7776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7778 = x95 - x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7779 = x6651 * x7778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7780 = x7779 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7781 = x7777 + x7780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7782 = x95 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7783 = x7782 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7784 = x7783 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7785 = x7781 + x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7786 = x7775 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7787 = x7785 + x7786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7788 = x6652 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7789 = x95 - x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7790 = x7788 * x7789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7791 = x95 - x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7792 = x6652 * x7791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7793 = x7792 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7794 = x7790 + x7793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7795 = x95 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7796 = x7795 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7797 = x7796 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7798 = x7794 + x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7799 = x7788 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7800 = x7798 + x7799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7801 = x6653 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7802 = x95 - x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7803 = x7801 * x7802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7804 = x95 - x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7805 = x6653 * x7804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7806 = x7805 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7807 = x7803 + x7806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7808 = x95 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7809 = x7808 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7810 = x7809 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7811 = x7807 + x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7812 = x7801 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7813 = x7811 + x7812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7814 = x6654 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7815 = x95 - x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7816 = x7814 * x7815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7817 = x95 - x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7818 = x6654 * x7817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7819 = x7818 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7820 = x7816 + x7819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7821 = x95 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7822 = x7821 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7823 = x7822 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7824 = x7820 + x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7825 = x7814 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7826 = x7824 + x7825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7827 = x6655 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7828 = x95 - x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7829 = x7827 * x7828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7830 = x95 - x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7831 = x6655 * x7830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7832 = x7831 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7833 = x7829 + x7832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7834 = x95 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7835 = x7834 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7836 = x7835 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7837 = x7833 + x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7838 = x7827 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7839 = x7837 + x7838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7840 = x6656 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7841 = x95 - x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7842 = x7840 * x7841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7843 = x95 - x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7844 = x6656 * x7843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7845 = x7844 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7846 = x7842 + x7845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7847 = x95 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7848 = x7847 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7849 = x7848 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7850 = x7846 + x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7851 = x7840 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7852 = x7850 + x7851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7853 = x6657 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7854 = x95 - x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7855 = x7853 * x7854;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7856 = x95 - x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7857 = x6657 * x7856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7858 = x7857 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7859 = x7855 + x7858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7860 = x95 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7861 = x7860 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7862 = x7861 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x7859 + x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7864 = x7853 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7865 = x7863 + x7864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7866 = x6658 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7867 = x95 - x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7868 = x7866 * x7867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7869 = x95 - x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7870 = x6658 * x7869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7871 = x7870 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7872 = x7868 + x7871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7873 = x95 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7874 = x7873 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7875 = x7874 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x7872 + x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7877 = x7866 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7878 = x7876 + x7877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7879 = x6659 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7880 = x95 - x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7881 = x7879 * x7880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7882 = x95 - x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7883 = x6659 * x7882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7884 = x7883 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7885 = x7881 + x7884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7886 = x95 - x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7887 = x7886 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7888 = x7887 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x7885 + x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7890 = x7879 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7891 = x7889 + x7890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7892 = x6660 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7893 = x95 - x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7894 = x7892 * x7893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7895 = x95 - x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7896 = x6660 * x7895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7897 = x7896 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7898 = x7894 + x7897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7899 = x95 - x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7900 = x7899 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7901 = x7900 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x7898 + x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7903 = x7892 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7904 = x7902 + x7903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7905 = x6661 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7906 = x95 - x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7907 = x7905 * x7906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7908 = x95 - x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7909 = x6661 * x7908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7910 = x7909 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7911 = x7907 + x7910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7912 = x95 - x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7913 = x7912 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7914 = x7913 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x7911 + x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7916 = x7905 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7917 = x7915 + x7916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7918 = x6662 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7919 = x95 - x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7920 = x7918 * x7919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7921 = x95 - x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7922 = x6662 * x7921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7923 = x7922 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7924 = x7920 + x7923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7925 = x95 - x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7926 = x7925 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7927 = x7926 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7928 = x7924 + x7927;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7929 = x7918 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7930 = x7928 + x7929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7931 = x6663 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7932 = x95 - x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7933 = x7931 * x7932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7934 = x95 - x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7935 = x6663 * x7934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7936 = x7935 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7937 = x7933 + x7936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7938 = x95 - x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7939 = x7938 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7940 = x7939 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7941 = x7937 + x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7942 = x7931 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7943 = x7941 + x7942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7944 = x6664 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7945 = x95 - x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7946 = x7944 * x7945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7947 = x95 - x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7948 = x6664 * x7947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7949 = x7948 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7950 = x7946 + x7949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7951 = x95 - x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7952 = x7951 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7953 = x7952 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7954 = x7950 + x7953;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7955 = x7944 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7956 = x7954 + x7955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7957 = x6665 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7958 = x95 - x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7959 = x7957 * x7958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7960 = x95 - x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7961 = x6665 * x7960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7962 = x7961 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7963 = x7959 + x7962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7964 = x95 - x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7965 = x7964 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7966 = x7965 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7967 = x7963 + x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7968 = x7957 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7969 = x7967 + x7968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7970 = x6666 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7971 = x95 - x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7972 = x7970 * x7971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7973 = x95 - x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7974 = x6666 * x7973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7975 = x7974 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7976 = x7972 + x7975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7977 = x95 - x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7978 = x7977 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7979 = x7978 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7980 = x7976 + x7979;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7981 = x7970 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7982 = x7980 + x7981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7983 = x6667 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7984 = x95 - x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7985 = x7983 * x7984;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7986 = x95 - x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7987 = x6667 * x7986;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7988 = x7987 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7989 = x7985 + x7988;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7990 = x95 - x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7991 = x7990 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7992 = x7991 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7993 = x7989 + x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7994 = x7983 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7995 = x7993 + x7994;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7996 = x6668 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7997 = x95 - x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7998 = x7996 * x7997;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7999 = x95 - x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8000 = x6668 * x7999;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8001 = x8000 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8002 = x7998 + x8001;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8003 = x95 - x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8004 = x8003 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8005 = x8004 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8006 = x8002 + x8005;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8007 = x7996 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8008 = x8006 + x8007;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8009 = x6669 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8010 = x95 - x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8011 = x8009 * x8010;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8012 = x95 - x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8013 = x6669 * x8012;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8014 = x8013 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8015 = x8011 + x8014;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8016 = x95 - x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8017 = x8016 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8018 = x8017 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8019 = x8015 + x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8020 = x8009 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8021 = x8019 + x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8022 = x6670 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8023 = x95 - x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8024 = x8022 * x8023;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8025 = x95 - x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8026 = x6670 * x8025;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8027 = x8026 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8028 = x8024 + x8027;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8029 = x95 - x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8030 = x8029 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8031 = x8030 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8032 = x8028 + x8031;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8033 = x8022 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8034 = x8032 + x8033;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8035 = x6671 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8036 = x95 - x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8037 = x8035 * x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8038 = x95 - x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8039 = x6671 * x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8040 = x8039 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8041 = x8037 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8042 = x95 - x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8043 = x8042 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8044 = x8043 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8045 = x8041 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8046 = x8035 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8047 = x8045 + x8046;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8048 = x6672 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8049 = x95 - x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8050 = x8048 * x8049;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8051 = x95 - x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8052 = x6672 * x8051;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8053 = x8052 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8054 = x8050 + x8053;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8055 = x95 - x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8056 = x8055 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8057 = x8056 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8058 = x8054 + x8057;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8059 = x8048 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8060 = x8058 + x8059;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8061 = x6673 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8062 = x95 - x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8063 = x8061 * x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8064 = x95 - x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8065 = x6673 * x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8066 = x8065 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8067 = x8063 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8068 = x95 - x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8069 = x8068 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8070 = x8069 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8071 = x8067 + x8070;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8072 = x8061 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8073 = x8071 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8074 = x6674 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8075 = x95 - x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8076 = x8074 * x8075;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8077 = x95 - x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8078 = x6674 * x8077;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8079 = x8078 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8080 = x8076 + x8079;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8081 = x95 - x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8082 = x8081 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8083 = x8082 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8084 = x8080 + x8083;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8085 = x8074 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8086 = x8084 + x8085;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8087 = x7696 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8088 = x7683 + x8087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8089 = x7709 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8090 = x8088 + x8089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8091 = x7722 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8092 = x8090 + x8091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8093 = x7735 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8094 = x8092 + x8093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8095 = x7748 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8096 = x8094 + x8095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8097 = x7761 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8098 = x8096 + x8097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8099 = x7774 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8100 = x8098 + x8099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8101 = x7787 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8102 = x8100 + x8101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8103 = x7800 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8104 = x8102 + x8103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8105 = x7813 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8106 = x8104 + x8105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8107 = x7826 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8108 = x8106 + x8107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8109 = x7839 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8110 = x8108 + x8109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8111 = x7852 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8112 = x8110 + x8111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8113 = x7865 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8114 = x8112 + x8113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8115 = x7878 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8116 = x8114 + x8115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8117 = x7904 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8118 = x7891 + x8117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8119 = x7917 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8120 = x8118 + x8119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8121 = x7930 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8122 = x8120 + x8121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8123 = x7943 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8124 = x8122 + x8123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8125 = x7956 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8126 = x8124 + x8125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8127 = x7969 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8128 = x8126 + x8127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8129 = x7982 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8130 = x8128 + x8129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8131 = x7995 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8132 = x8130 + x8131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8133 = x8008 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8134 = x8132 + x8133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8135 = x8021 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8136 = x8134 + x8135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8137 = x8034 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8138 = x8136 + x8137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8139 = x8047 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8140 = x8138 + x8139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8141 = x8060 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8142 = x8140 + x8141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8143 = x8073 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8144 = x8142 + x8143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8145 = x8086 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8146 = x8144 + x8145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8147 = x7040 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8148 = x7037 + x8147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8149 = x7043 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8150 = x8148 + x8149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8151 = x7046 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8152 = x8150 + x8151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8153 = x7049 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8154 = x8152 + x8153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8155 = x7052 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8156 = x8154 + x8155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8157 = x7055 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8158 = x8156 + x8157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8159 = x7058 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8160 = x8158 + x8159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8161 = x7061 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8162 = x8160 + x8161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8163 = x7064 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8164 = x8162 + x8163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8165 = x7067 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8166 = x8164 + x8165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8167 = x7070 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8168 = x8166 + x8167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8169 = x7073 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8170 = x8168 + x8169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8171 = x7076 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8172 = x8170 + x8171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8173 = x7079 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8174 = x8172 + x8173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8175 = x7082 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8176 = x8174 + x8175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8177 = x7088 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8178 = x7085 + x8177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8179 = x7091 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8180 = x8178 + x8179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8181 = x7094 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8182 = x8180 + x8181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8183 = x7097 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8184 = x8182 + x8183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8185 = x7100 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8186 = x8184 + x8185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8187 = x7103 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8188 = x8186 + x8187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8189 = x7106 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8190 = x8188 + x8189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8191 = x7109 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8192 = x8190 + x8191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8193 = x7112 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8194 = x8192 + x8193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8195 = x7115 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8196 = x8194 + x8195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8197 = x7118 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8198 = x8196 + x8197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8199 = x7121 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8200 = x8198 + x8199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8201 = x7124 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8202 = x8200 + x8201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8203 = x7127 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8204 = x8202 + x8203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8205 = x7130 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8206 = x8204 + x8205;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8207 = x8116 + x8176;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8208 = x8146 + x8206;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8209 = x7669 + x8207;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8210 = x7670 + x8208;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8211 = x6740 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8212 = x6739 + x8211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8213 = x6741 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8214 = x8212 + x8213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8215 = x6742 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8216 = x8214 + x8215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8217 = x6743 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8218 = x8216 + x8217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8219 = x6744 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8220 = x8218 + x8219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8221 = x6745 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8222 = x8220 + x8221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8223 = x6746 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8224 = x8222 + x8223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8225 = x6747 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8226 = x8224 + x8225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8227 = x6748 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8228 = x8226 + x8227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8229 = x6749 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8230 = x8228 + x8229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8231 = x6750 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8232 = x8230 + x8231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8233 = x6751 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8234 = x8232 + x8233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8235 = x6752 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8236 = x8234 + x8235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8237 = x6753 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8238 = x8236 + x8237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8239 = x6754 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8240 = x8238 + x8239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8241 = x6756 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8242 = x6755 + x8241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8243 = x6757 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8244 = x8242 + x8243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8245 = x6758 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8246 = x8244 + x8245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8247 = x6759 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8248 = x8246 + x8247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8249 = x6760 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8250 = x8248 + x8249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8251 = x6761 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8252 = x8250 + x8251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8253 = x6762 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8254 = x8252 + x8253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8255 = x6763 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8256 = x8254 + x8255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8257 = x6764 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8258 = x8256 + x8257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8259 = x6765 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8260 = x8258 + x8259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8261 = x6766 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8262 = x8260 + x8261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8263 = x6767 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8264 = x8262 + x8263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8265 = x6768 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8266 = x8264 + x8265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8267 = x6769 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8268 = x8266 + x8267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8269 = x6770 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8270 = x8268 + x8269;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8271 = x7669 + x8240;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8272 = x7670 + x8270;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8209);
        reg = x8209;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8271);
        reg = x8271;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8210);
        reg = x8210;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8272);
        reg = x8272;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8273 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8274 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8274 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8275 = Fp(x8273.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8275);
          reg = x8275;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8276 = Fp(x8273.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8277 = x8276 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8277);
          reg = x8277;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8278 = Fp(x8273.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8279 = x8278 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8279);
          reg = x8279;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8280 = Fp(x8273.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8281 = x8280 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8281);
          reg = x8281;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8282 = Fp(x8273.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8283 = x8282 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8283);
          reg = x8283;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8284 = Fp(x8273.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8285 = x8284 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8285);
          reg = x8285;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8286 = Fp(x8273.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8287 = x8286 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8287);
          reg = x8287;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8288 = Fp(x8273.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8289 = x8288 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8289);
          reg = x8289;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8290 = Fp(x8273.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8291 = x8290 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8291);
          reg = x8291;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8292 = Fp(x8273.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8293 = x8292 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8293);
          reg = x8293;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8294 = Fp(x8273.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8295 = x8294 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8295);
          reg = x8295;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8296 = Fp(x8273.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8297 = x8296 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8297);
          reg = x8297;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8298 = Fp(x8273.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8299 = x8298 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8299);
          reg = x8299;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8300 = Fp(x8273.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8301 = x8300 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8301);
          reg = x8301;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8302 = Fp(x8273.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8303 = x8302 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8303);
          reg = x8303;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8304 = Fp(x8273.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8305 = x8304 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8305);
          reg = x8305;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8306 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8307 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8307 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8308 = x8307 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8309 = x8306 + x8308;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8310 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8310 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8311 = x8310 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8312 = x8309 + x8311;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8313 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8313 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8314 = x8313 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8315 = x8312 + x8314;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8316 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8316 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8317 = x8316 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8318 = x8315 + x8317;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8319 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8319 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8320 = x8319 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8321 = x8318 + x8320;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8322 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8322 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8323 = x8322 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8324 = x8321 + x8323;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8325 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8325 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8326 = x8325 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8327 = x8324 + x8326;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8328 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8328 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8329 = x8328 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8330 = x8327 + x8329;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8331 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8331 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8332 = x8331 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8333 = x8330 + x8332;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8334 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8334 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8335 = x8334 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8336 = x8333 + x8335;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8337 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8337 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8338 = x8337 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8339 = x8336 + x8338;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8340 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8340 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8341 = x8340 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8342 = x8339 + x8341;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8343 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8344 = x8343 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8345 = x8342 + x8344;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8346 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8346 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8347 = x8346 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8348 = x8345 + x8347;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8349 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8349 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8350 = x8349 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8351 = x8348 + x8350;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8352 = x8273 - x8351;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8353 = x8352 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8354 = Fp(x8353.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8354);
          reg = x8354;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8355 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8356 = x8353 - x8355;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8357 = x8356 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8358 = x95 - x8357;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8359 = x8357 * x8358;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8359 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8360 = x8274 + x8353;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8361 = Fp(x8360.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8361);
          reg = x8361;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8362 = Fp(x8360.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8363 = x8362 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8363);
          reg = x8363;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8364 = Fp(x8360.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8365 = x8364 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8365);
          reg = x8365;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8366 = Fp(x8360.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8367 = x8366 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8367);
          reg = x8367;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8368 = Fp(x8360.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8369 = x8368 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8369);
          reg = x8369;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8370 = Fp(x8360.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8371 = x8370 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8371);
          reg = x8371;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8372 = Fp(x8360.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8373 = x8372 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8373);
          reg = x8373;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8374 = Fp(x8360.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8375 = x8374 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8375);
          reg = x8375;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8376 = Fp(x8360.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8377 = x8376 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8377);
          reg = x8377;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8378 = Fp(x8360.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8379 = x8378 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8379);
          reg = x8379;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8380 = Fp(x8360.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8381 = x8380 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8381);
          reg = x8381;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8382 = Fp(x8360.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8383 = x8382 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8383);
          reg = x8383;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8384 = Fp(x8360.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8385 = x8384 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8385);
          reg = x8385;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8386 = Fp(x8360.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8387 = x8386 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8387);
          reg = x8387;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8388 = Fp(x8360.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8389 = x8388 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8389);
          reg = x8389;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8390 = Fp(x8360.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8391 = x8390 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8392 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8392 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8393 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8394 = x8393 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8395 = x8392 + x8394;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8396 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8396 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8397 = x8396 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8398 = x8395 + x8397;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8399 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8399 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8400 = x8399 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8401 = x8398 + x8400;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8402 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8403 = x8402 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8404 = x8401 + x8403;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8405 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8405 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8406 = x8405 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8407 = x8404 + x8406;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8408 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8409 = x8408 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8410 = x8407 + x8409;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8411 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8412 = x8411 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8413 = x8410 + x8412;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8414 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8415 = x8414 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8416 = x8413 + x8415;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8417 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8417 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8418 = x8417 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8419 = x8416 + x8418;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8420 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8421 = x8420 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8422 = x8419 + x8421;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8423 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8424 = x8423 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8425 = x8422 + x8424;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8426 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8426 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8427 = x8426 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8428 = x8425 + x8427;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8429 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8430 = x8429 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8431 = x8428 + x8430;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8432 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8433 = x8432 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8434 = x8431 + x8433;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8435 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8436 = x8435 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8437 = x8434 + x8436;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8438 = x8360 - x8437;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8439 = x8438 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8440 = Fp(x8439.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8440);
          reg = x8440;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8441 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8442 = x8439 - x8441;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8443 = x8442 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8444 = x95 - x8443;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8445 = x8443 * x8444;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8445 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8446 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8446 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8447 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8447 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8448 = Fp(x8446.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8448);
          reg = x8448;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8449 = Fp(x8446.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8450 = x8449 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8450);
          reg = x8450;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8451 = Fp(x8446.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8452 = x8451 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8452);
          reg = x8452;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8453 = Fp(x8446.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8454 = x8453 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8454);
          reg = x8454;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8455 = Fp(x8446.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8456 = x8455 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8456);
          reg = x8456;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8457 = Fp(x8446.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8458 = x8457 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8458);
          reg = x8458;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8459 = Fp(x8446.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8460 = x8459 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8460);
          reg = x8460;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8461 = Fp(x8446.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8462 = x8461 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8462);
          reg = x8462;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8463 = Fp(x8446.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8464 = x8463 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8464);
          reg = x8464;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8465 = Fp(x8446.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8466 = x8465 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8466);
          reg = x8466;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8467 = Fp(x8446.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8468 = x8467 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8468);
          reg = x8468;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8469 = Fp(x8446.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8470 = x8469 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8470);
          reg = x8470;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8471 = Fp(x8446.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8472 = x8471 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8472);
          reg = x8472;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8473 = Fp(x8446.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8474 = x8473 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8474);
          reg = x8474;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8475 = Fp(x8446.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8476 = x8475 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8476);
          reg = x8476;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8477 = Fp(x8446.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8478 = x8477 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8478);
          reg = x8478;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8479 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8479 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8480 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8480 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8481 = x8480 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8482 = x8479 + x8481;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8483 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8483 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8484 = x8483 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8485 = x8482 + x8484;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8486 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8486 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8487 = x8486 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8488 = x8485 + x8487;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8489 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8489 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8490 = x8489 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8491 = x8488 + x8490;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8492 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8492 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8493 = x8492 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8494 = x8491 + x8493;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8495 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8495 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8496 = x8495 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8497 = x8494 + x8496;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8498 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8498 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8499 = x8498 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8500 = x8497 + x8499;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8501 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8501 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8502 = x8501 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8503 = x8500 + x8502;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8504 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8504 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8505 = x8504 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8506 = x8503 + x8505;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8507 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8507 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8508 = x8507 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8509 = x8506 + x8508;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8510 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8510 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8511 = x8510 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8512 = x8509 + x8511;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8513 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8513 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8514 = x8513 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8515 = x8512 + x8514;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8516 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8516 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8517 = x8516 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8518 = x8515 + x8517;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8519 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8519 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8520 = x8519 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8521 = x8518 + x8520;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8522 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8522 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8523 = x8522 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8524 = x8521 + x8523;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8525 = x8446 - x8524;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8526 = x8525 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8527 = Fp(x8526.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8527);
          reg = x8527;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8528 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8529 = x8526 - x8528;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8530 = x8529 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8531 = x95 - x8530;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8532 = x8530 * x8531;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8532 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8533 = x8447 + x8526;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8534 = Fp(x8533.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8534);
          reg = x8534;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8535 = Fp(x8533.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8536 = x8535 * x55;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8536);
          reg = x8536;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8537 = Fp(x8533.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8538 = x8537 * x76;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8538);
          reg = x8538;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8539 = Fp(x8533.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8540 = x8539 * x56;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8540);
          reg = x8540;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8541 = Fp(x8533.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8542 = x8541 * x57;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8542);
          reg = x8542;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8543 = Fp(x8533.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8544 = x8543 * x58;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8544);
          reg = x8544;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8545 = Fp(x8533.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8546 = x8545 * x53;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8546);
          reg = x8546;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8547 = Fp(x8533.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8548 = x8547 * x61;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8548);
          reg = x8548;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8549 = Fp(x8533.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8550 = x8549 * x89;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8550);
          reg = x8550;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8551 = Fp(x8533.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8552 = x8551 * x20;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8552);
          reg = x8552;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8553 = Fp(x8533.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8554 = x8553 * x19;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8554);
          reg = x8554;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8555 = Fp(x8533.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8556 = x8555 * x17;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8556);
          reg = x8556;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8557 = Fp(x8533.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8558 = x8557 * x15;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8558);
          reg = x8558;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8559 = Fp(x8533.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8560 = x8559 * x13;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8560);
          reg = x8560;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8561 = Fp(x8533.asUInt32() & x35.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8562 = x8561 * x12;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8562);
          reg = x8562;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8563 = Fp(x8533.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8564 = x8563 * x10;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8564);
          reg = x8564;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8565 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8565 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8566 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8567 = x8566 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8568 = x8565 + x8567;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8569 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8570 = x8569 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8571 = x8568 + x8570;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8572 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8573 = x8572 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8574 = x8571 + x8573;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8575 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8576 = x8575 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8577 = x8574 + x8576;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8578 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8579 = x8578 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8580 = x8577 + x8579;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8581 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8582 = x8581 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8583 = x8580 + x8582;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8584 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8585 = x8584 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8586 = x8583 + x8585;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8587 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8588 = x8587 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8589 = x8586 + x8588;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8590 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8591 = x8590 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8592 = x8589 + x8591;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8593 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8594 = x8593 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8595 = x8592 + x8594;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8596 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8597 = x8596 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8598 = x8595 + x8597;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8599 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8600 = x8599 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8601 = x8598 + x8600;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8602 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8603 = x8602 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8604 = x8601 + x8603;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8605 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8606 = x8605 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8607 = x8604 + x8606;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8608 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8609 = x8608 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8610 = x8607 + x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8611 = x8533 - x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8612 = x8611 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8613 = Fp(x8612.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8613);
          reg = x8613;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8614 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8615 = x8612 - x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8616 = x8615 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8617 = x95 - x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8618 = x8616 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8618 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./cirgen/components/mux.h":49:25))
    auto x8619 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x8619 != Fp::invalid());
    if (x8619 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8620 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x8620 != Fp::invalid());
      if (x8620 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("cirgen/circuit/rv32im/sha.cpp":341:72))
        auto x8621 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x8621 != Fp::invalid());
        if (x8621 != 0) {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":344:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6);
            reg = x6;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":345:40))
          auto x8622 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8622 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":345:7)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8622);
            reg = x8622;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":347:22)
        auto x8623 = x95 - x8621;
        if (x8623 != 0) {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":349:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x77);
            reg = x77;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":350:44))
          auto x8624 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8624 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":350:44)
          auto x8625 = x8624 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":350:7)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8625);
            reg = x8625;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":353:18)
      auto x8626 = x95 - x8620;
      if (x8626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x8627 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x8627 != Fp::invalid());
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8627);
          reg = x8627;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":356:40))
        auto x8628 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x8628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":356:40)
        auto x8629 = x8628 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":356:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8629);
          reg = x8629;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":357:38))
        auto x8630 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x8630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":357:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8630);
          reg = x8630;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8631 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x8631 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8632 = (x8631 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8632);
          reg = x8632;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8633 = inv(x8631);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8633);
          reg = x8633;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8634 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8634 != Fp::invalid());
      if (x8634 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8631 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8635 = x95 - x8634;
      if (x8635 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8636 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x8636 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8637 = x8631 * x8636;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8638 = x8637 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8638 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8639 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":361:15)
      auto x8640 = x95 - x8639;
      if (x8634 != 0) {
        if (x8640 != 0) {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        if (x8639 != 0) {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      if (x8635 != 0) {
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":371:38))
      auto x8641 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":371:3)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8641);
        reg = x8641;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":372:40))
      auto x8642 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":372:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8642);
        reg = x8642;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8643 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8643);
        reg = x8643;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":374:36))
      auto x8644 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":374:3)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8644);
        reg = x8644;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8645 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8645 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8646 = (x8645 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8646);
          reg = x8646;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8647 = inv(x8645);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8647);
          reg = x8647;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8648 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8648 != Fp::invalid());
      if (x8648 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8645 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8649 = x95 - x8648;
      if (x8649 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8650 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x8650 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8651 = x8645 * x8650;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8652 = x8651 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8652 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8653 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8654 = Fp(x8653.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8654);
          reg = x8654;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8655 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8656 = x8653 - x8655;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8657 = x8656 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8658 = Fp(x8657.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8658);
          reg = x8658;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8659 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8660 = x8657 - x8659;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8661 = x8660 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8662 = Fp(x8661.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8662);
          reg = x8662;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8663 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8664 = x8661 - x8663;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8665 = x8664 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8666 = Fp(x8665.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8666);
          reg = x8666;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8667 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8668 = x8665 - x8667;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8669 = x8668 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8669);
        reg = x8669;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8670 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8671 = x95 - x8670;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8672 = x8670 * x8671;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8672);
        reg = x8672;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x8673 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8674 = x92 - x8670;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8675 = x8673 * x8674;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8675 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x68;
      host_args.at(1) = x8639;
      host_args.at(2) = x8631;
      host_args.at(3) = x8645;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8640 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":384:24)
        auto x8676 = x5 - x8631;
        {
          host_args.at(0) = x8676;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8677 = host_outs.at(0);
          auto x8678 = host_outs.at(1);
          auto x8679 = host_outs.at(2);
          auto x8680 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8677);
            reg = x8677;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8678);
            reg = x8678;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8679);
            reg = x8679;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8680);
            reg = x8680;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x8681 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x8681 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x8682 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x8682 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x8683 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x8683 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x8684 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x8684 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8676);
          reg = x8676;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8681);
          reg = x8681;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8682);
          reg = x8682;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8683);
          reg = x8683;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8684);
          reg = x8684;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8685 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x8685 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8686 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x8686 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8687 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x8687 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8688 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8688 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8689 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8689 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8690 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8690 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8691 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8691 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8692 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8692 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8693 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8693 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8694 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8694 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8695 = args[2][12 * steps + ((cycle - 2) & mask)];
      assert(x8695 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8696 = args[2][13 * steps + ((cycle - 2) & mask)];
      assert(x8696 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8697 = args[2][14 * steps + ((cycle - 2) & mask)];
      assert(x8697 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8698 = args[2][15 * steps + ((cycle - 2) & mask)];
      assert(x8698 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8699 = args[2][16 * steps + ((cycle - 2) & mask)];
      assert(x8699 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8700 = args[2][17 * steps + ((cycle - 2) & mask)];
      assert(x8700 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8701 = args[2][18 * steps + ((cycle - 2) & mask)];
      assert(x8701 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8702 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8702 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8703 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8703 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8704 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8704 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8705 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8705 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8706 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8706 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8707 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8707 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8708 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8708 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8709 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8709 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8710 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8710 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8711 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8711 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8712 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8712 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8713 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8713 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8714 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8714 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8715 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8715 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8716 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8716 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8717 = args[2][79 * steps + ((cycle - 7) & mask)];
      assert(x8717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8718 = args[2][80 * steps + ((cycle - 7) & mask)];
      assert(x8718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8719 = args[2][81 * steps + ((cycle - 7) & mask)];
      assert(x8719 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8720 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8720 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8721 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8721 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8722 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8722 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8723 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8723 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8724 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8724 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8725 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8725 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8726 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8726 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8727 = args[2][12 * steps + ((cycle - 7) & mask)];
      assert(x8727 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8728 = args[2][13 * steps + ((cycle - 7) & mask)];
      assert(x8728 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8729 = args[2][14 * steps + ((cycle - 7) & mask)];
      assert(x8729 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8730 = args[2][15 * steps + ((cycle - 7) & mask)];
      assert(x8730 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8731 = args[2][16 * steps + ((cycle - 7) & mask)];
      assert(x8731 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8732 = args[2][17 * steps + ((cycle - 7) & mask)];
      assert(x8732 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8733 = args[2][18 * steps + ((cycle - 7) & mask)];
      assert(x8733 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8734 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8734 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8735 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8735 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8736 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8736 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8737 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8737 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8738 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8738 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8739 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8739 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8740 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8740 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8741 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8741 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8742 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8742 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8743 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8743 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8744 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8744 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8745 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8745 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8746 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8746 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8747 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8747 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8748 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8748 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8749 = args[2][79 * steps + ((cycle - 15) & mask)];
      assert(x8749 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8750 = args[2][80 * steps + ((cycle - 15) & mask)];
      assert(x8750 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8751 = args[2][81 * steps + ((cycle - 15) & mask)];
      assert(x8751 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8752 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8752 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8753 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8753 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8754 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8754 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8755 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8755 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8756 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8756 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8757 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8757 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8758 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8758 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8759 = args[2][12 * steps + ((cycle - 15) & mask)];
      assert(x8759 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8760 = args[2][13 * steps + ((cycle - 15) & mask)];
      assert(x8760 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8761 = args[2][14 * steps + ((cycle - 15) & mask)];
      assert(x8761 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8762 = args[2][15 * steps + ((cycle - 15) & mask)];
      assert(x8762 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8763 = args[2][16 * steps + ((cycle - 15) & mask)];
      assert(x8763 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8764 = args[2][17 * steps + ((cycle - 15) & mask)];
      assert(x8764 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8765 = args[2][18 * steps + ((cycle - 15) & mask)];
      assert(x8765 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8766 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8766 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8767 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8767 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8768 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8768 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8769 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8770 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8771 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8771 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8772 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8772 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8773 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8773 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8774 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8774 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8775 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8775 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8776 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8776 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8777 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8777 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8778 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8778 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8779 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8779 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8780 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8780 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8781 = args[2][79 * steps + ((cycle - 16) & mask)];
      assert(x8781 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8782 = args[2][80 * steps + ((cycle - 16) & mask)];
      assert(x8782 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8783 = args[2][81 * steps + ((cycle - 16) & mask)];
      assert(x8783 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8784 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8784 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8785 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8785 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8786 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8786 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8787 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8787 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8788 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8788 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8789 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8789 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8790 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8790 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8791 = args[2][12 * steps + ((cycle - 16) & mask)];
      assert(x8791 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8792 = args[2][13 * steps + ((cycle - 16) & mask)];
      assert(x8792 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8793 = args[2][14 * steps + ((cycle - 16) & mask)];
      assert(x8793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8794 = args[2][15 * steps + ((cycle - 16) & mask)];
      assert(x8794 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8795 = args[2][16 * steps + ((cycle - 16) & mask)];
      assert(x8795 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8796 = args[2][17 * steps + ((cycle - 16) & mask)];
      assert(x8796 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8797 = args[2][18 * steps + ((cycle - 16) & mask)];
      assert(x8797 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8798 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8798 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8799 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8799 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8800 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8800 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8801 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8801 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8802 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8802 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8803 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8803 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8804 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8804 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8805 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8805 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8806 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8806 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8807 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8807 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8808 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8808 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8809 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8809 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8810 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8810 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8811 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8811 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x8812 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8812 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8813 = x8767 + x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8814 = x8767 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8815 = x8814 * x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8816 = x8813 - x8815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8817 = x8768 + x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8818 = x8768 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8819 = x8818 * x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8820 = x8817 - x8819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8821 = x8769 + x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8822 = x8769 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8823 = x8822 * x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8824 = x8821 - x8823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8770 + x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8826 = x8770 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8827 = x8826 * x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8825 - x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8771 + x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8830 = x8771 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8831 = x8830 * x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8829 - x8831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8833 = x8772 + x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8834 = x8772 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8835 = x8834 * x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8836 = x8833 - x8835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8773 + x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8838 = x8773 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8839 = x8838 * x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8837 - x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8774 + x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8774 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8843 = x8842 * x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8841 - x8843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8845 = x8775 + x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8846 = x8775 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8847 = x8846 * x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8848 = x8845 - x8847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8849 = x8776 + x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8850 = x8776 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8851 = x8850 * x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8849 - x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8777 + x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8854 = x8777 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8855 = x8854 * x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8853 - x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8857 = x8778 + x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8858 = x8778 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8859 = x8858 * x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8860 = x8857 - x8859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8861 = x8779 + x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8862 = x8779 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8863 = x8862 * x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8861 - x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8780 + x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8866 = x8780 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8867 = x8866 * x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8865 - x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8869 = x8749 + x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8870 = x8749 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8871 = x8870 * x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8872 = x8869 - x8871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8873 = x8750 + x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8874 = x8750 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8875 = x8874 * x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8876 = x8873 - x8875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8751 + x8768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8878 = x8751 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8879 = x8878 * x8768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8877 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8881 = x8752 + x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8882 = x8752 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8883 = x8882 * x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8884 = x8881 - x8883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8885 = x8753 + x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8886 = x8753 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8887 = x8886 * x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8888 = x8885 - x8887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8754 + x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8890 = x8754 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8890 * x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8889 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8755 + x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8755 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8895 = x8894 * x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8893 - x8895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8897 = x8756 + x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8898 = x8756 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8899 = x8898 * x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8900 = x8897 - x8899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8757 + x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8902 = x8757 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8902 * x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8901 - x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8758 + x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8758 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8907 = x8906 * x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8905 - x8907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8909 = x8759 + x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8910 = x8759 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8911 = x8910 * x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8912 = x8909 - x8911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8760 + x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8914 = x8760 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8914 * x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8916 = x8913 - x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8761 + x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8918 = x8761 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8919 = x8918 * x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8920 = x8917 - x8919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8921 = x8762 + x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8922 = x8762 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8923 = x8922 * x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8924 = x8921 - x8923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8763 + x8780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8926 = x8763 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8926 * x8780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8928 = x8925 - x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8756 + x8816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8930 = x8898 * x8816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8929 - x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8932 = x8757 + x8820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8933 = x8902 * x8820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8932 - x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8758 + x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8906 * x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8935 - x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8759 + x8828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8910 * x8828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8940 = x8938 - x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8760 + x8832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8942 = x8914 * x8832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8943 = x8941 - x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8944 = x8761 + x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8945 = x8918 * x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8946 = x8944 - x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8947 = x8762 + x8840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8948 = x8922 * x8840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8947 - x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8950 = x8763 + x8844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8926 * x8844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8952 = x8950 - x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8764 + x8848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8954 = x8764 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8955 = x8954 * x8848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8956 = x8953 - x8955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8957 = x8765 + x8852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8958 = x8765 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8959 = x8958 * x8852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8960 = x8957 - x8959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8766 + x8856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8962 = x8766 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8963 = x8962 * x8856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8964 = x8961 - x8963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8767 + x8860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8966 = x8814 * x8860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8967 = x8965 - x8966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8968 = x8768 + x8864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8969 = x8818 * x8864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8970 = x8968 - x8969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8971 = x8769 + x8868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8972 = x8822 * x8868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8973 = x8971 - x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8974 = x8770 + x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8975 = x8826 * x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8976 = x8974 - x8975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8977 = x8771 + x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8978 = x8830 * x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8979 = x8977 - x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8980 = x8772 + x8880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8981 = x8834 * x8880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8980 - x8981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8983 = x8773 + x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8984 = x8838 * x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8983 - x8984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8986 = x8774 + x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8987 = x8842 * x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8986 - x8987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8989 = x8775 + x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8990 = x8846 * x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8989 - x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8992 = x8776 + x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8993 = x8850 * x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8992 - x8993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8995 = x8777 + x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8996 = x8854 * x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8995 - x8996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8998 = x8778 + x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8999 = x8858 * x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8998 - x8999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9001 = x8779 + x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9002 = x8862 * x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x9001 - x9002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9004 = x8780 + x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9005 = x8866 * x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x9004 - x9005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9007 = x8749 + x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9008 = x8870 * x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x9007 - x9008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9010 = x8750 + x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9011 = x8874 * x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x9010 - x9011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9013 = x8751 + x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9014 = x8878 * x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x9013 - x9014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9016 = x8752 + x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9017 = x8882 * x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x9016 - x9017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9019 = x8753 + x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9020 = x8886 * x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x9019 - x9020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9022 = x8754 + x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9023 = x8890 * x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x9022 - x9023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9025 = x8755 + x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9026 = x8894 * x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x9025 - x9026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9028 = x8704 + x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9029 = x8704 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9030 = x9029 * x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9031 = x9028 - x9030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x8705 + x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9033 = x8705 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x9033 * x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9035 = x9032 - x9034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x8706 + x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9037 = x8706 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9038 = x9037 * x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x9036 - x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9040 = x8707 + x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9041 = x8707 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9042 = x9041 * x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9043 = x9040 - x9042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9044 = x8708 + x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9045 = x8708 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9046 = x9045 * x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9047 = x9044 - x9046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x8709 + x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9049 = x8709 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x9049 * x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x9048 - x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x8710 + x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x8710 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9054 = x9053 * x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x9052 - x9054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9056 = x8711 + x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9057 = x8711 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9058 = x9057 * x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9059 = x9056 - x9058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x8712 + x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9061 = x8712 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9062 = x9061 * x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x9060 - x9062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9064 = x8713 + x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x8713 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9066 = x9065 * x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x9064 - x9066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9068 = x8714 + x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9069 = x8714 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9070 = x9069 * x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9071 = x9068 - x9070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x8715 + x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9073 = x8715 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x9073 * x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9075 = x9072 - x9074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x8716 + x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9077 = x8716 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9078 = x9077 * x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9079 = x9076 - x9078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9080 = x8685 + x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9081 = x8685 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9082 = x9081 * x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9083 = x9080 - x9082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9084 = x8686 + x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9085 = x8686 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9086 = x9085 * x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9087 = x9084 - x9086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9088 = x8687 + x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9089 = x8687 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9090 = x9089 * x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9091 = x9088 - x9090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9092 = x8688 + x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9093 = x8688 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9094 = x9093 * x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9095 = x9092 - x9094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9096 = x8689 + x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9097 = x8689 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9098 = x9097 * x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9099 = x9096 - x9098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9100 = x8690 + x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9101 = x8690 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9102 = x9101 * x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9103 = x9100 - x9102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9104 = x8691 + x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9105 = x8691 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9106 = x9105 * x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9107 = x9104 - x9106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9108 = x8692 + x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9109 = x8692 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9110 = x9109 * x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9111 = x9108 - x9110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9112 = x8693 + x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9113 = x8693 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9114 = x9113 * x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9115 = x9112 - x9114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9116 = x8702 + x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9117 = x8702 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9118 = x9117 * x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9119 = x9116 - x9118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9120 = x8703 + x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9121 = x8703 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9122 = x9121 * x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9123 = x9120 - x9122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9124 = x8704 + x9039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9125 = x9029 * x9039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9126 = x9124 - x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9127 = x8705 + x9043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9128 = x9033 * x9043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9129 = x9127 - x9128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9130 = x8706 + x9047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9131 = x9037 * x9047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9132 = x9130 - x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9133 = x8707 + x9051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9134 = x9041 * x9051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9135 = x9133 - x9134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9136 = x8708 + x9055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9137 = x9045 * x9055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9138 = x9136 - x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9139 = x8709 + x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9140 = x9049 * x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9141 = x9139 - x9140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9142 = x8710 + x9063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9143 = x9053 * x9063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9144 = x9142 - x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9145 = x8711 + x9067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9146 = x9057 * x9067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9147 = x9145 - x9146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9148 = x8712 + x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9149 = x9061 * x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9150 = x9148 - x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9151 = x8713 + x9075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9152 = x9065 * x9075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9153 = x9151 - x9152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9154 = x8714 + x9079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9155 = x9069 * x9079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9156 = x9154 - x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9157 = x8715 + x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9158 = x9073 * x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9159 = x9157 - x9158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9160 = x8716 + x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9161 = x9077 * x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9162 = x9160 - x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9163 = x8685 + x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9164 = x9081 * x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9165 = x9163 - x9164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9166 = x8686 + x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9167 = x9085 * x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9168 = x9166 - x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9169 = x8687 + x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9170 = x9089 * x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9171 = x9169 - x9170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9172 = x8688 + x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9173 = x9093 * x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9174 = x9172 - x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9175 = x8689 + x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9176 = x9097 * x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9177 = x9175 - x9176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9178 = x8690 + x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9179 = x9101 * x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9180 = x9178 - x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9181 = x8691 + x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9182 = x9105 * x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9183 = x9181 - x9182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9184 = x8692 + x8694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9185 = x9109 * x8694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9186 = x9184 - x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9187 = x8693 + x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9188 = x9113 * x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9189 = x9187 - x9188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9190 = x8694 + x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9191 = x8694 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9192 = x9191 * x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9193 = x9190 - x9192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9194 = x8695 + x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9195 = x8695 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9196 = x9195 * x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9197 = x9194 - x9196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9198 = x8696 + x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9199 = x8696 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9200 = x9199 * x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9201 = x9198 - x9200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9202 = x8697 + x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9203 = x8697 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9204 = x9203 * x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9205 = x9202 - x9204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9206 = x8698 + x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9207 = x8698 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9208 = x9207 * x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9209 = x9206 - x9208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9210 = x8699 + x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9211 = x8699 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9212 = x9211 * x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9213 = x9210 - x9212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9214 = x8700 + x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9215 = x8700 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9216 = x9215 * x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9217 = x9214 - x9216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9218 = x8701 + x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9219 = x8701 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9220 = x9219 * x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9221 = x9218 - x9220;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9222 = x8782 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9223 = x8781 + x9222;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9224 = x8783 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9225 = x9223 + x9224;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9226 = x8784 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9227 = x9225 + x9226;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9228 = x8785 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9229 = x9227 + x9228;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9230 = x8786 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9231 = x9229 + x9230;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9232 = x8787 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9233 = x9231 + x9232;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9234 = x8788 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9235 = x9233 + x9234;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9236 = x8789 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9237 = x9235 + x9236;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9238 = x8790 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9239 = x9237 + x9238;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9240 = x8791 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9241 = x9239 + x9240;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9242 = x8792 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9243 = x9241 + x9242;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9244 = x8793 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9245 = x9243 + x9244;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9246 = x8794 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9247 = x9245 + x9246;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9248 = x8795 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9249 = x9247 + x9248;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9250 = x8796 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9251 = x9249 + x9250;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9252 = x8798 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9253 = x8797 + x9252;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9254 = x8799 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9255 = x9253 + x9254;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9256 = x8800 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9257 = x9255 + x9256;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9258 = x8801 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9259 = x9257 + x9258;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9260 = x8802 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9261 = x9259 + x9260;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9262 = x8803 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9263 = x9261 + x9262;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9264 = x8804 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9265 = x9263 + x9264;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9266 = x8805 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9267 = x9265 + x9266;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9268 = x8806 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9269 = x9267 + x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9270 = x8807 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9271 = x9269 + x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9272 = x8808 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9273 = x9271 + x9272;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9274 = x8809 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9275 = x9273 + x9274;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9276 = x8810 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9277 = x9275 + x9276;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9278 = x8811 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9279 = x9277 + x9278;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9280 = x8812 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9281 = x9279 + x9280;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9282 = x8934 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9283 = x8931 + x9282;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9284 = x8937 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9285 = x9283 + x9284;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9286 = x8940 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9287 = x9285 + x9286;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9288 = x8943 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9289 = x9287 + x9288;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9290 = x8946 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9291 = x9289 + x9290;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9292 = x8949 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9293 = x9291 + x9292;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9294 = x8952 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9295 = x9293 + x9294;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9296 = x8956 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9297 = x9295 + x9296;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9298 = x8960 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9299 = x9297 + x9298;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9300 = x8964 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9301 = x9299 + x9300;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9302 = x8967 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9303 = x9301 + x9302;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9304 = x8970 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9305 = x9303 + x9304;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9306 = x8973 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9307 = x9305 + x9306;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9308 = x8976 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9309 = x9307 + x9308;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9310 = x8979 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9311 = x9309 + x9310;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9312 = x8985 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9313 = x8982 + x9312;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9314 = x8988 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9315 = x9313 + x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9316 = x8991 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9317 = x9315 + x9316;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9318 = x8994 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9319 = x9317 + x9318;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9320 = x8997 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9321 = x9319 + x9320;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9322 = x9000 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9323 = x9321 + x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9324 = x9003 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9325 = x9323 + x9324;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9326 = x9006 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9327 = x9325 + x9326;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9328 = x9009 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9329 = x9327 + x9328;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9330 = x9012 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9331 = x9329 + x9330;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9332 = x9015 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9333 = x9331 + x9332;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9334 = x9018 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9335 = x9333 + x9334;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9336 = x9021 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9337 = x9335 + x9336;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9338 = x9024 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9339 = x9337 + x9338;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9340 = x9027 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9341 = x9339 + x9340;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9342 = x8718 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9343 = x8717 + x9342;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9344 = x8719 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9345 = x9343 + x9344;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9346 = x8720 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9347 = x9345 + x9346;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9348 = x8721 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9349 = x9347 + x9348;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9350 = x8722 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9351 = x9349 + x9350;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9352 = x8723 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9353 = x9351 + x9352;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9354 = x8724 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9355 = x9353 + x9354;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9356 = x8725 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9357 = x9355 + x9356;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9358 = x8726 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9359 = x9357 + x9358;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9360 = x8727 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9361 = x9359 + x9360;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9362 = x8728 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9363 = x9361 + x9362;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9364 = x8729 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9365 = x9363 + x9364;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9366 = x8730 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9367 = x9365 + x9366;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9368 = x8731 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9369 = x9367 + x9368;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9370 = x8732 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9371 = x9369 + x9370;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9372 = x8734 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9373 = x8733 + x9372;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9374 = x8735 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9375 = x9373 + x9374;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9376 = x8736 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9377 = x9375 + x9376;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9378 = x8737 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9379 = x9377 + x9378;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9380 = x8738 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9381 = x9379 + x9380;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9382 = x8739 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9383 = x9381 + x9382;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9384 = x8740 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9385 = x9383 + x9384;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9386 = x8741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9387 = x9385 + x9386;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9388 = x8742 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9389 = x9387 + x9388;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9390 = x8743 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9391 = x9389 + x9390;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9392 = x8744 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9393 = x9391 + x9392;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9394 = x8745 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9395 = x9393 + x9394;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9396 = x8746 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9397 = x9395 + x9396;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9398 = x8747 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9399 = x9397 + x9398;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9400 = x8748 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9401 = x9399 + x9400;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9402 = x9123 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9403 = x9119 + x9402;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9404 = x9126 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9405 = x9403 + x9404;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9406 = x9129 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9407 = x9405 + x9406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9408 = x9132 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9409 = x9407 + x9408;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9410 = x9135 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9411 = x9409 + x9410;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9412 = x9138 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9413 = x9411 + x9412;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9414 = x9141 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9415 = x9413 + x9414;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9416 = x9144 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9417 = x9415 + x9416;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9418 = x9147 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9419 = x9417 + x9418;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9420 = x9150 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9421 = x9419 + x9420;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9422 = x9153 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9423 = x9421 + x9422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9424 = x9156 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9425 = x9423 + x9424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9426 = x9159 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9427 = x9425 + x9426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9428 = x9162 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9429 = x9427 + x9428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9430 = x9165 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9431 = x9429 + x9430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9432 = x9171 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9433 = x9168 + x9432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9434 = x9174 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9435 = x9433 + x9434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9436 = x9177 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9437 = x9435 + x9436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9438 = x9180 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9439 = x9437 + x9438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9440 = x9183 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9441 = x9439 + x9440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9442 = x9186 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9443 = x9441 + x9442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9444 = x9189 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9445 = x9443 + x9444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9446 = x9193 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9447 = x9445 + x9446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9448 = x9197 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9449 = x9447 + x9448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9450 = x9201 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9451 = x9449 + x9450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9452 = x9205 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9453 = x9451 + x9452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9454 = x9209 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9455 = x9453 + x9454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9456 = x9213 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9457 = x9455 + x9456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9458 = x9217 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9459 = x9457 + x9458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9460 = x9221 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9461 = x9459 + x9460;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9462 = x9371 + x9431;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9463 = x9401 + x9461;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9464 = x9311 + x9462;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9465 = x9341 + x9463;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9466 = x9251 + x9464;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9467 = x9281 + x9465;
      // loc("cirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9466);
        reg = x9466;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][158 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9467);
        reg = x9467;
      }
      if (x8639 != 0) {
        {
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9468 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9468 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9469 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9469 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9470 = x9469 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9471 = x9468 + x9470;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9472 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9472 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9473 = x9472 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9474 = x9471 + x9473;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9475 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9475 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9476 = x9475 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9477 = x9474 + x9476;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9478 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9478 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9479 = x9478 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9480 = x9477 + x9479;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9481 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9481 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9482 = x9481 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9483 = x9480 + x9482;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9484 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9484 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9485 = x9484 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9486 = x9483 + x9485;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9487 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9487 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9488 = x9487 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9489 = x9486 + x9488;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9490 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9491 = x9490 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9492 = x9489 + x9491;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9493 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9493 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9494 = x9493 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9495 = x9492 + x9494;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9496 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9497 = x9496 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9498 = x9495 + x9497;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9499 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9499 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9500 = x9499 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9501 = x9498 + x9500;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9502 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9503 = x9502 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9504 = x9501 + x9503;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9505 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9506 = x9505 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9507 = x9504 + x9506;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9508 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9509 = x9508 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9510 = x9507 + x9509;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9511 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9512 = x9511 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9513 = x9510 + x9512;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9514 = x94 - x9513;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9515 = x9514 * x9;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9515);
          reg = x9515;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9516 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9516 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9517 = Fp(x9516.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9517);
            reg = x9517;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9518 = Fp(x9516.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9519 = x9518 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9519);
            reg = x9519;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9520 = Fp(x9516.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9521 = x9520 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9521);
            reg = x9521;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9522 = Fp(x9516.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9523 = x9522 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9523);
            reg = x9523;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9524 = Fp(x9516.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9525 = x9524 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9525);
            reg = x9525;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9526 = Fp(x9516.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9527 = x9526 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9527);
            reg = x9527;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9528 = Fp(x9516.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9529 = x9528 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9529);
            reg = x9529;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9530 = Fp(x9516.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9531 = x9530 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9531);
            reg = x9531;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9532 = Fp(x9516.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9533 = x9532 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9533);
            reg = x9533;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9534 = Fp(x9516.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9535 = x9534 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9535);
            reg = x9535;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9536 = Fp(x9516.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9537 = x9536 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9537);
            reg = x9537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9538 = Fp(x9516.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9539 = x9538 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9539);
            reg = x9539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9540 = Fp(x9516.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9541 = x9540 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9541);
            reg = x9541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9542 = Fp(x9516.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9543 = x9542 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9543);
            reg = x9543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9544 = Fp(x9516.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9545 = x9544 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9545);
            reg = x9545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9546 = Fp(x9516.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9547 = x9546 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9547);
            reg = x9547;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9548 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9548 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9549 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9549 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9550 = x9549 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9551 = x9548 + x9550;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9552 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9552 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9553 = x9552 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9554 = x9551 + x9553;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9555 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9555 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9556 = x9555 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9557 = x9554 + x9556;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9558 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9558 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9559 = x9558 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9560 = x9557 + x9559;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9561 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9561 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9562 = x9561 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9563 = x9560 + x9562;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9564 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9564 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9565 = x9564 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9566 = x9563 + x9565;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9567 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9568 = x9567 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9569 = x9566 + x9568;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9570 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9571 = x9570 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9572 = x9569 + x9571;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9573 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9574 = x9573 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9575 = x9572 + x9574;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9576 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9577 = x9576 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9578 = x9575 + x9577;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9579 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9580 = x9579 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9581 = x9578 + x9580;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9582 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9583 = x9582 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9584 = x9581 + x9583;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9585 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9586 = x9585 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9587 = x9584 + x9586;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9588 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9589 = x9588 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9590 = x9587 + x9589;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9591 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9592 = x9591 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9593 = x9590 + x9592;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9594 = x9516 - x9593;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9595 = x9594 * x9;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9595);
          reg = x9595;
        }
      }
      if (x8640 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9596 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9596 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9597 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9597 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9598 = Fp(x9596.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9598);
            reg = x9598;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9599 = Fp(x9596.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9600 = x9599 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9600);
            reg = x9600;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9601 = Fp(x9596.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9602 = x9601 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9602);
            reg = x9602;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9603 = Fp(x9596.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9604 = x9603 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9604);
            reg = x9604;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9605 = Fp(x9596.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9606 = x9605 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9606);
            reg = x9606;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9607 = Fp(x9596.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9608 = x9607 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9608);
            reg = x9608;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9609 = Fp(x9596.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9610 = x9609 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9610);
            reg = x9610;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9611 = Fp(x9596.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9612 = x9611 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9612);
            reg = x9612;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9613 = Fp(x9596.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9614 = x9613 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9614);
            reg = x9614;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9615 = Fp(x9596.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9616 = x9615 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9616);
            reg = x9616;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9617 = Fp(x9596.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9618 = x9617 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9618);
            reg = x9618;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9619 = Fp(x9596.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9620 = x9619 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9620);
            reg = x9620;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9621 = Fp(x9596.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9622 = x9621 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9622);
            reg = x9622;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9623 = Fp(x9596.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9624 = x9623 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9624);
            reg = x9624;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9625 = Fp(x9596.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9626 = x9625 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9626);
            reg = x9626;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9627 = Fp(x9596.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9628 = x9627 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9628);
            reg = x9628;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9629 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9629 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9630 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9631 = x9630 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9632 = x9629 + x9631;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9633 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9634 = x9633 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9635 = x9632 + x9634;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9636 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9637 = x9636 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9638 = x9635 + x9637;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9639 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9640 = x9639 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9641 = x9638 + x9640;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9642 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9643 = x9642 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9644 = x9641 + x9643;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9645 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9646 = x9645 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9647 = x9644 + x9646;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9648 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9648 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9649 = x9648 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9650 = x9647 + x9649;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9651 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9652 = x9651 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9653 = x9650 + x9652;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9654 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9655 = x9654 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9656 = x9653 + x9655;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9657 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9658 = x9657 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9659 = x9656 + x9658;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9660 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9661 = x9660 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9662 = x9659 + x9661;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9663 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9664 = x9663 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9665 = x9662 + x9664;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9666 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9667 = x9666 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9668 = x9665 + x9667;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9669 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9670 = x9669 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9671 = x9668 + x9670;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9672 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9673 = x9672 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9674 = x9671 + x9673;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9675 = x9596 - x9674;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9676 = x9675 * x9;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9676);
          reg = x9676;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9677 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9677 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9678 = x9597 + x9677;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9679 = Fp(x9678.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9679);
            reg = x9679;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9680 = Fp(x9678.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9681 = x9680 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9681);
            reg = x9681;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9682 = Fp(x9678.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9683 = x9682 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9683);
            reg = x9683;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9684 = Fp(x9678.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9685 = x9684 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9685);
            reg = x9685;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9686 = Fp(x9678.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9687 = x9686 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9687);
            reg = x9687;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9688 = Fp(x9678.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9689 = x9688 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9689);
            reg = x9689;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9690 = Fp(x9678.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9691 = x9690 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9691);
            reg = x9691;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9692 = Fp(x9678.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9693 = x9692 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9693);
            reg = x9693;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9694 = Fp(x9678.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9695 = x9694 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9695);
            reg = x9695;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9696 = Fp(x9678.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9697 = x9696 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9697);
            reg = x9697;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9698 = Fp(x9678.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9699 = x9698 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9699);
            reg = x9699;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9700 = Fp(x9678.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9701 = x9700 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9701);
            reg = x9701;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9702 = Fp(x9678.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9703 = x9702 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9703);
            reg = x9703;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9704 = Fp(x9678.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9705 = x9704 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9705);
            reg = x9705;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9706 = Fp(x9678.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9707 = x9706 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9707);
            reg = x9707;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9708 = Fp(x9678.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9709 = x9708 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9709);
            reg = x9709;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9710 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9710 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9711 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9712 = x9711 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9713 = x9710 + x9712;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9714 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9715 = x9714 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9716 = x9713 + x9715;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9717 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9718 = x9717 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9719 = x9716 + x9718;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9720 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9721 = x9720 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9722 = x9719 + x9721;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9723 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9723 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9724 = x9723 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9725 = x9722 + x9724;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9726 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9726 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9727 = x9726 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9728 = x9725 + x9727;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9729 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9729 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9730 = x9729 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9731 = x9728 + x9730;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9732 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9732 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9733 = x9732 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9734 = x9731 + x9733;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9735 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9735 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9736 = x9735 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9737 = x9734 + x9736;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9738 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9738 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9739 = x9738 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9740 = x9737 + x9739;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9741 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9741 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9742 = x9741 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9743 = x9740 + x9742;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9744 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9744 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9745 = x9744 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9746 = x9743 + x9745;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9747 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9747 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9748 = x9747 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9749 = x9746 + x9748;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9750 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9750 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9751 = x9750 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9752 = x9749 + x9751;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9753 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9753 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9754 = x9753 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9755 = x9752 + x9754;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9756 = x9678 - x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9757 = x9756 * x9;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9757);
          reg = x9757;
        }
      }
      if (x8639 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9758 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9758 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9759 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9759 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9760 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9760 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9761 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9761 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9762 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9763 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9763 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9764 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9764 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9765 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9765 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9766 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9766 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9767 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9767 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9768 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9768 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9769 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9769 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9770 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9770 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9771 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9771 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9772 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9772 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9773 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9773 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9774 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9774 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9775 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9775 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9776 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9776 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9777 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9777 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9778 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9778 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9779 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9779 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9780 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9780 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9781 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9781 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9782 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9782 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9783 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9783 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9784 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9784 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9785 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9785 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9786 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9786 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9787 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9788 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9789 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9790 = x9759 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9791 = x9758 + x9790;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9792 = x9760 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9793 = x9791 + x9792;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9794 = x9761 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9795 = x9793 + x9794;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9796 = x9762 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9797 = x9795 + x9796;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9798 = x9763 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9799 = x9797 + x9798;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9800 = x9764 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9801 = x9799 + x9800;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9802 = x9765 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9803 = x9801 + x9802;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9804 = x9766 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9805 = x9803 + x9804;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9806 = x9767 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9807 = x9805 + x9806;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9808 = x9768 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9809 = x9807 + x9808;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9810 = x9769 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9811 = x9809 + x9810;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9812 = x9770 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9813 = x9811 + x9812;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9814 = x9771 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9815 = x9813 + x9814;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9816 = x9772 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9817 = x9815 + x9816;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9818 = x9773 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9819 = x9817 + x9818;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9820 = x9775 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9821 = x9774 + x9820;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9822 = x9776 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9823 = x9821 + x9822;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9824 = x9777 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9825 = x9823 + x9824;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9826 = x9778 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9827 = x9825 + x9826;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9828 = x9779 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9829 = x9827 + x9828;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9830 = x9780 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9831 = x9829 + x9830;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9832 = x9781 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9833 = x9831 + x9832;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9834 = x9782 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9835 = x9833 + x9834;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9836 = x9783 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9837 = x9835 + x9836;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9838 = x9784 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9839 = x9837 + x9838;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9840 = x9785 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9841 = x9839 + x9840;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9842 = x9786 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9843 = x9841 + x9842;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9844 = x9787 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9845 = x9843 + x9844;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9846 = x9788 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9847 = x9845 + x9846;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9848 = x9789 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9849 = x9847 + x9848;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9850 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9850 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9851 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9851 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9852 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9853 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9853 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9854 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9854 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9855 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9855 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9856 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9856 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9857 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9857 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9858 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9858 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9859 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9859 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9860 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9860 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9861 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9861 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9862 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9862 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9863 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9863 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9864 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9864 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9865 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9865 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9866 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9866 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9867 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9867 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9868 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9868 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9869 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9869 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9870 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9870 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9871 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9871 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9872 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9872 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9873 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x9873 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9874 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x9874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9875 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x9875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9876 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x9876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9877 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x9877 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9878 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x9878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9879 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x9879 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9880 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x9880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9881 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x9881 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9882 = x9851 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9883 = x9850 + x9882;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9884 = x9852 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9885 = x9883 + x9884;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9886 = x9853 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9887 = x9885 + x9886;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9888 = x9854 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9889 = x9887 + x9888;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9890 = x9855 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9891 = x9889 + x9890;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9892 = x9856 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9893 = x9891 + x9892;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9894 = x9857 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9895 = x9893 + x9894;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9896 = x9858 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9897 = x9895 + x9896;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9898 = x9859 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9899 = x9897 + x9898;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9900 = x9860 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9901 = x9899 + x9900;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9902 = x9861 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9903 = x9901 + x9902;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9904 = x9862 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9905 = x9903 + x9904;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9906 = x9863 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9907 = x9905 + x9906;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9908 = x9864 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9909 = x9907 + x9908;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9910 = x9865 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9911 = x9909 + x9910;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9912 = x9867 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9913 = x9866 + x9912;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9914 = x9868 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9915 = x9913 + x9914;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9916 = x9869 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9917 = x9915 + x9916;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9918 = x9870 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9919 = x9917 + x9918;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9920 = x9871 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9921 = x9919 + x9920;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9922 = x9872 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9923 = x9921 + x9922;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9924 = x9873 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9925 = x9923 + x9924;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9926 = x9874 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9927 = x9925 + x9926;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9928 = x9875 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9929 = x9927 + x9928;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9930 = x9876 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9931 = x9929 + x9930;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9932 = x9877 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9933 = x9931 + x9932;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9934 = x9878 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9935 = x9933 + x9934;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9936 = x9879 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9937 = x9935 + x9936;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9938 = x9880 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9939 = x9937 + x9938;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9940 = x9881 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9941 = x9939 + x9940;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9942 = x9819 + x9911;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9943 = x9849 + x9941;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9944 = Fp(x9942.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9944);
            reg = x9944;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9945 = Fp(x9942.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9946 = x9945 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9946);
            reg = x9946;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9947 = Fp(x9942.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9948 = x9947 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9948);
            reg = x9948;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9949 = Fp(x9942.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9950 = x9949 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9950);
            reg = x9950;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9951 = Fp(x9942.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9952 = x9951 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9952);
            reg = x9952;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9953 = Fp(x9942.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9954 = x9953 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9954);
            reg = x9954;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9955 = Fp(x9942.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9956 = x9955 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9956);
            reg = x9956;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9957 = Fp(x9942.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9958 = x9957 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9958);
            reg = x9958;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9959 = Fp(x9942.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9960 = x9959 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9960);
            reg = x9960;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9961 = Fp(x9942.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9962 = x9961 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9962);
            reg = x9962;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9963 = Fp(x9942.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9964 = x9963 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9964);
            reg = x9964;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9965 = Fp(x9942.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9966 = x9965 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9966);
            reg = x9966;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9967 = Fp(x9942.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9968 = x9967 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9968);
            reg = x9968;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9969 = Fp(x9942.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9970 = x9969 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9970);
            reg = x9970;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9971 = Fp(x9942.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9972 = x9971 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9972);
            reg = x9972;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9973 = Fp(x9942.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9974 = x9973 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9974);
            reg = x9974;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9975 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9976 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9977 = x9976 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9978 = x9975 + x9977;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9979 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9980 = x9979 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9981 = x9978 + x9980;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9982 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9982 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9983 = x9982 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9984 = x9981 + x9983;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9985 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9986 = x9985 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9987 = x9984 + x9986;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9988 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9988 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9989 = x9988 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9990 = x9987 + x9989;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9991 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9991 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9992 = x9991 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9993 = x9990 + x9992;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9994 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9994 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9995 = x9994 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9996 = x9993 + x9995;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x9997 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9997 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9998 = x9997 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9999 = x9996 + x9998;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10000 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x10000 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10001 = x10000 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10002 = x9999 + x10001;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10003 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x10003 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10004 = x10003 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10005 = x10002 + x10004;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10006 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x10006 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10007 = x10006 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10008 = x10005 + x10007;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10009 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x10009 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10010 = x10009 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10011 = x10008 + x10010;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10012 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x10012 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10013 = x10012 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10014 = x10011 + x10013;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10015 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x10015 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10016 = x10015 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10017 = x10014 + x10016;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10018 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x10018 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10019 = x10018 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10020 = x10017 + x10019;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10021 = x9942 - x10020;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10022 = x10021 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10023 = Fp(x10022.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10023);
            reg = x10023;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10024 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x10024 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10025 = x10022 - x10024;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10026 = x10025 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10027 = x95 - x10026;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10028 = x10026 * x10027;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10028 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10029 = x9943 + x10022;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10030 = Fp(x10029.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10030);
            reg = x10030;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10031 = Fp(x10029.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10032 = x10031 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10032);
            reg = x10032;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10033 = Fp(x10029.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10034 = x10033 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10034);
            reg = x10034;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10035 = Fp(x10029.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10036 = x10035 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10036);
            reg = x10036;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10037 = Fp(x10029.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10038 = x10037 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10038);
            reg = x10038;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10039 = Fp(x10029.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10040 = x10039 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10040);
            reg = x10040;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10041 = Fp(x10029.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10042 = x10041 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10042);
            reg = x10042;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10043 = Fp(x10029.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10044 = x10043 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10044);
            reg = x10044;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10045 = Fp(x10029.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10046 = x10045 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10046);
            reg = x10046;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10047 = Fp(x10029.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10048 = x10047 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10048);
            reg = x10048;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10049 = Fp(x10029.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10050 = x10049 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10050);
            reg = x10050;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10051 = Fp(x10029.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10052 = x10051 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10052);
            reg = x10052;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10053 = Fp(x10029.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10054 = x10053 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10054);
            reg = x10054;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10055 = Fp(x10029.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10056 = x10055 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10056);
            reg = x10056;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10057 = Fp(x10029.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10058 = x10057 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10058);
            reg = x10058;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10059 = Fp(x10029.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10060 = x10059 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10060);
            reg = x10060;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10061 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10062 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10063 = x10062 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10064 = x10061 + x10063;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10065 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10066 = x10065 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10067 = x10064 + x10066;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10068 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10069 = x10068 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10070 = x10067 + x10069;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10071 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10072 = x10071 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10073 = x10070 + x10072;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10074 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10075 = x10074 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10076 = x10073 + x10075;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10077 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10078 = x10077 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10079 = x10076 + x10078;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10080 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10080 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10081 = x10080 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10082 = x10079 + x10081;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10083 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10084 = x10083 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10085 = x10082 + x10084;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10086 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10086 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10087 = x10086 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10088 = x10085 + x10087;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10089 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10089 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10090 = x10089 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10091 = x10088 + x10090;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10092 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10092 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10093 = x10092 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10094 = x10091 + x10093;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10095 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10095 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10096 = x10095 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10097 = x10094 + x10096;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10098 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10098 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10099 = x10098 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10100 = x10097 + x10099;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10101 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10101 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10102 = x10101 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10103 = x10100 + x10102;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10104 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10104 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10105 = x10104 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10106 = x10103 + x10105;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10107 = x10029 - x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10108 = x10107 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10109 = Fp(x10108.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10109);
            reg = x10109;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10110 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x10110 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10111 = x10108 - x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10112 = x10111 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10113 = x95 - x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10114 = x10112 * x10113;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10114 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10115 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10115 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10116 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10116 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10117 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10117 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10118 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10118 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10119 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10119 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10120 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10120 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10121 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10121 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10122 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10122 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10123 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10123 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10124 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10124 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10125 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10125 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10126 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10126 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10127 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10127 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10128 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10128 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10129 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10129 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10130 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10131 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10131 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10132 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10133 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10133 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10134 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10134 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10135 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10135 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10136 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10136 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10137 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10137 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10138 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x10138 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10139 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x10139 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10140 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x10140 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10141 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x10141 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10142 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x10142 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10143 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x10143 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10144 = args[2][220 * steps + ((cycle - 4) & mask)];
        assert(x10144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10145 = args[2][221 * steps + ((cycle - 4) & mask)];
        assert(x10145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10146 = args[2][222 * steps + ((cycle - 4) & mask)];
        assert(x10146 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10147 = x10116 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10148 = x10115 + x10147;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10149 = x10117 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10150 = x10148 + x10149;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10151 = x10118 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10152 = x10150 + x10151;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10153 = x10119 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10154 = x10152 + x10153;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10155 = x10120 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10156 = x10154 + x10155;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10157 = x10121 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10158 = x10156 + x10157;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10159 = x10122 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10160 = x10158 + x10159;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10161 = x10123 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10162 = x10160 + x10161;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10163 = x10124 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10164 = x10162 + x10163;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10165 = x10125 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10166 = x10164 + x10165;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10167 = x10126 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10168 = x10166 + x10167;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10169 = x10127 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10170 = x10168 + x10169;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10171 = x10128 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10172 = x10170 + x10171;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10173 = x10129 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10174 = x10172 + x10173;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10175 = x10130 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10176 = x10174 + x10175;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10177 = x10132 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10178 = x10131 + x10177;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10179 = x10133 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10180 = x10178 + x10179;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10181 = x10134 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10182 = x10180 + x10181;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10183 = x10135 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10184 = x10182 + x10183;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10185 = x10136 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10186 = x10184 + x10185;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10187 = x10137 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10188 = x10186 + x10187;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10189 = x10138 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10190 = x10188 + x10189;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10191 = x10139 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10192 = x10190 + x10191;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10193 = x10140 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10194 = x10192 + x10193;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10195 = x10141 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10196 = x10194 + x10195;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10197 = x10142 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10198 = x10196 + x10197;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10199 = x10143 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10200 = x10198 + x10199;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10201 = x10144 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10202 = x10200 + x10201;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10203 = x10145 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10204 = x10202 + x10203;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10205 = x10146 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10206 = x10204 + x10205;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10207 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10207 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10208 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10208 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10209 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10209 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10210 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10210 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10211 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10211 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10212 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10212 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10213 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10213 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10214 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10214 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10215 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10215 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10216 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10216 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10217 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10217 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10218 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10218 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10219 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10219 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10220 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10220 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10221 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10221 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10222 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10222 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10223 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10223 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10224 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10224 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10225 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10225 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10226 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10226 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10227 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10227 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10228 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10228 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10229 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10229 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10230 = args[2][214 * steps + ((cycle - 68) & mask)];
        assert(x10230 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10231 = args[2][215 * steps + ((cycle - 68) & mask)];
        assert(x10231 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10232 = args[2][216 * steps + ((cycle - 68) & mask)];
        assert(x10232 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10233 = args[2][217 * steps + ((cycle - 68) & mask)];
        assert(x10233 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10234 = args[2][218 * steps + ((cycle - 68) & mask)];
        assert(x10234 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10235 = args[2][219 * steps + ((cycle - 68) & mask)];
        assert(x10235 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10236 = args[2][220 * steps + ((cycle - 68) & mask)];
        assert(x10236 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10237 = args[2][221 * steps + ((cycle - 68) & mask)];
        assert(x10237 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10238 = args[2][222 * steps + ((cycle - 68) & mask)];
        assert(x10238 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10239 = x10208 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10240 = x10207 + x10239;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10241 = x10209 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10242 = x10240 + x10241;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10243 = x10210 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10244 = x10242 + x10243;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10245 = x10211 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10246 = x10244 + x10245;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10247 = x10212 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10248 = x10246 + x10247;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10249 = x10213 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10250 = x10248 + x10249;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10251 = x10214 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10252 = x10250 + x10251;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10253 = x10215 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10254 = x10252 + x10253;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10255 = x10216 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10256 = x10254 + x10255;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10257 = x10217 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10258 = x10256 + x10257;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10259 = x10218 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10260 = x10258 + x10259;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10261 = x10219 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10262 = x10260 + x10261;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10263 = x10220 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10264 = x10262 + x10263;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10265 = x10221 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10266 = x10264 + x10265;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10267 = x10222 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10268 = x10266 + x10267;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10269 = x10224 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10270 = x10223 + x10269;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10271 = x10225 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10272 = x10270 + x10271;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10273 = x10226 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10274 = x10272 + x10273;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10275 = x10227 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10276 = x10274 + x10275;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10277 = x10228 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10278 = x10276 + x10277;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10279 = x10229 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10280 = x10278 + x10279;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10281 = x10230 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10282 = x10280 + x10281;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10283 = x10231 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10284 = x10282 + x10283;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10285 = x10232 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10286 = x10284 + x10285;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10287 = x10233 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10288 = x10286 + x10287;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10289 = x10234 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10290 = x10288 + x10289;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10291 = x10235 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10292 = x10290 + x10291;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10293 = x10236 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10294 = x10292 + x10293;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10295 = x10237 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10296 = x10294 + x10295;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10297 = x10238 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10298 = x10296 + x10297;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10299 = x10176 + x10268;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10300 = x10206 + x10298;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10301 = Fp(x10299.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10301);
            reg = x10301;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10302 = Fp(x10299.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10303 = x10302 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10303);
            reg = x10303;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10304 = Fp(x10299.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10305 = x10304 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10305);
            reg = x10305;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10306 = Fp(x10299.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10307 = x10306 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10307);
            reg = x10307;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10308 = Fp(x10299.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10309 = x10308 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10309);
            reg = x10309;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10310 = Fp(x10299.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10311 = x10310 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10311);
            reg = x10311;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10312 = Fp(x10299.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10313 = x10312 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10313);
            reg = x10313;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10314 = Fp(x10299.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10315 = x10314 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10315);
            reg = x10315;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10316 = Fp(x10299.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10317 = x10316 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10317);
            reg = x10317;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10318 = Fp(x10299.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10319 = x10318 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10319);
            reg = x10319;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10320 = Fp(x10299.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10321 = x10320 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10321);
            reg = x10321;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10322 = Fp(x10299.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10323 = x10322 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10323);
            reg = x10323;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10324 = Fp(x10299.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10325 = x10324 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10325);
            reg = x10325;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10326 = Fp(x10299.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10327 = x10326 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10327);
            reg = x10327;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10328 = Fp(x10299.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10329 = x10328 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10329);
            reg = x10329;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10330 = Fp(x10299.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10331 = x10330 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10331);
            reg = x10331;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10332 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10333 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10333 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10334 = x10333 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10335 = x10332 + x10334;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10336 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10336 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10337 = x10336 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10338 = x10335 + x10337;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10339 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10339 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10340 = x10339 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10341 = x10338 + x10340;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10342 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10342 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10343 = x10342 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10344 = x10341 + x10343;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10345 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10345 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10346 = x10345 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10347 = x10344 + x10346;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10348 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10349 = x10348 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10350 = x10347 + x10349;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10351 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10352 = x10351 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10353 = x10350 + x10352;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10354 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10355 = x10354 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10356 = x10353 + x10355;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10357 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10357 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10358 = x10357 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10359 = x10356 + x10358;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10360 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10360 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10361 = x10360 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10362 = x10359 + x10361;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10363 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10363 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10364 = x10363 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10365 = x10362 + x10364;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10366 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10366 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10367 = x10366 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10368 = x10365 + x10367;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10369 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10370 = x10369 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10371 = x10368 + x10370;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10372 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10372 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10373 = x10372 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10374 = x10371 + x10373;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10375 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10375 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10376 = x10375 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10377 = x10374 + x10376;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10378 = x10299 - x10377;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10379 = x10378 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10380 = Fp(x10379.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10380);
            reg = x10380;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10381 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x10381 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10382 = x10379 - x10381;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10383 = x10382 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10384 = x95 - x10383;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10385 = x10383 * x10384;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10385 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10386 = x10300 + x10379;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10387 = Fp(x10386.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10387);
            reg = x10387;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10388 = Fp(x10386.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10389 = x10388 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10389);
            reg = x10389;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10390 = Fp(x10386.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10391 = x10390 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10391);
            reg = x10391;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10392 = Fp(x10386.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10393 = x10392 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10393);
            reg = x10393;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10394 = Fp(x10386.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10395 = x10394 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10395);
            reg = x10395;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10396 = Fp(x10386.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10397 = x10396 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10397);
            reg = x10397;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10398 = Fp(x10386.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10399 = x10398 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10399);
            reg = x10399;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10400 = Fp(x10386.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10401 = x10400 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10401);
            reg = x10401;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10402 = Fp(x10386.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10403 = x10402 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10403);
            reg = x10403;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10404 = Fp(x10386.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10405 = x10404 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10405);
            reg = x10405;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10406 = Fp(x10386.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10407 = x10406 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10407);
            reg = x10407;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10408 = Fp(x10386.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10409 = x10408 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10409);
            reg = x10409;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10410 = Fp(x10386.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10411 = x10410 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10411);
            reg = x10411;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10412 = Fp(x10386.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10413 = x10412 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10413);
            reg = x10413;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10414 = Fp(x10386.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10415 = x10414 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10415);
            reg = x10415;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10416 = Fp(x10386.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10417 = x10416 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10417);
            reg = x10417;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10418 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10418 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10419 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10420 = x10419 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10421 = x10418 + x10420;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10422 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10423 = x10422 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10424 = x10421 + x10423;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10425 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10426 = x10425 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10427 = x10424 + x10426;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10428 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10429 = x10428 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10430 = x10427 + x10429;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10431 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10432 = x10431 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10433 = x10430 + x10432;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10434 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10434 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10435 = x10434 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10436 = x10433 + x10435;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10437 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x10437 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10438 = x10437 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10439 = x10436 + x10438;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10440 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x10440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10441 = x10440 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10442 = x10439 + x10441;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10443 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x10443 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10444 = x10443 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10445 = x10442 + x10444;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10446 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x10446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10447 = x10446 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10448 = x10445 + x10447;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10449 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x10449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10450 = x10449 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10451 = x10448 + x10450;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10452 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x10452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10453 = x10452 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10454 = x10451 + x10453;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10455 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x10455 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10456 = x10455 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10457 = x10454 + x10456;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10458 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x10458 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10459 = x10458 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10460 = x10457 + x10459;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10461 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x10461 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10462 = x10461 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10463 = x10460 + x10462;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10464 = x10386 - x10463;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10465 = x10464 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10466 = Fp(x10465.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10466);
            reg = x10466;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x10467 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x10467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10468 = x10465 - x10467;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10469 = x10468 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10470 = x95 - x10469;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10471 = x10469 * x10470;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10471 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10472 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x10472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":402:17)
      auto x10473 = x95 - x10472;
      if (x8648 != 0) {
        if (x10472 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10474 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x10474 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:26)
          auto x10475 = x10474 + x8631;
          {
            host_args.at(0) = x10475;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10476 = host_outs.at(0);
            auto x10477 = host_outs.at(1);
            auto x10478 = host_outs.at(2);
            auto x10479 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10476);
              reg = x10476;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10477);
              reg = x10477;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10478);
              reg = x10478;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10479);
              reg = x10479;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10480 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10480 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10481 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10481 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10482 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10482 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10483 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10483 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10475);
            reg = x10475;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10480);
            reg = x10480;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10481);
            reg = x10481;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10482);
            reg = x10482;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10483);
            reg = x10483;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10484 = x10474 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10485 = x10484 + x8631;
          {
            host_args.at(0) = x10485;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10486 = host_outs.at(0);
            auto x10487 = host_outs.at(1);
            auto x10488 = host_outs.at(2);
            auto x10489 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10486);
              reg = x10486;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10487);
              reg = x10487;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10488);
              reg = x10488;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10489);
              reg = x10489;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10490 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10490 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10491 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10491 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10492 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10492 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10493 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x10493 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10485);
            reg = x10485;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10490);
            reg = x10490;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10491);
            reg = x10491;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10492);
            reg = x10492;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10493);
            reg = x10493;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
          auto x10494 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x10494 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":408:39)
          auto x10495 = x10494 * x78;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10496 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10496 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10497 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10497 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10498 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10498 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10499 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10499 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10500 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10500 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10501 = x10500 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10502 = x10496 + x10501;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10503 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10503 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10504 = x10503 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10505 = x10497 + x10504;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10506 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10506 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10507 = x10506 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10508 = x10498 + x10507;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10509 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10509 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10510 = x10509 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10511 = x10499 + x10510;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10512 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10512 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10513 = x10512 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10514 = x10502 + x10513;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10515 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10515 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10516 = x10515 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10517 = x10505 + x10516;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10518 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10518 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10519 = x10518 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10520 = x10508 + x10519;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10521 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10521 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10522 = x10521 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10523 = x10511 + x10522;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10524 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10524 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10525 = x10524 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10526 = x10514 + x10525;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10527 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10527 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10528 = x10527 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10529 = x10517 + x10528;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10530 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10530 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10531 = x10530 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10532 = x10520 + x10531;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10533 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10533 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10534 = x10533 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10535 = x10523 + x10534;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10536 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10536 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10537 = x10536 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10538 = x10526 + x10537;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10539 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10539 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10540 = x10539 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10541 = x10529 + x10540;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10542 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10542 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10543 = x10542 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10544 = x10532 + x10543;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10545 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10545 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10546 = x10545 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10547 = x10535 + x10546;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10548 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10548 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10549 = x10548 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10550 = x10538 + x10549;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10551 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10551 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10552 = x10551 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10553 = x10541 + x10552;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10554 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10554 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10555 = x10554 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10556 = x10544 + x10555;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10557 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10557 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10558 = x10557 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10559 = x10547 + x10558;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10560 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10560 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10561 = x10560 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10562 = x10550 + x10561;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10563 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10564 = x10563 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10565 = x10553 + x10564;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10566 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10566 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10567 = x10566 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10568 = x10556 + x10567;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10569 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10569 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10570 = x10569 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10571 = x10559 + x10570;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10572 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10572 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10573 = x10572 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10574 = x10562 + x10573;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10575 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10575 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10576 = x10575 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10577 = x10565 + x10576;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10578 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10578 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10579 = x10578 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10580 = x10568 + x10579;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10581 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10581 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10582 = x10581 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10583 = x10571 + x10582;
          host_args.at(0) = x10495;
          host_args.at(1) = x10480;
          host_args.at(2) = x10481;
          host_args.at(3) = x10482;
          host_args.at(4) = x10483;
          host_args.at(5) = x10583;
          host_args.at(6) = x10580;
          host_args.at(7) = x10577;
          host_args.at(8) = x10574;
          host(ctx, "log", "  io0: [%10x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
          auto x10584 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x10584 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":409:39)
          auto x10585 = x10584 * x78;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10586 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10586 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10587 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10587 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10588 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10588 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10589 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10589 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10590 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10590 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10591 = x10590 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10592 = x10586 + x10591;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10593 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10593 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10594 = x10593 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10595 = x10587 + x10594;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10596 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10596 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10597 = x10596 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10598 = x10588 + x10597;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10599 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10599 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10600 = x10599 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10601 = x10589 + x10600;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10602 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10602 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10603 = x10602 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10604 = x10592 + x10603;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10605 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10605 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10606 = x10605 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10607 = x10595 + x10606;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10608 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10608 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10609 = x10608 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10610 = x10598 + x10609;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10611 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10611 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10612 = x10611 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10613 = x10601 + x10612;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10614 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10614 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10615 = x10614 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10616 = x10604 + x10615;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10617 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10617 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10618 = x10617 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10619 = x10607 + x10618;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10620 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10620 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10621 = x10620 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10622 = x10610 + x10621;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10623 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10623 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10624 = x10623 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10625 = x10613 + x10624;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10626 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10626 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10627 = x10626 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10628 = x10616 + x10627;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10629 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10629 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10630 = x10629 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10631 = x10619 + x10630;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10632 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10632 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10633 = x10632 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10634 = x10622 + x10633;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10635 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10635 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10636 = x10635 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10637 = x10625 + x10636;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10638 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10638 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10639 = x10638 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10640 = x10628 + x10639;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10641 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10641 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10642 = x10641 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10643 = x10631 + x10642;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10644 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10644 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10645 = x10644 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10646 = x10634 + x10645;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10647 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10647 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10648 = x10647 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10649 = x10637 + x10648;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10650 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10650 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10651 = x10650 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10652 = x10640 + x10651;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10653 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10653 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10654 = x10653 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10655 = x10643 + x10654;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10656 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10656 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10657 = x10656 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10658 = x10646 + x10657;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10659 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10659 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10660 = x10659 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10661 = x10649 + x10660;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10662 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10662 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10663 = x10662 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10664 = x10652 + x10663;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10665 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10665 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10666 = x10665 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10667 = x10655 + x10666;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10668 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10668 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10669 = x10668 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10670 = x10658 + x10669;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10671 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x10671 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10672 = x10671 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10673 = x10661 + x10672;
          host_args.at(0) = x10585;
          host_args.at(1) = x10490;
          host_args.at(2) = x10491;
          host_args.at(3) = x10492;
          host_args.at(4) = x10493;
          host_args.at(5) = x10673;
          host_args.at(6) = x10670;
          host_args.at(7) = x10667;
          host_args.at(8) = x10664;
          host(ctx, "log", "  io1: [%10x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10674 = x10481 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10675 = x10480 + x10674;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10676 = x10482 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10677 = x10675 + x10676;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10678 = x10483 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10679 = x10677 + x10678;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10680 = x10580 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10681 = x10583 + x10680;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10682 = x10577 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10683 = x10681 + x10682;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10684 = x10574 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10685 = x10683 + x10684;
          // loc("cirgen/circuit/rv32im/sha.cpp":410:10)
          auto x10686 = x10679 - x10685;
          // loc("cirgen/circuit/rv32im/sha.cpp":410:10)
          if (x10686 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:410");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10687 = x10491 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10688 = x10490 + x10687;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10689 = x10492 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10690 = x10688 + x10689;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10691 = x10493 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10692 = x10690 + x10691;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10693 = x10670 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10694 = x10673 + x10693;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10695 = x10667 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10696 = x10694 + x10695;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10697 = x10664 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10698 = x10696 + x10697;
          // loc("cirgen/circuit/rv32im/sha.cpp":411:10)
          auto x10699 = x10692 - x10698;
          // loc("cirgen/circuit/rv32im/sha.cpp":411:10)
          if (x10699 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:411");
        }
        if (x10473 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10700 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":414:27)
          auto x10701 = x10700 + x8631;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10702 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10702 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10703 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10704 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10704 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10705 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10705 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10706 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10707 = x10706 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10708 = x10702 + x10707;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10709 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10710 = x10709 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10711 = x10703 + x10710;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10712 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10713 = x10712 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10714 = x10704 + x10713;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10715 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10715 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10716 = x10715 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10717 = x10705 + x10716;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10718 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10718 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10719 = x10718 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10720 = x10708 + x10719;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10721 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10721 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10722 = x10721 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10723 = x10711 + x10722;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10724 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10725 = x10724 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10726 = x10714 + x10725;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10727 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10727 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10728 = x10727 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10729 = x10717 + x10728;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10730 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10730 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10731 = x10730 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10732 = x10720 + x10731;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10733 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10733 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10734 = x10733 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10735 = x10723 + x10734;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10736 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10736 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10737 = x10736 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10738 = x10726 + x10737;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10739 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10739 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10740 = x10739 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10741 = x10729 + x10740;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10742 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10742 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10743 = x10742 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10744 = x10732 + x10743;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10745 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10745 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10746 = x10745 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10747 = x10735 + x10746;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10748 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10748 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10749 = x10748 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10750 = x10738 + x10749;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10751 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10751 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10752 = x10751 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10753 = x10741 + x10752;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10754 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10754 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10755 = x10754 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10756 = x10744 + x10755;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10757 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10757 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10758 = x10757 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10759 = x10747 + x10758;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10760 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10760 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10761 = x10760 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10762 = x10750 + x10761;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10763 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10763 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10764 = x10763 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10765 = x10753 + x10764;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10766 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10766 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10767 = x10766 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10768 = x10756 + x10767;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10769 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10769 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10770 = x10769 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10771 = x10759 + x10770;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10772 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10772 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10773 = x10772 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10774 = x10762 + x10773;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10775 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10775 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10776 = x10775 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10777 = x10765 + x10776;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10778 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10778 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10779 = x10778 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10780 = x10768 + x10779;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10781 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10781 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10782 = x10781 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10783 = x10771 + x10782;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10784 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10784 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10785 = x10784 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10786 = x10774 + x10785;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10787 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10787 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10788 = x10787 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10789 = x10777 + x10788;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10789);
            reg = x10789;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10786);
            reg = x10786;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10783);
            reg = x10783;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10780);
            reg = x10780;
          }
          {
            host_args.at(0) = x10701;
            host_args.at(1) = x10789;
            host_args.at(2) = x10786;
            host_args.at(3) = x10783;
            host_args.at(4) = x10780;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10790 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10790 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10791 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10791 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10792 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10792 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10793 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10793 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10701);
            reg = x10701;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10790);
            reg = x10790;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10791);
            reg = x10791;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10792);
            reg = x10792;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10793);
            reg = x10793;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10794 = x10700 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10795 = x10794 + x8631;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10796 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10796 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10797 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10797 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10798 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10798 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10799 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10799 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10800 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10800 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10801 = x10800 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10802 = x10796 + x10801;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10803 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10803 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10804 = x10803 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10805 = x10797 + x10804;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10806 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10806 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10807 = x10806 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10808 = x10798 + x10807;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10809 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10809 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10810 = x10809 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10811 = x10799 + x10810;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10812 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10812 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10813 = x10812 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10814 = x10802 + x10813;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10815 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10815 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10816 = x10815 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10817 = x10805 + x10816;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10818 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10818 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10819 = x10818 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10820 = x10808 + x10819;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10821 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10821 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10822 = x10821 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10823 = x10811 + x10822;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10824 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10824 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10825 = x10824 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10826 = x10814 + x10825;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10827 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10827 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10828 = x10827 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10829 = x10817 + x10828;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10830 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10830 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10831 = x10830 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10832 = x10820 + x10831;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10833 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10833 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10834 = x10833 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10835 = x10823 + x10834;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10836 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10836 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10837 = x10836 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10838 = x10826 + x10837;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10839 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10839 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10840 = x10839 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10841 = x10829 + x10840;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10842 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10842 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10843 = x10842 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10844 = x10832 + x10843;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10845 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10845 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10846 = x10845 * x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10847 = x10835 + x10846;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10848 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10848 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10849 = x10848 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10850 = x10838 + x10849;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10851 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10851 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10852 = x10851 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10853 = x10841 + x10852;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10854 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10854 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10855 = x10854 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10856 = x10844 + x10855;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10857 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10857 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10858 = x10857 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10859 = x10847 + x10858;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10860 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10860 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10861 = x10860 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10862 = x10850 + x10861;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10863 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10863 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10864 = x10863 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10865 = x10853 + x10864;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10866 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10866 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10867 = x10866 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10868 = x10856 + x10867;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10869 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10869 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10870 = x10869 * x54;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10871 = x10859 + x10870;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10872 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10872 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10873 = x10872 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10874 = x10862 + x10873;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10875 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10875 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10876 = x10875 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10877 = x10865 + x10876;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10878 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10878 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10879 = x10878 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10880 = x10868 + x10879;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10881 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x10881 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10882 = x10881 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10883 = x10871 + x10882;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10883);
            reg = x10883;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10880);
            reg = x10880;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10877);
            reg = x10877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10874);
            reg = x10874;
          }
          {
            host_args.at(0) = x10795;
            host_args.at(1) = x10883;
            host_args.at(2) = x10880;
            host_args.at(3) = x10877;
            host_args.at(4) = x10874;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10884 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10884 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10885 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10885 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10886 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10886 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x10887 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x10887 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10795);
            reg = x10795;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10884);
            reg = x10884;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10885);
            reg = x10885;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10886);
            reg = x10886;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10887);
            reg = x10887;
          }
        }
      }
      if (x8649 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        if (x8639 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10888 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10889 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10890 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10891 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10892 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10893 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10894 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10895 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10896 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10897 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10898 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10899 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10900 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10901 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10902 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10903 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10904 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10905 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10906 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10907 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10908 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10909 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10910 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10911 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10912 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10913 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10914 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10915 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10916 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10917 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10918 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10919 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10920 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10921 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10922 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10923 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10924 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10925 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10926 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10927 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10928 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10929 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10930 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10931 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10932 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10933 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10934 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10935 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10936 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10937 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10938 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10939 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10940 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10941 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10942 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10943 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10944 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10945 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10946 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10947 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10948 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10949 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10950 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10951 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10952 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10953 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10954 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10955 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10956 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10957 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10958 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10959 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10960 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10961 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10962 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10963 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10964 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10965 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10966 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10967 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10968 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10969 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10970 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10971 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10972 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10973 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10974 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10975 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10976 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10977 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10978 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10979 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10980 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10981 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10982 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10983 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10984 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10985 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10986 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10987 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10988 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10989 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10990 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10991 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10992 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10993 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10994 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10995 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10996 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10997 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10998 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x10999 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11000 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11001 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11002 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11003 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11004 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11005 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11006 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11007 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11008 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11009 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11010 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11011 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11012 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11013 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11014 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11015 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11016 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11017 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11018 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11019 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x11019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11020 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x11020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11021 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x11021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11022 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x11022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11023 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x11023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11024 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x11024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11025 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x11025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11026 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x11026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11027 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x11027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11028 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x11028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11029 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x11029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11030 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x11030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11031 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x11031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11032 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x11032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11033 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x11033 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11034 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x11034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11035 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x11035 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11036 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x11036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11037 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x11037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11038 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x11038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11039 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x11039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11040 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x11040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11041 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x11041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11042 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x11042 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11043 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x11043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11044 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x11044 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11045 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x11045 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11046 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x11046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11047 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x11047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11048 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x11048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11049 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x11049 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11050 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x11050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11051 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x11051 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11052 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x11052 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11053 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x11053 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11054 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x11054 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11055 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x11055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11056 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x11056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11057 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x11057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11058 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x11058 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11059 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x11059 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11060 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x11060 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11061 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x11061 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11062 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x11062 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11063 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x11063 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11064 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x11064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11065 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x11065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11066 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x11066 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11067 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x11067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11068 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x11068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11069 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x11069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11070 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x11070 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11071 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x11071 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11072 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x11072 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11073 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x11073 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11074 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x11074 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11075 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x11075 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11076 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x11076 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11077 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x11077 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11078 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x11078 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11079 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x11079 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11080 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x11080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11081 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x11081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11082 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x11082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11083 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x11083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11084 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x11084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11085 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x11085 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11086 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x11086 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11087 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x11087 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11088 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x11088 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11089 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x11089 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11090 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x11090 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11091 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x11091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11092 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x11092 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11093 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x11093 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11094 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x11094 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11095 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x11095 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11096 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x11096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11097 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x11097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11098 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x11098 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11099 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x11099 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11100 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x11100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11101 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x11101 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11102 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x11102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11103 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x11103 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11104 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x11104 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11105 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x11105 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11106 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x11106 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11107 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x11107 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11108 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x11108 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11109 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x11109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11110 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x11110 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11111 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x11111 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11112 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x11112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11113 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x11113 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11114 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x11114 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11115 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x11115 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11116 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x11116 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11117 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x11117 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11118 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x11118 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11119 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x11119 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11120 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x11120 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11121 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x11121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11122 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x11122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11123 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x11123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11124 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x11124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11125 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x11125 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11126 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x11126 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11127 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x11127 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11128 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x11128 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11129 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x11129 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11130 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11131 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11131 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11132 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11132 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11133 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11133 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11134 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11134 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11135 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x11135 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11136 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x11136 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11137 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x11137 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11138 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x11138 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11139 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x11139 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11140 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x11140 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11141 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x11141 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11142 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x11142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11143 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x11143 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11144 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x11144 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11145 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x11145 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11146 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x11146 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11147 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11147 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11148 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11148 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11149 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11149 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11150 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11150 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11151 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11151 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11152 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11152 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11153 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11153 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11154 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11154 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11155 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11155 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11156 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11156 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11157 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11157 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11158 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11158 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11159 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11159 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11160 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11160 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11161 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11161 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11162 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11162 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11163 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11163 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11164 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11164 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11165 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11165 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11166 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11166 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11167 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11167 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11168 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11168 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11169 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11169 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11170 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11170 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11171 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11171 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11172 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11172 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11173 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11173 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11174 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11174 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11175 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11175 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11176 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x11176 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11177 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x11177 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11178 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x11178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x11179 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x11179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11180 = x11177 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11181 = x11176 + x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11182 = x11179 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11183 = x11178 + x11182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x10901 + x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11185 = x10901 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11186 = x11185 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x11184 - x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x10902 + x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11189 = x10902 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11190 = x11189 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x11188 - x11190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11192 = x10903 + x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11193 = x10903 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11194 = x11193 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11195 = x11192 - x11194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x10904 + x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11197 = x10904 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11198 = x11197 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x11196 - x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x10905 + x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11201 = x10905 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11202 = x11201 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x11200 - x11202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11204 = x10906 + x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11205 = x10906 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11206 = x11205 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11207 = x11204 - x11206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x10907 + x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11209 = x10907 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11210 = x11209 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x11208 - x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x10908 + x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11213 = x10908 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11214 = x11213 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x11212 - x11214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11216 = x10909 + x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11217 = x10909 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11218 = x11217 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11219 = x11216 - x11218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x10910 + x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11221 = x10910 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11222 = x11221 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x11220 - x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x10911 + x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11225 = x10911 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11226 = x11225 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x11224 - x11226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11228 = x10912 + x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11229 = x10912 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11230 = x11229 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11231 = x11228 - x11230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11232 = x10913 + x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11233 = x10913 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11234 = x11233 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x11232 - x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x10914 + x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11237 = x10914 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11238 = x11237 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x11236 - x11238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11240 = x10915 + x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11241 = x10915 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11242 = x11241 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11243 = x11240 - x11242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11244 = x10916 + x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11245 = x10916 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11246 = x11245 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11247 = x11244 - x11246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x10917 + x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11249 = x10917 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11250 = x11249 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x11248 - x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11252 = x10918 + x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11253 = x10918 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11254 = x11253 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11255 = x11252 - x11254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11256 = x10919 + x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11257 = x10919 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11258 = x11257 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11259 = x11256 - x11258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x10888 + x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11261 = x10888 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11262 = x11261 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x11260 - x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11264 = x10889 + x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11265 = x10889 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11266 = x11265 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11267 = x11264 - x11266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11268 = x10890 + x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11269 = x10890 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11270 = x11269 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11271 = x11268 - x11270;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11272 = x10891 + x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11273 = x10891 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11274 = x11273 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11275 = x11272 - x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11276 = x10892 + x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11277 = x10892 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11278 = x11277 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11279 = x11276 - x11278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11280 = x10893 + x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11281 = x10893 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11282 = x11281 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11283 = x11280 - x11282;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11284 = x10894 + x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11285 = x10894 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11286 = x11285 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11287 = x11284 - x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11288 = x10895 + x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11289 = x10895 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11290 = x11289 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11291 = x11288 - x11290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11292 = x10896 + x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11293 = x10896 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11294 = x11293 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11295 = x11292 - x11294;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11296 = x10897 + x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11297 = x10897 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11298 = x11297 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11299 = x11296 - x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11300 = x10898 + x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11301 = x10898 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11302 = x11301 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11303 = x11300 - x11302;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11304 = x10899 + x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11305 = x10899 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11306 = x11305 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11307 = x11304 - x11306;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11308 = x10900 + x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11309 = x10900 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11310 = x11309 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11311 = x11308 - x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11312 = x10890 + x11187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11313 = x11269 * x11187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11314 = x11312 - x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11315 = x10891 + x11191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11316 = x11273 * x11191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x11315 - x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11318 = x10892 + x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x11277 * x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11320 = x11318 - x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x10893 + x11199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11322 = x11281 * x11199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11323 = x11321 - x11322;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11324 = x10894 + x11203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11325 = x11285 * x11203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11326 = x11324 - x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11327 = x10895 + x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11328 = x11289 * x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x11327 - x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11330 = x10896 + x11211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x11293 * x11211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11332 = x11330 - x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x10897 + x11215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11334 = x11297 * x11215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11335 = x11333 - x11334;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11336 = x10898 + x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11337 = x11301 * x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11338 = x11336 - x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11339 = x10899 + x11223;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11340 = x11305 * x11223;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x11339 - x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11342 = x10900 + x11227;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x11309 * x11227;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11344 = x11342 - x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x10901 + x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11346 = x11185 * x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11347 = x11345 - x11346;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11348 = x10902 + x11235;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11349 = x11189 * x11235;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11350 = x11348 - x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11351 = x10903 + x11239;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11352 = x11193 * x11239;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11353 = x11351 - x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11354 = x10904 + x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11355 = x11197 * x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11356 = x11354 - x11355;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11357 = x10905 + x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11358 = x11201 * x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11359 = x11357 - x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11360 = x10906 + x11251;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11361 = x11205 * x11251;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11362 = x11360 - x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11363 = x10907 + x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11364 = x11209 * x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11365 = x11363 - x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11366 = x10908 + x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11367 = x11213 * x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11368 = x11366 - x11367;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11369 = x10909 + x11263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11370 = x11217 * x11263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11371 = x11369 - x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11372 = x10910 + x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11373 = x11221 * x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11374 = x11372 - x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11375 = x10911 + x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11376 = x11225 * x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11377 = x11375 - x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11378 = x10912 + x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11379 = x11229 * x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11380 = x11378 - x11379;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x10913 + x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11382 = x11233 * x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11383 = x11381 - x11382;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x10914 + x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11385 = x11237 * x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11386 = x11384 - x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x10915 + x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11388 = x11241 * x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11389 = x11387 - x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11390 = x10916 + x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11391 = x11245 * x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11392 = x11390 - x11391;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x10917 + x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11394 = x11249 * x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11395 = x11393 - x11394;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x10918 + x11299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11397 = x11253 * x11299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11398 = x11396 - x11397;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x10919 + x11303;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11400 = x11257 * x11303;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11401 = x11399 - x11400;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x10888 + x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11403 = x11261 * x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11404 = x11402 - x11403;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x10889 + x11311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11406 = x11265 * x11311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11407 = x11405 - x11406;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11027 + x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11409 = x11027 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x11409 * x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x11408 - x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x11028 + x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11028 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11414 = x11413 * x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x11412 - x11414;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11416 = x11029 + x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11417 = x11029 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11418 = x11417 * x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11419 = x11416 - x11418;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11030 + x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11421 = x11030 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x11421 * x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x11420 - x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x11031 + x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11031 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11426 = x11425 * x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x11424 - x11426;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11428 = x11032 + x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11429 = x11032 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11430 = x11429 * x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11431 = x11428 - x11430;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11033 + x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11433 = x11033 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x11433 * x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x11432 - x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x11034 + x11016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11034 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11438 = x11437 * x11016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x11436 - x11438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11440 = x11035 + x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11441 = x11035 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11442 = x11441 * x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11443 = x11440 - x11442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11036 + x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11445 = x11036 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x11445 * x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x11444 - x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x11037 + x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11037 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11450 = x11449 * x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x11448 - x11450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11452 = x11038 + x11020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11453 = x11038 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11454 = x11453 * x11020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11455 = x11452 - x11454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x11039 + x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11457 = x11039 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11458 = x11457 * x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x11456 - x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x11040 + x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11040 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11462 = x11461 * x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x11460 - x11462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11464 = x11041 + x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11465 = x11041 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11466 = x11465 * x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11467 = x11464 - x11466;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x11042 + x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11469 = x11042 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11470 = x11469 * x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11471 = x11468 - x11470;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x11043 + x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11473 = x11043 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11474 = x11473 * x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x11472 - x11474;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11476 = x11044 + x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11477 = x11044 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11478 = x11477 * x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11479 = x11476 - x11478;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11480 = x11045 + x11027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11481 = x11045 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11482 = x11481 * x11027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11483 = x11480 - x11482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x11046 + x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11485 = x11046 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11486 = x11485 * x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x11484 - x11486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11488 = x11047 + x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11489 = x11047 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11490 = x11489 * x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11491 = x11488 - x11490;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11492 = x11016 + x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11493 = x11016 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11494 = x11493 * x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11495 = x11492 - x11494;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11496 = x11017 + x11031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11497 = x11017 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11498 = x11497 * x11031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11499 = x11496 - x11498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11500 = x11018 + x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11501 = x11018 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11502 = x11501 * x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11503 = x11500 - x11502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11504 = x11019 + x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11505 = x11019 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11506 = x11505 * x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11507 = x11504 - x11506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11508 = x11020 + x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11509 = x11020 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11510 = x11509 * x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11511 = x11508 - x11510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11512 = x11021 + x11035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11513 = x11021 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11514 = x11513 * x11035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11515 = x11512 - x11514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11516 = x11022 + x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11517 = x11022 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11518 = x11517 * x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11519 = x11516 - x11518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11520 = x11023 + x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11521 = x11023 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11522 = x11521 * x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11523 = x11520 - x11522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11524 = x11024 + x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11525 = x11024 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11526 = x11525 * x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11527 = x11524 - x11526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11528 = x11025 + x11039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11529 = x11025 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11530 = x11529 * x11039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11531 = x11528 - x11530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11532 = x11026 + x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11533 = x11026 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11534 = x11533 * x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11535 = x11532 - x11534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11536 = x11022 + x11411;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11537 = x11517 * x11411;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11538 = x11536 - x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11539 = x11023 + x11415;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11540 = x11521 * x11415;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11541 = x11539 - x11540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11542 = x11024 + x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11543 = x11525 * x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11544 = x11542 - x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11545 = x11025 + x11423;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11546 = x11529 * x11423;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11547 = x11545 - x11546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11548 = x11026 + x11427;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11549 = x11533 * x11427;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11550 = x11548 - x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11551 = x11027 + x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11552 = x11409 * x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11553 = x11551 - x11552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11554 = x11028 + x11435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11555 = x11413 * x11435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11556 = x11554 - x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11557 = x11029 + x11439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11558 = x11417 * x11439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11559 = x11557 - x11558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11560 = x11030 + x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11561 = x11421 * x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11562 = x11560 - x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11563 = x11031 + x11447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11564 = x11425 * x11447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11565 = x11563 - x11564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11566 = x11032 + x11451;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11567 = x11429 * x11451;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11568 = x11566 - x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11569 = x11033 + x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11570 = x11433 * x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11571 = x11569 - x11570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11572 = x11034 + x11459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11573 = x11437 * x11459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11574 = x11572 - x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11575 = x11035 + x11463;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11576 = x11441 * x11463;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11577 = x11575 - x11576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11578 = x11036 + x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11579 = x11445 * x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11580 = x11578 - x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11581 = x11037 + x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11582 = x11449 * x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11583 = x11581 - x11582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11584 = x11038 + x11475;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11585 = x11453 * x11475;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11586 = x11584 - x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11587 = x11039 + x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11588 = x11457 * x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11589 = x11587 - x11588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11590 = x11040 + x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11591 = x11461 * x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11592 = x11590 - x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11593 = x11041 + x11487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11594 = x11465 * x11487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11595 = x11593 - x11594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11596 = x11042 + x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11597 = x11469 * x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11598 = x11596 - x11597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11599 = x11043 + x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11600 = x11473 * x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11601 = x11599 - x11600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11602 = x11044 + x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11603 = x11477 * x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11604 = x11602 - x11603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11605 = x11045 + x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11606 = x11481 * x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11607 = x11605 - x11606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11608 = x11046 + x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11609 = x11485 * x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11610 = x11608 - x11609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11611 = x11047 + x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11612 = x11489 * x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11613 = x11611 - x11612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11614 = x11016 + x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11615 = x11493 * x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11616 = x11614 - x11615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11617 = x11017 + x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11618 = x11497 * x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11619 = x11617 - x11618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11620 = x11018 + x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11621 = x11501 * x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11622 = x11620 - x11621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11623 = x11019 + x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11624 = x11505 * x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11625 = x11623 - x11624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11626 = x11020 + x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11627 = x11509 * x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11628 = x11626 - x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11629 = x11021 + x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11630 = x11513 * x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11631 = x11629 - x11630;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11632 = x11145 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11633 = x11144 + x11632;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11634 = x11146 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11635 = x11633 + x11634;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11636 = x11147 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11637 = x11635 + x11636;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11638 = x11148 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11639 = x11637 + x11638;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11640 = x11149 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11641 = x11639 + x11640;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11642 = x11150 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11643 = x11641 + x11642;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11644 = x11151 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11645 = x11643 + x11644;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11646 = x11152 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11647 = x11645 + x11646;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11648 = x11153 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11649 = x11647 + x11648;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11650 = x11154 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11651 = x11649 + x11650;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11652 = x11155 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11653 = x11651 + x11652;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11654 = x11156 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11655 = x11653 + x11654;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11656 = x11157 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11657 = x11655 + x11656;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11658 = x11158 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11659 = x11657 + x11658;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11660 = x11159 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11661 = x11659 + x11660;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11662 = x11161 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11663 = x11160 + x11662;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11664 = x11162 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11665 = x11663 + x11664;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11666 = x11163 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11667 = x11665 + x11666;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11668 = x11164 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11669 = x11667 + x11668;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11670 = x11165 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11671 = x11669 + x11670;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11672 = x11166 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11673 = x11671 + x11672;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11674 = x11167 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11675 = x11673 + x11674;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11676 = x11168 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11677 = x11675 + x11676;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11678 = x11169 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11679 = x11677 + x11678;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11680 = x11170 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11681 = x11679 + x11680;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11682 = x11171 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11683 = x11681 + x11682;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11684 = x11172 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11685 = x11683 + x11684;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11686 = x11173 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11687 = x11685 + x11686;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11688 = x11174 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11689 = x11687 + x11688;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11690 = x11175 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11691 = x11689 + x11690;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11692 = x11113 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11693 = x11112 + x11692;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11694 = x11114 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11695 = x11693 + x11694;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11696 = x11115 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11697 = x11695 + x11696;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11698 = x11116 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11699 = x11697 + x11698;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11700 = x11117 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11701 = x11699 + x11700;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11702 = x11118 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11703 = x11701 + x11702;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11704 = x11119 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11705 = x11703 + x11704;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11706 = x11120 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11707 = x11705 + x11706;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11708 = x11121 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11709 = x11707 + x11708;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11710 = x11122 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11711 = x11709 + x11710;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11712 = x11123 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11713 = x11711 + x11712;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11714 = x11124 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11715 = x11713 + x11714;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11716 = x11125 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11717 = x11715 + x11716;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11718 = x11126 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11719 = x11717 + x11718;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11720 = x11127 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11721 = x11719 + x11720;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11722 = x11129 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11723 = x11128 + x11722;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11724 = x11130 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11725 = x11723 + x11724;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11726 = x11131 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11727 = x11725 + x11726;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11728 = x11132 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11729 = x11727 + x11728;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11730 = x11133 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11731 = x11729 + x11730;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11732 = x11134 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11733 = x11731 + x11732;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11734 = x11135 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11735 = x11733 + x11734;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11736 = x11136 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11737 = x11735 + x11736;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11738 = x11137 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11739 = x11737 + x11738;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11740 = x11138 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11741 = x11739 + x11740;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11742 = x11139 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11743 = x11741 + x11742;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11744 = x11140 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11745 = x11743 + x11744;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11746 = x11141 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11747 = x11745 + x11746;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11748 = x11142 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11749 = x11747 + x11748;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11750 = x11143 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11751 = x11749 + x11750;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11752 = x11016 * x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11753 = x95 - x11016;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11754 = x11753 * x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11755 = x11752 + x11754;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11756 = x11017 * x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11757 = x95 - x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11758 = x11757 * x11081;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11759 = x11756 + x11758;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11760 = x11018 * x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11761 = x95 - x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11762 = x11761 * x11082;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11763 = x11760 + x11762;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11764 = x11019 * x11051;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11765 = x95 - x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11766 = x11765 * x11083;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11767 = x11764 + x11766;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11768 = x11020 * x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11769 = x95 - x11020;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11770 = x11769 * x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11771 = x11768 + x11770;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11772 = x11021 * x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11773 = x95 - x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11774 = x11773 * x11085;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11775 = x11772 + x11774;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11776 = x11022 * x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11777 = x95 - x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11778 = x11777 * x11086;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11779 = x11776 + x11778;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11780 = x11023 * x11055;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11781 = x95 - x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11782 = x11781 * x11087;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11783 = x11780 + x11782;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11784 = x11024 * x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11785 = x95 - x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11786 = x11785 * x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11787 = x11784 + x11786;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11788 = x11025 * x11057;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11789 = x95 - x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11790 = x11789 * x11089;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11791 = x11788 + x11790;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11792 = x11026 * x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11793 = x95 - x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11794 = x11793 * x11090;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11795 = x11792 + x11794;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11796 = x11027 * x11059;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11797 = x95 - x11027;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11798 = x11797 * x11091;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11799 = x11796 + x11798;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11800 = x11028 * x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11801 = x95 - x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11802 = x11801 * x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11803 = x11800 + x11802;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11804 = x11029 * x11061;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11805 = x95 - x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11806 = x11805 * x11093;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11807 = x11804 + x11806;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11808 = x11030 * x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11809 = x95 - x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11810 = x11809 * x11094;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11811 = x11808 + x11810;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11812 = x11031 * x11063;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11813 = x95 - x11031;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11814 = x11813 * x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11815 = x11812 + x11814;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11816 = x11032 * x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11817 = x95 - x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11818 = x11817 * x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11819 = x11816 + x11818;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11820 = x11033 * x11065;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11821 = x95 - x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11822 = x11821 * x11097;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11823 = x11820 + x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11824 = x11034 * x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11825 = x95 - x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11826 = x11825 * x11098;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11827 = x11824 + x11826;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11828 = x11035 * x11067;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11829 = x95 - x11035;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11830 = x11829 * x11099;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11831 = x11828 + x11830;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11832 = x11036 * x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11833 = x95 - x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11834 = x11833 * x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11835 = x11832 + x11834;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11836 = x11037 * x11069;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11837 = x95 - x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11838 = x11837 * x11101;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11839 = x11836 + x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11840 = x11038 * x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11841 = x95 - x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11842 = x11841 * x11102;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11843 = x11840 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11844 = x11039 * x11071;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11845 = x95 - x11039;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11846 = x11845 * x11103;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11847 = x11844 + x11846;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11848 = x11040 * x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11849 = x95 - x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11850 = x11849 * x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11851 = x11848 + x11850;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11852 = x11041 * x11073;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11853 = x95 - x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11854 = x11853 * x11105;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11855 = x11852 + x11854;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11856 = x11042 * x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11857 = x95 - x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11858 = x11857 * x11106;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11859 = x11856 + x11858;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11860 = x11043 * x11075;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11861 = x95 - x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11862 = x11861 * x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11863 = x11860 + x11862;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11864 = x11044 * x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11865 = x95 - x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11866 = x11865 * x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11867 = x11864 + x11866;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11868 = x11045 * x11077;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11869 = x95 - x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11870 = x11869 * x11109;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11871 = x11868 + x11870;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11872 = x11046 * x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11873 = x95 - x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11874 = x11873 * x11110;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11875 = x11872 + x11874;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11876 = x11047 * x11079;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11877 = x95 - x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11878 = x11877 * x11111;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11879 = x11876 + x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11880 = x11759 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11881 = x11755 + x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11882 = x11763 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11883 = x11881 + x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11884 = x11767 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11885 = x11883 + x11884;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11886 = x11771 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11887 = x11885 + x11886;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11888 = x11775 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11889 = x11887 + x11888;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11890 = x11779 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11891 = x11889 + x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11892 = x11783 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11893 = x11891 + x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11894 = x11787 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11895 = x11893 + x11894;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11896 = x11791 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11897 = x11895 + x11896;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11898 = x11795 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11899 = x11897 + x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11900 = x11799 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11901 = x11899 + x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11902 = x11803 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11903 = x11901 + x11902;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11904 = x11807 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11905 = x11903 + x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11906 = x11811 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11907 = x11905 + x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11908 = x11815 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11909 = x11907 + x11908;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11910 = x11823 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11911 = x11819 + x11910;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11912 = x11827 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11913 = x11911 + x11912;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11914 = x11831 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11915 = x11913 + x11914;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11916 = x11835 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11917 = x11915 + x11916;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11918 = x11839 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11919 = x11917 + x11918;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11920 = x11843 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11921 = x11919 + x11920;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11922 = x11847 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11923 = x11921 + x11922;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11924 = x11851 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11925 = x11923 + x11924;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11926 = x11855 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11927 = x11925 + x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11928 = x11859 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11929 = x11927 + x11928;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11930 = x11863 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11931 = x11929 + x11930;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11932 = x11867 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11933 = x11931 + x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11934 = x11871 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11935 = x11933 + x11934;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11936 = x11875 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11937 = x11935 + x11936;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11938 = x11879 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11939 = x11937 + x11938;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11940 = x11541 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11941 = x11538 + x11940;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11942 = x11544 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11943 = x11941 + x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11944 = x11547 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11945 = x11943 + x11944;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11946 = x11550 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11947 = x11945 + x11946;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11948 = x11553 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11949 = x11947 + x11948;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11950 = x11556 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11951 = x11949 + x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11952 = x11559 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11953 = x11951 + x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11954 = x11562 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11955 = x11953 + x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11956 = x11565 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11957 = x11955 + x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11958 = x11568 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11959 = x11957 + x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11960 = x11571 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11961 = x11959 + x11960;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11962 = x11574 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11963 = x11961 + x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11964 = x11577 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11965 = x11963 + x11964;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11966 = x11580 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11967 = x11965 + x11966;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11968 = x11583 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11969 = x11967 + x11968;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11970 = x11589 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11971 = x11586 + x11970;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11972 = x11592 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11973 = x11971 + x11972;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11974 = x11595 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11975 = x11973 + x11974;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11976 = x11598 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11977 = x11975 + x11976;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11978 = x11601 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11979 = x11977 + x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11980 = x11604 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11981 = x11979 + x11980;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11982 = x11607 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11983 = x11981 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11984 = x11610 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11985 = x11983 + x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11986 = x11613 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11987 = x11985 + x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11988 = x11616 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11989 = x11987 + x11988;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11990 = x11619 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11991 = x11989 + x11990;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11992 = x11622 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11993 = x11991 + x11992;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11994 = x11625 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11995 = x11993 + x11994;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11996 = x11628 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11997 = x11995 + x11996;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11998 = x11631 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11999 = x11997 + x11998;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12000 = x11909 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12001 = x11939 + x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12002 = x11721 + x12000;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12003 = x11751 + x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12004 = x11181 + x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12005 = x11183 + x12003;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12006 = x11661 + x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12007 = x11691 + x12005;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12008 = x10888 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12009 = x95 - x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12010 = x12008 * x12009;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12011 = x95 - x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12012 = x10888 * x12011;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12013 = x12012 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12014 = x12010 + x12013;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12015 = x95 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12016 = x12015 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12017 = x12016 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12018 = x12014 + x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12019 = x12008 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12020 = x12018 + x12019;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12021 = x10889 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12022 = x95 - x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12023 = x12021 * x12022;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12024 = x95 - x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12025 = x10889 * x12024;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12026 = x12025 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12027 = x12023 + x12026;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12028 = x95 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12029 = x12028 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12030 = x12029 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12031 = x12027 + x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12032 = x12021 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12033 = x12031 + x12032;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12034 = x10890 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12035 = x95 - x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12036 = x12034 * x12035;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12037 = x95 - x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12038 = x10890 * x12037;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12039 = x12038 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12040 = x12036 + x12039;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12041 = x95 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12042 = x12041 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12043 = x12042 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12044 = x12040 + x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12045 = x12034 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12046 = x12044 + x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12047 = x10891 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12048 = x95 - x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12049 = x12047 * x12048;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12050 = x95 - x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12051 = x10891 * x12050;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12052 = x12051 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12053 = x12049 + x12052;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12054 = x95 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12055 = x12054 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12056 = x12055 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12057 = x12053 + x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12058 = x12047 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12059 = x12057 + x12058;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12060 = x10892 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12061 = x95 - x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12062 = x12060 * x12061;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12063 = x95 - x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12064 = x10892 * x12063;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12065 = x12064 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12066 = x12062 + x12065;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12067 = x95 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12068 = x12067 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12069 = x12068 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12070 = x12066 + x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12071 = x12060 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12072 = x12070 + x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12073 = x10893 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12074 = x95 - x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12075 = x12073 * x12074;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12076 = x95 - x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12077 = x10893 * x12076;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12078 = x12077 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12079 = x12075 + x12078;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12080 = x95 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12081 = x12080 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12082 = x12081 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12083 = x12079 + x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12084 = x12073 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12085 = x12083 + x12084;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12086 = x10894 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12087 = x95 - x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12088 = x12086 * x12087;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12089 = x95 - x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12090 = x10894 * x12089;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12091 = x12090 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12092 = x12088 + x12091;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12093 = x95 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12094 = x12093 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12095 = x12094 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12096 = x12092 + x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12097 = x12086 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12098 = x12096 + x12097;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12099 = x10895 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12100 = x95 - x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12101 = x12099 * x12100;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12102 = x95 - x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12103 = x10895 * x12102;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12104 = x12103 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12105 = x12101 + x12104;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12106 = x95 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12107 = x12106 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12108 = x12107 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12109 = x12105 + x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12110 = x12099 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12111 = x12109 + x12110;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12112 = x10896 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12113 = x95 - x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12114 = x12112 * x12113;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12115 = x95 - x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12116 = x10896 * x12115;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12117 = x12116 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12118 = x12114 + x12117;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12119 = x95 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12120 = x12119 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12121 = x12120 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12122 = x12118 + x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12123 = x12112 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12124 = x12122 + x12123;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12125 = x10897 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12126 = x95 - x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12127 = x12125 * x12126;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12128 = x95 - x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12129 = x10897 * x12128;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12130 = x12129 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12131 = x12127 + x12130;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12132 = x95 - x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12133 = x12132 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12134 = x12133 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12135 = x12131 + x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12136 = x12125 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12137 = x12135 + x12136;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12138 = x10898 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12139 = x95 - x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12140 = x12138 * x12139;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12141 = x95 - x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12142 = x10898 * x12141;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12143 = x12142 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12144 = x12140 + x12143;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12145 = x95 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12146 = x12145 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12147 = x12146 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12148 = x12144 + x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12149 = x12138 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12150 = x12148 + x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12151 = x10899 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12152 = x95 - x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12153 = x12151 * x12152;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12154 = x95 - x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12155 = x10899 * x12154;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12156 = x12155 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12157 = x12153 + x12156;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12158 = x95 - x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12159 = x12158 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12160 = x12159 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12161 = x12157 + x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12162 = x12151 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12163 = x12161 + x12162;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12164 = x10900 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12165 = x95 - x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12166 = x12164 * x12165;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12167 = x95 - x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12168 = x10900 * x12167;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12169 = x12168 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12170 = x12166 + x12169;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12171 = x95 - x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12172 = x12171 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12173 = x12172 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12174 = x12170 + x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12175 = x12164 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12176 = x12174 + x12175;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12177 = x10901 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12178 = x95 - x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12179 = x12177 * x12178;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12180 = x95 - x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12181 = x10901 * x12180;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12182 = x12181 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12183 = x12179 + x12182;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12184 = x95 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12185 = x12184 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12186 = x12185 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12187 = x12183 + x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12188 = x12177 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12189 = x12187 + x12188;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12190 = x10902 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12191 = x95 - x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12192 = x12190 * x12191;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12193 = x95 - x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12194 = x10902 * x12193;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12195 = x12194 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12196 = x12192 + x12195;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12197 = x95 - x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12198 = x12197 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12199 = x12198 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x12196 + x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12201 = x12190 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12202 = x12200 + x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12203 = x10903 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12204 = x95 - x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12205 = x12203 * x12204;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12206 = x95 - x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12207 = x10903 * x12206;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12208 = x12207 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12209 = x12205 + x12208;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12210 = x95 - x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12211 = x12210 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12212 = x12211 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x12209 + x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12214 = x12203 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12215 = x12213 + x12214;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12216 = x10904 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12217 = x95 - x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12218 = x12216 * x12217;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12219 = x95 - x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12220 = x10904 * x12219;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12221 = x12220 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12222 = x12218 + x12221;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12223 = x95 - x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12224 = x12223 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12225 = x12224 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x12222 + x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12227 = x12216 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12228 = x12226 + x12227;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12229 = x10905 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12230 = x95 - x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12231 = x12229 * x12230;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12232 = x95 - x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12233 = x10905 * x12232;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12234 = x12233 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12235 = x12231 + x12234;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12236 = x95 - x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12237 = x12236 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12238 = x12237 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x12235 + x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12240 = x12229 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12241 = x12239 + x12240;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12242 = x10906 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12243 = x95 - x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12244 = x12242 * x12243;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12245 = x95 - x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12246 = x10906 * x12245;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12247 = x12246 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12248 = x12244 + x12247;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12249 = x95 - x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12250 = x12249 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12251 = x12250 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x12248 + x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12253 = x12242 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12254 = x12252 + x12253;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12255 = x10907 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12256 = x95 - x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12257 = x12255 * x12256;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12258 = x95 - x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12259 = x10907 * x12258;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12260 = x12259 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12261 = x12257 + x12260;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12262 = x95 - x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12263 = x12262 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12264 = x12263 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12265 = x12261 + x12264;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12266 = x12255 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12267 = x12265 + x12266;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12268 = x10908 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12269 = x95 - x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12270 = x12268 * x12269;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12271 = x95 - x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12272 = x10908 * x12271;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12273 = x12272 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12274 = x12270 + x12273;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12275 = x95 - x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12276 = x12275 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12277 = x12276 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12278 = x12274 + x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12279 = x12268 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12280 = x12278 + x12279;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12281 = x10909 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12282 = x95 - x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12283 = x12281 * x12282;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12284 = x95 - x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12285 = x10909 * x12284;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12286 = x12285 * x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12287 = x12283 + x12286;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12288 = x95 - x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12289 = x12288 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12290 = x12289 * x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12291 = x12287 + x12290;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12292 = x12281 * x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12293 = x12291 + x12292;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12294 = x10910 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12295 = x95 - x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12296 = x12294 * x12295;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12297 = x95 - x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12298 = x10910 * x12297;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12299 = x12298 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12300 = x12296 + x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12301 = x95 - x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12302 = x12301 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12303 = x12302 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12304 = x12300 + x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12305 = x12294 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12306 = x12304 + x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12307 = x10911 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12308 = x95 - x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12309 = x12307 * x12308;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12310 = x95 - x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12311 = x10911 * x12310;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12312 = x12311 * x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12313 = x12309 + x12312;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12314 = x95 - x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12315 = x12314 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12316 = x12315 * x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12317 = x12313 + x12316;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12318 = x12307 * x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12319 = x12317 + x12318;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12320 = x10912 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12321 = x95 - x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12322 = x12320 * x12321;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12323 = x95 - x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12324 = x10912 * x12323;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12325 = x12324 * x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12326 = x12322 + x12325;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12327 = x95 - x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12328 = x12327 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12329 = x12328 * x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12330 = x12326 + x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12331 = x12320 * x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12332 = x12330 + x12331;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12333 = x10913 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12334 = x95 - x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12335 = x12333 * x12334;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12336 = x95 - x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12337 = x10913 * x12336;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12338 = x12337 * x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12339 = x12335 + x12338;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12340 = x95 - x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12341 = x12340 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12342 = x12341 * x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12343 = x12339 + x12342;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12344 = x12333 * x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12345 = x12343 + x12344;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12346 = x10914 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12347 = x95 - x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12348 = x12346 * x12347;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12349 = x95 - x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12350 = x10914 * x12349;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12351 = x12350 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12352 = x12348 + x12351;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12353 = x95 - x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12354 = x12353 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12355 = x12354 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12356 = x12352 + x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12357 = x12346 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12358 = x12356 + x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12359 = x10915 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12360 = x95 - x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12361 = x12359 * x12360;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12362 = x95 - x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12363 = x10915 * x12362;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12364 = x12363 * x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12365 = x12361 + x12364;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12366 = x95 - x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12367 = x12366 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12368 = x12367 * x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12369 = x12365 + x12368;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12370 = x12359 * x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12371 = x12369 + x12370;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12372 = x10916 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12373 = x95 - x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12374 = x12372 * x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12375 = x95 - x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12376 = x10916 * x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12377 = x12376 * x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12378 = x12374 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12379 = x95 - x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12380 = x12379 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12381 = x12380 * x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12382 = x12378 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12383 = x12372 * x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12384 = x12382 + x12383;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12385 = x10917 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12386 = x95 - x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12387 = x12385 * x12386;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12388 = x95 - x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12389 = x10917 * x12388;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12390 = x12389 * x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12391 = x12387 + x12390;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12392 = x95 - x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12393 = x12392 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12394 = x12393 * x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12395 = x12391 + x12394;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12396 = x12385 * x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12397 = x12395 + x12396;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12398 = x10918 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12399 = x95 - x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12400 = x12398 * x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12401 = x95 - x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12402 = x10918 * x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12403 = x12402 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12404 = x12400 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12405 = x95 - x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12406 = x12405 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12407 = x12406 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12408 = x12404 + x12407;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12409 = x12398 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12410 = x12408 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12411 = x10919 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12412 = x95 - x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12413 = x12411 * x12412;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12414 = x95 - x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12415 = x10919 * x12414;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12416 = x12415 * x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12417 = x12413 + x12416;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12418 = x95 - x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12419 = x12418 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12420 = x12419 * x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12421 = x12417 + x12420;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12422 = x12411 * x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12423 = x12421 + x12422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12424 = x12033 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12425 = x12020 + x12424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12426 = x12046 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12427 = x12425 + x12426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12428 = x12059 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12429 = x12427 + x12428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12430 = x12072 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12431 = x12429 + x12430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12432 = x12085 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12433 = x12431 + x12432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12434 = x12098 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12435 = x12433 + x12434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12436 = x12111 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12437 = x12435 + x12436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12438 = x12124 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12439 = x12437 + x12438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12440 = x12137 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12441 = x12439 + x12440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12442 = x12150 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12443 = x12441 + x12442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12444 = x12163 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12445 = x12443 + x12444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12446 = x12176 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12447 = x12445 + x12446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12448 = x12189 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12449 = x12447 + x12448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12450 = x12202 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12451 = x12449 + x12450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12452 = x12215 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12453 = x12451 + x12452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12454 = x12241 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12455 = x12228 + x12454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12456 = x12254 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12457 = x12455 + x12456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12458 = x12267 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12459 = x12457 + x12458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12460 = x12280 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12461 = x12459 + x12460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12462 = x12293 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12463 = x12461 + x12462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12464 = x12306 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12465 = x12463 + x12464;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12466 = x12319 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12467 = x12465 + x12466;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12468 = x12332 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12469 = x12467 + x12468;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12470 = x12345 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12471 = x12469 + x12470;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12472 = x12358 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12473 = x12471 + x12472;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12474 = x12371 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12475 = x12473 + x12474;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12476 = x12384 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12477 = x12475 + x12476;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12478 = x12397 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12479 = x12477 + x12478;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12480 = x12410 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12481 = x12479 + x12480;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12482 = x12423 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12483 = x12481 + x12482;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12484 = x11317 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12485 = x11314 + x12484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12486 = x11320 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12487 = x12485 + x12486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12488 = x11323 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12489 = x12487 + x12488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12490 = x11326 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12491 = x12489 + x12490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12492 = x11329 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12493 = x12491 + x12492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12494 = x11332 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12495 = x12493 + x12494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12496 = x11335 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12497 = x12495 + x12496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12498 = x11338 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12499 = x12497 + x12498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12500 = x11341 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12501 = x12499 + x12500;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12502 = x11344 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12503 = x12501 + x12502;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12504 = x11347 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12505 = x12503 + x12504;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12506 = x11350 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12507 = x12505 + x12506;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12508 = x11353 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12509 = x12507 + x12508;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12510 = x11356 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12511 = x12509 + x12510;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12512 = x11359 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12513 = x12511 + x12512;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12514 = x11365 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12515 = x11362 + x12514;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12516 = x11368 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12517 = x12515 + x12516;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12518 = x11371 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12519 = x12517 + x12518;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12520 = x11374 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12521 = x12519 + x12520;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12522 = x11377 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12523 = x12521 + x12522;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12524 = x11380 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12525 = x12523 + x12524;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12526 = x11383 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12527 = x12525 + x12526;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12528 = x11386 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12529 = x12527 + x12528;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12530 = x11389 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12531 = x12529 + x12530;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12532 = x11392 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12533 = x12531 + x12532;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12534 = x11395 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12535 = x12533 + x12534;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12536 = x11398 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12537 = x12535 + x12536;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12538 = x11401 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12539 = x12537 + x12538;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12540 = x11404 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12541 = x12539 + x12540;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12542 = x11407 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12543 = x12541 + x12542;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12544 = x12453 + x12513;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12545 = x12483 + x12543;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12546 = x12006 + x12544;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12547 = x12007 + x12545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12548 = x10985 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12549 = x10984 + x12548;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12550 = x10986 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12551 = x12549 + x12550;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12552 = x10987 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12553 = x12551 + x12552;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12554 = x10988 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12555 = x12553 + x12554;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12556 = x10989 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12557 = x12555 + x12556;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12558 = x10990 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12559 = x12557 + x12558;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12560 = x10991 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12561 = x12559 + x12560;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12562 = x10992 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12563 = x12561 + x12562;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12564 = x10993 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12565 = x12563 + x12564;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12566 = x10994 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12567 = x12565 + x12566;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12568 = x10995 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12569 = x12567 + x12568;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12570 = x10996 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12571 = x12569 + x12570;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12572 = x10997 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12573 = x12571 + x12572;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12574 = x10998 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12575 = x12573 + x12574;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12576 = x10999 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12577 = x12575 + x12576;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12578 = x11001 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12579 = x11000 + x12578;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12580 = x11002 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12581 = x12579 + x12580;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12582 = x11003 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12583 = x12581 + x12582;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12584 = x11004 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12585 = x12583 + x12584;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12586 = x11005 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12587 = x12585 + x12586;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12588 = x11006 * x54;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12589 = x12587 + x12588;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12590 = x11007 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12591 = x12589 + x12590;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12592 = x11008 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12593 = x12591 + x12592;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12594 = x11009 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12595 = x12593 + x12594;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12596 = x11010 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12597 = x12595 + x12596;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12598 = x11011 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12599 = x12597 + x12598;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12600 = x11012 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12601 = x12599 + x12600;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12602 = x11013 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12603 = x12601 + x12602;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12604 = x11014 * x35;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12605 = x12603 + x12604;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12606 = x11015 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12607 = x12605 + x12606;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12608 = x12006 + x12577;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12609 = x12007 + x12607;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12546);
        reg = x12546;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12608);
        reg = x12608;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12547);
        reg = x12547;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12609);
        reg = x12609;
      }
      if (x8640 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12610 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12611 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12611 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12612 = Fp(x12610.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12612);
            reg = x12612;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12613 = Fp(x12610.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12614 = x12613 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12614);
            reg = x12614;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12615 = Fp(x12610.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12616 = x12615 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12616);
            reg = x12616;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12617 = Fp(x12610.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12618 = x12617 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12618);
            reg = x12618;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12619 = Fp(x12610.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12620 = x12619 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12620);
            reg = x12620;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12621 = Fp(x12610.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12622 = x12621 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12622);
            reg = x12622;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12623 = Fp(x12610.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12624 = x12623 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12624);
            reg = x12624;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12625 = Fp(x12610.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12626 = x12625 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12626);
            reg = x12626;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12627 = Fp(x12610.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12628 = x12627 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12628);
            reg = x12628;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12629 = Fp(x12610.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12630 = x12629 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12630);
            reg = x12630;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12631 = Fp(x12610.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12632 = x12631 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12632);
            reg = x12632;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12633 = Fp(x12610.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12634 = x12633 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12634);
            reg = x12634;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12635 = Fp(x12610.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12636 = x12635 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12636);
            reg = x12636;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12637 = Fp(x12610.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12638 = x12637 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12638);
            reg = x12638;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12639 = Fp(x12610.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12640 = x12639 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12640);
            reg = x12640;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12641 = Fp(x12610.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12642 = x12641 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12642);
            reg = x12642;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12643 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12644 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12644 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12645 = x12644 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12646 = x12643 + x12645;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12647 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12647 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12648 = x12647 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12649 = x12646 + x12648;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12650 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12650 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12651 = x12650 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12652 = x12649 + x12651;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12653 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12653 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12654 = x12653 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12655 = x12652 + x12654;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12656 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12656 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12657 = x12656 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12658 = x12655 + x12657;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12659 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12659 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12660 = x12659 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12661 = x12658 + x12660;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12662 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12662 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12663 = x12662 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12664 = x12661 + x12663;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12665 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12665 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12666 = x12665 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12667 = x12664 + x12666;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12668 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12668 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12669 = x12668 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12670 = x12667 + x12669;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12671 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12671 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12672 = x12671 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12673 = x12670 + x12672;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12674 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12674 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12675 = x12674 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12676 = x12673 + x12675;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12677 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12677 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12678 = x12677 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12679 = x12676 + x12678;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12680 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12680 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12681 = x12680 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12682 = x12679 + x12681;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12683 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12683 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12684 = x12683 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12685 = x12682 + x12684;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12686 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12686 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12687 = x12686 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12688 = x12685 + x12687;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12689 = x12610 - x12688;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12690 = x12689 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12691 = Fp(x12690.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12691);
            reg = x12691;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12692 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x12692 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12693 = x12690 - x12692;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12694 = x12693 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12695 = x95 - x12694;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12696 = x12694 * x12695;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12696 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12697 = x12611 + x12690;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12698 = Fp(x12697.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12698);
            reg = x12698;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12699 = Fp(x12697.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12700 = x12699 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12700);
            reg = x12700;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12701 = Fp(x12697.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12702 = x12701 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12702);
            reg = x12702;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12703 = Fp(x12697.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12704 = x12703 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12704);
            reg = x12704;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12705 = Fp(x12697.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12706 = x12705 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12706);
            reg = x12706;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12707 = Fp(x12697.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12708 = x12707 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12708);
            reg = x12708;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12709 = Fp(x12697.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12710 = x12709 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12710);
            reg = x12710;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12711 = Fp(x12697.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12712 = x12711 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12712);
            reg = x12712;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12713 = Fp(x12697.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12714 = x12713 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12714);
            reg = x12714;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12715 = Fp(x12697.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12716 = x12715 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12716);
            reg = x12716;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12717 = Fp(x12697.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12718 = x12717 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12718);
            reg = x12718;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12719 = Fp(x12697.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12720 = x12719 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12720);
            reg = x12720;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12721 = Fp(x12697.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12722 = x12721 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12722);
            reg = x12722;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12723 = Fp(x12697.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12724 = x12723 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12724);
            reg = x12724;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12725 = Fp(x12697.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12726 = x12725 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12726);
            reg = x12726;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12727 = Fp(x12697.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12728 = x12727 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12728);
            reg = x12728;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12729 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12729 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12730 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12730 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12731 = x12730 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12732 = x12729 + x12731;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12733 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12733 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12734 = x12733 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12735 = x12732 + x12734;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12736 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12736 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12737 = x12736 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12738 = x12735 + x12737;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12739 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12739 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12740 = x12739 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12741 = x12738 + x12740;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12742 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12742 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12743 = x12742 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12744 = x12741 + x12743;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12745 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12745 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12746 = x12745 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12747 = x12744 + x12746;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12748 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12748 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12749 = x12748 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12750 = x12747 + x12749;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12751 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12751 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12752 = x12751 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12753 = x12750 + x12752;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12754 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12755 = x12754 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12756 = x12753 + x12755;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12757 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12758 = x12757 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12759 = x12756 + x12758;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12760 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12761 = x12760 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12762 = x12759 + x12761;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12763 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12764 = x12763 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12765 = x12762 + x12764;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12766 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12767 = x12766 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12768 = x12765 + x12767;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12769 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12770 = x12769 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12771 = x12768 + x12770;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12772 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12773 = x12772 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12774 = x12771 + x12773;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12775 = x12697 - x12774;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12776 = x12775 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12777 = Fp(x12776.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12777);
            reg = x12777;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12778 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x12778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12779 = x12776 - x12778;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12780 = x12779 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12781 = x95 - x12780;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12782 = x12780 * x12781;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12782 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12783 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12783 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12784 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12784 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12785 = Fp(x12783.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12785);
            reg = x12785;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12786 = Fp(x12783.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12787 = x12786 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12787);
            reg = x12787;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12788 = Fp(x12783.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12789 = x12788 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12789);
            reg = x12789;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12790 = Fp(x12783.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12791 = x12790 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12791);
            reg = x12791;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12792 = Fp(x12783.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12793 = x12792 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12793);
            reg = x12793;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12794 = Fp(x12783.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12795 = x12794 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12795);
            reg = x12795;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12796 = Fp(x12783.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12797 = x12796 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12797);
            reg = x12797;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12798 = Fp(x12783.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12799 = x12798 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12799);
            reg = x12799;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12800 = Fp(x12783.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12801 = x12800 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12801);
            reg = x12801;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12802 = Fp(x12783.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12803 = x12802 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12803);
            reg = x12803;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12804 = Fp(x12783.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12805 = x12804 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12805);
            reg = x12805;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12806 = Fp(x12783.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12807 = x12806 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12807);
            reg = x12807;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12808 = Fp(x12783.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12809 = x12808 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12809);
            reg = x12809;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12810 = Fp(x12783.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12811 = x12810 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12811);
            reg = x12811;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12812 = Fp(x12783.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12813 = x12812 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12813);
            reg = x12813;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12814 = Fp(x12783.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12815 = x12814 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12815);
            reg = x12815;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12816 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12816 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12817 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12818 = x12817 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12819 = x12816 + x12818;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12820 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12821 = x12820 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12822 = x12819 + x12821;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12823 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12823 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12824 = x12823 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12825 = x12822 + x12824;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12826 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12826 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12827 = x12826 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12828 = x12825 + x12827;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12829 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12829 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12830 = x12829 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12831 = x12828 + x12830;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12832 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12832 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12833 = x12832 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12834 = x12831 + x12833;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12835 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12835 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12836 = x12835 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12837 = x12834 + x12836;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12838 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12838 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12839 = x12838 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12840 = x12837 + x12839;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12841 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12841 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12842 = x12841 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12843 = x12840 + x12842;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12844 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12844 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12845 = x12844 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12846 = x12843 + x12845;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12847 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12847 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12848 = x12847 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12849 = x12846 + x12848;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12850 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12850 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12851 = x12850 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12852 = x12849 + x12851;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12853 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12854 = x12853 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12855 = x12852 + x12854;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12856 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12856 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12857 = x12856 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12858 = x12855 + x12857;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12859 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12860 = x12859 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12861 = x12858 + x12860;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12862 = x12783 - x12861;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12863 = x12862 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12864 = Fp(x12863.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12864);
            reg = x12864;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12865 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x12865 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12866 = x12863 - x12865;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12867 = x12866 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12868 = x95 - x12867;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12869 = x12867 * x12868;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12869 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12870 = x12784 + x12863;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12871 = Fp(x12870.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12871);
            reg = x12871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12872 = Fp(x12870.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12873 = x12872 * x55;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12873);
            reg = x12873;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12874 = Fp(x12870.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12875 = x12874 * x76;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12875);
            reg = x12875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12876 = Fp(x12870.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12877 = x12876 * x56;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12877);
            reg = x12877;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12878 = Fp(x12870.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12879 = x12878 * x57;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12879);
            reg = x12879;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12880 = Fp(x12870.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12881 = x12880 * x58;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12881);
            reg = x12881;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12882 = Fp(x12870.asUInt32() & x54.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12883 = x12882 * x53;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12883);
            reg = x12883;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12884 = Fp(x12870.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12885 = x12884 * x61;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12885);
            reg = x12885;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12886 = Fp(x12870.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12887 = x12886 * x89;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12887);
            reg = x12887;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12888 = Fp(x12870.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12889 = x12888 * x20;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12889);
            reg = x12889;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12890 = Fp(x12870.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12891 = x12890 * x19;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12891);
            reg = x12891;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12892 = Fp(x12870.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12893 = x12892 * x17;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12893);
            reg = x12893;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12894 = Fp(x12870.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12895 = x12894 * x15;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12895);
            reg = x12895;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12896 = Fp(x12870.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12897 = x12896 * x13;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12897);
            reg = x12897;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12898 = Fp(x12870.asUInt32() & x35.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12899 = x12898 * x12;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12899);
            reg = x12899;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12900 = Fp(x12870.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12901 = x12900 * x10;
          // loc("./cirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12901);
            reg = x12901;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12902 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12902 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12903 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12903 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12904 = x12903 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12905 = x12902 + x12904;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12906 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12906 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12907 = x12906 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12908 = x12905 + x12907;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12909 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12909 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12910 = x12909 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12911 = x12908 + x12910;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12912 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12912 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12913 = x12912 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12914 = x12911 + x12913;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12915 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12915 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12916 = x12915 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12917 = x12914 + x12916;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12918 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12918 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12919 = x12918 * x54;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12920 = x12917 + x12919;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12921 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x12921 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12922 = x12921 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12923 = x12920 + x12922;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12924 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x12924 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12925 = x12924 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12926 = x12923 + x12925;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12927 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x12927 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12928 = x12927 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12929 = x12926 + x12928;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12930 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x12930 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12931 = x12930 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12932 = x12929 + x12931;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12933 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x12933 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12934 = x12933 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12935 = x12932 + x12934;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12936 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x12936 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12937 = x12936 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12938 = x12935 + x12937;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12939 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x12939 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12940 = x12939 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12941 = x12938 + x12940;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12942 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x12942 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12943 = x12942 * x35;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12944 = x12941 + x12943;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12945 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x12945 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12946 = x12945 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12947 = x12944 + x12946;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12948 = x12870 - x12947;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12949 = x12948 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12950 = Fp(x12949.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12950);
            reg = x12950;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x12951 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12951 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12952 = x12949 - x12951;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12953 = x12952 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12954 = x95 - x12953;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12955 = x12953 * x12954;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12955 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x12956 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x12956 != Fp::invalid());
      if (x12956 != 0) {
        if (x8648 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":433:38))
          auto x12957 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x12957 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":433:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12957);
            reg = x12957;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":434:38))
          auto x12958 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x12958 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":434:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12958);
            reg = x12958;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":435:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x63);
            reg = x63;
          }
        }
        if (x8649 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":439:51))
          auto x12959 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x12959 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":439:51)
          auto x12960 = x12959 + x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":439:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12960);
            reg = x12960;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":440:51))
          auto x12961 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x12961 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":440:51)
          auto x12962 = x12961 + x63;
          // loc("cirgen/circuit/rv32im/sha.cpp":440:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12962);
            reg = x12962;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":441:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":444:27)
      auto x12963 = x95 - x12956;
      if (x12963 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":445:36))
        auto x12964 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x12964 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":445:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12964);
          reg = x12964;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":446:36))
        auto x12965 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x12965 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":446:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12965);
          reg = x12965;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":447:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./cirgen/components/mux.h":49:25))
    auto x12966 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x12966 != Fp::invalid());
    if (x12966 != 0) {
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x12967 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12968 = Fp(x12967.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12968);
          reg = x12968;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12969 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x12969 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12970 = x12967 - x12969;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12971 = x12970 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12972 = Fp(x12971.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12972);
          reg = x12972;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12973 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x12973 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12974 = x12971 - x12973;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12975 = x12974 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12976 = Fp(x12975.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12976);
          reg = x12976;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12977 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x12977 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12978 = x12975 - x12977;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12979 = x12978 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x12980 = Fp(x12979.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12980);
          reg = x12980;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x12981 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x12981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x12982 = x12979 - x12981;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x12983 = x12982 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12983);
        reg = x12983;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x12984 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x12984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x12985 = x95 - x12984;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x12986 = x12984 * x12985;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12986);
        reg = x12986;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12987 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x12987 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x12988 = x92 - x12984;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x12989 = x12987 * x12988;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x12989 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x754;
      host(ctx, "log", "  PageFault: PC = %10x", host_args.data(), 1, host_outs.data(), 0);
      {
        host_args.at(0) = x754;
        host(ctx, "pageInfo", "", host_args.data(), 1, host_outs.data(), 3);
        auto x12990 = host_outs.at(0);
        auto x12991 = host_outs.at(1);
        auto x12992 = host_outs.at(2);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12990);
          reg = x12990;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":77:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12991);
          reg = x12991;
        }
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12992);
          reg = x12992;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12993 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x12993 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":83:20)
      auto x12994 = x12993 - x4;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12995 = (x12994 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12995);
          reg = x12995;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12996 = inv(x12994);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12996);
          reg = x12996;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x12997 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x12997 != Fp::invalid());
      if (x12997 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12994 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12998 = x95 - x12997;
      if (x12998 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12999 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x12999 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13000 = x12994 * x12999;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13001 = x13000 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13001 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12997 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":85:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":86:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      if (x12998 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":89:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":90:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13002 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13002 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
      auto x13003 = x12993 + x13002;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":94:36)
      auto x13004 = x13003 * x71;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":94:19)
      auto x13005 = x13004 + x3;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":95:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13005);
        reg = x13005;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":96:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2);
        reg = x2;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13006 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13006 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":98:16)
      auto x13007 = x95 - x13006;
      if (x13007 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":108:17)
        auto x13008 = x12993 - x95;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13009 = Fp(x13008.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13009);
            reg = x13009;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13010 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13010 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13011 = x13008 - x13010;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13012 = x13011 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13013 = Fp(x13012.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13013);
            reg = x13013;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13014 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13014 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13015 = x13012 - x13014;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13016 = x13015 * x89;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13016);
          reg = x13016;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":109:17)
        auto x13017 = x4 - x12993;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13018 = Fp(x13017.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13018);
            reg = x13018;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13019 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13019 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13020 = x13017 - x13019;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13021 = x13020 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13022 = Fp(x13021.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13022);
            reg = x13022;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13023 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13023 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13024 = x13021 - x13023;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13025 = x13024 * x89;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13025);
          reg = x13025;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x13006 != 0) {
        {
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13026 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13026 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13027 = x94 - x13026;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13028 = x13027 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13029 = Fp(x13028.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13029);
            reg = x13029;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13030 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13030 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13031 = x13028 - x13030;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13032 = x13031 * x89;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13032);
          reg = x13032;
        }
        {
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13033 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13033 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13034 = x94 - x13033;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13035 = x13034 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13036 = Fp(x13035.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13036);
            reg = x13036;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13037 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13037 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13038 = x13035 - x13037;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13039 = x13038 * x89;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13039);
          reg = x13039;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":117:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./cirgen/components/mux.h":49:25))
    auto x13040 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x13040 != Fp::invalid());
    if (x13040 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ecall.cpp":157:70))
      auto x13041 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13041 != Fp::invalid());
      if (x13041 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13042 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13042 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13043 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13043 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13044 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13044 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13045 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13045 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x13046 = x13043 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13047 = x13042 + x13046;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13048 = x13044 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13049 = x13047 + x13048;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13050 = x13045 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13051 = x13049 + x13050;
        // loc("cirgen/circuit/rv32im/ecall.cpp":167:98)
        auto x13052 = x13051 * x76;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13053 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13053 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":167:98)
        auto x13054 = x13053 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":167:98)
        auto x13055 = x13052 + x13054;
        // loc("cirgen/circuit/rv32im/ecall.cpp":167:98)
        auto x13056 = x13055 - x78;
        // loc("cirgen/circuit/rv32im/ecall.cpp":165:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13056);
          reg = x13056;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("cirgen/circuit/rv32im/ecall.cpp":168:63))
        auto x13057 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x13057 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":168:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13057);
          reg = x13057;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":171:22)
      auto x13058 = x95 - x13041;
      if (x13058 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("cirgen/circuit/rv32im/ecall.cpp":172:56))
        auto x13059 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13059 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":172:56)
        auto x13060 = x13059 - x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":172:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13060);
          reg = x13060;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("cirgen/circuit/rv32im/ecall.cpp":173:46))
        auto x13061 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13061 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":173:46)
        auto x13062 = x13061 + x78;
        // loc("cirgen/circuit/rv32im/ecall.cpp":173:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13062);
          reg = x13062;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13063 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x13063 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13064 = (x13063 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13064);
          reg = x13064;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13065 = inv(x13063);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13065);
          reg = x13065;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13066 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13066 != Fp::invalid());
      if (x13066 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13063 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13067 = x95 - x13066;
      if (x13067 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13068 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13068 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13069 = x13063 * x13068;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13070 = x13069 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13070 != 0) abort();std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13041 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13071 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13071 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":181:80)
        auto x13072 = x13071 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":181:80)
        auto x13073 = x13072 * x13067;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13074 = (x13073 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13074);
            reg = x13074;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13075 = x13073 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13076 = (x13075 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13076);
            reg = x13076;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13077 = x13073 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13078 = (x13077 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13078);
            reg = x13078;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13079 = x13073 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13080 = (x13079 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13080);
            reg = x13080;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13081 = x13073 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13082 = (x13081 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13082);
            reg = x13082;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13083 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13083 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13084 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13084 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13085 = x13084 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13086 = x13083 + x13085;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13087 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13087 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13088 = x13087 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13089 = x13086 + x13088;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13090 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13090 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13091 = x13090 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13092 = x13089 + x13091;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13093 = x13092 - x13073;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13093 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13094 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":184:10)
        auto x13095 = x13094 * x78;
        host_args.at(0) = x13095;
        host_args.at(1) = x13063;
        host_args.at(2) = x13092;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x13058 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":189:43)
        auto x13096 = x13067 * x78;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13097 = (x13096 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13097);
            reg = x13097;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13098 = x13096 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13099 = (x13098 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13099);
            reg = x13099;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13100 = x13096 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13101 = (x13100 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13101);
            reg = x13101;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13102 = x13096 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13103 = (x13102 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13103);
            reg = x13103;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13104 = x13096 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13105 = (x13104 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13105);
            reg = x13105;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13106 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13106 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13107 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13107 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13108 = x13107 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13109 = x13106 + x13108;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13110 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13110 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13111 = x13110 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13112 = x13109 + x13111;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13113 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13113 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13114 = x13113 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13115 = x13112 + x13114;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13116 = x13115 - x13096;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13116 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":191:24))
      auto x13117 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13117 != Fp::invalid());
      if (x13117 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x13118 = host_outs.at(0);
          auto x13119 = host_outs.at(1);
          auto x13120 = host_outs.at(2);
          auto x13121 = host_outs.at(3);
          auto x13122 = host_outs.at(4);
          auto x13123 = host_outs.at(5);
          auto x13124 = host_outs.at(6);
          auto x13125 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13118);
            reg = x13118;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13119);
            reg = x13119;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13120);
            reg = x13120;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13121);
            reg = x13121;
          }
          {
            host_args.at(0) = x27;
            host_args.at(1) = x13118;
            host_args.at(2) = x13119;
            host_args.at(3) = x13120;
            host_args.at(4) = x13121;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13126 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13126 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13127 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13127 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13128 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13128 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13129 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13129 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x27);
            reg = x27;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13126);
            reg = x13126;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13127);
            reg = x13127;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13128);
            reg = x13128;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13129);
            reg = x13129;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13122);
            reg = x13122;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13123);
            reg = x13123;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13124);
            reg = x13124;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13125);
            reg = x13125;
          }
          {
            host_args.at(0) = x26;
            host_args.at(1) = x13122;
            host_args.at(2) = x13123;
            host_args.at(3) = x13124;
            host_args.at(4) = x13125;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13130 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13130 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13131 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13131 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13132 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13132 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13133 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13133 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x26);
            reg = x26;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13130);
            reg = x13130;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13131);
            reg = x13131;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13132);
            reg = x13132;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13133);
            reg = x13133;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13134 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13134 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        auto x13135 = x13134 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        if (x13135 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:200");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13136 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":201:8)
        auto x13137 = x13136 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":201:8)
        if (x13137 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:201");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13138 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":203:8)
        auto x13139 = x13138 - x27;
        // loc("cirgen/circuit/rv32im/ecall.cpp":203:8)
        if (x13139 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:203");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13140 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13140 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":204:8)
        auto x13141 = x13140 - x26;
        // loc("cirgen/circuit/rv32im/ecall.cpp":204:8)
        if (x13141 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:204");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13142 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13142 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13143 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13143 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13144 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13145 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13146 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13146 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13147 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13147 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13148 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13149 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13149 != Fp::invalid());
        host_args.at(0) = x13142;
        host_args.at(1) = x13143;
        host_args.at(2) = x13144;
        host_args.at(3) = x13145;
        host_args.at(4) = x13146;
        host_args.at(5) = x13147;
        host_args.at(6) = x13148;
        host_args.at(7) = x13149;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":211:19)
        auto x13150 = x754 + x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13151 = x13150 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13152 = Fp(x13151.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13153 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13153 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13154 = x13151 - x13153;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13155 = x13154 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13156 = Fp(x13155.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13156);
            reg = x13156;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13157 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13158 = x13155 - x13157;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13159 = x13158 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13160 = Fp(x13159.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13160);
            reg = x13160;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13161 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13161 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13162 = x13159 - x13161;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13163 = x13162 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13164 = Fp(x13163.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13164);
            reg = x13164;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13165 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13165 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13166 = x13163 - x13165;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13167 = x13166 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13167);
          reg = x13167;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13168 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13168 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13169 = x95 - x13168;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13170 = x13168 * x13169;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13170);
          reg = x13170;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13171 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13171 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13172 = x92 - x13168;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13173 = x13171 * x13172;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13173 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":212:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":214:28)
      auto x13174 = x95 - x13117;
      if (x13174 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13175 = x754 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13176 = Fp(x13175.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13176);
            reg = x13176;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13177 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13177 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13178 = x13175 - x13177;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13179 = x13178 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13180 = Fp(x13179.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13180);
            reg = x13180;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13181 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13181 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13182 = x13179 - x13181;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13183 = x13182 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13184 = Fp(x13183.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13184);
            reg = x13184;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13185 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13185 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13186 = x13183 - x13185;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13187 = x13186 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13188 = Fp(x13187.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13188);
            reg = x13188;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13189 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13189 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13190 = x13187 - x13189;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13191 = x13190 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13191);
          reg = x13191;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13192 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13193 = x95 - x13192;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13194 = x13192 * x13193;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13194);
          reg = x13194;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13195 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13196 = x92 - x13192;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13197 = x13195 * x13196;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13197 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":216:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ecall.cpp":226:35))
      auto x13198 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13198 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ecall.cpp":226:35))
      auto x13199 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":226:22)
      auto x13200 = x13198 + x13199;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ecall.cpp":226:35))
      auto x13201 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":226:22)
      auto x13202 = x13200 + x13201;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ecall.cpp":224:35))
      auto x13203 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13203 != Fp::invalid());
      if (x13203 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13204 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13204 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13205 = host_outs.at(0);
          auto x13206 = host_outs.at(1);
          auto x13207 = host_outs.at(2);
          auto x13208 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13205);
            reg = x13205;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13206);
            reg = x13206;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13207);
            reg = x13207;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13208);
            reg = x13208;
          }
          {
            host_args.at(0) = x13204;
            host_args.at(1) = x13205;
            host_args.at(2) = x13206;
            host_args.at(3) = x13207;
            host_args.at(4) = x13208;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13209 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13209 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13210 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13210 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13211 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13211 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13212 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13212 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13204);
            reg = x13204;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13209);
            reg = x13209;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13210);
            reg = x13210;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13211);
            reg = x13211;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13212);
            reg = x13212;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":235:41)
          auto x13213 = x13204 * x78;
          host_args.at(0) = x13213;
          host_args.at(1) = x13209;
          host_args.at(2) = x13210;
          host_args.at(3) = x13211;
          host_args.at(4) = x13212;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13214 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        auto x13215 = x13214 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        if (x13215 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:238");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13216 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        auto x13217 = x13216 - x13204;
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        if (x13217 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:239");
      }
      if (x13202 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":224:22)
      auto x13218 = x13201 + x13203;
      if (x13218 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13219 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":231:23)
        auto x13220 = x13219 + x95;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13221 = host_outs.at(0);
          auto x13222 = host_outs.at(1);
          auto x13223 = host_outs.at(2);
          auto x13224 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13221);
            reg = x13221;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13222);
            reg = x13222;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13223);
            reg = x13223;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13224);
            reg = x13224;
          }
          {
            host_args.at(0) = x13220;
            host_args.at(1) = x13221;
            host_args.at(2) = x13222;
            host_args.at(3) = x13223;
            host_args.at(4) = x13224;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13225 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13225 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13226 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13226 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13227 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13227 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13228 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13228 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13220);
            reg = x13220;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13225);
            reg = x13225;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13226);
            reg = x13226;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13227);
            reg = x13227;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13228);
            reg = x13228;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":235:41)
          auto x13229 = x13220 * x78;
          host_args.at(0) = x13229;
          host_args.at(1) = x13225;
          host_args.at(2) = x13226;
          host_args.at(3) = x13227;
          host_args.at(4) = x13228;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13230 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        auto x13231 = x13230 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        if (x13231 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:238");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13232 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13232 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        auto x13233 = x13232 - x13220;
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        if (x13233 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:239");
      }
      if (x13200 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":224:22)
      auto x13234 = x13199 + x13201;
      // loc("cirgen/circuit/rv32im/ecall.cpp":224:22)
      auto x13235 = x13234 + x13203;
      if (x13235 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13236 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13236 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":231:23)
        auto x13237 = x13236 + x92;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13238 = host_outs.at(0);
          auto x13239 = host_outs.at(1);
          auto x13240 = host_outs.at(2);
          auto x13241 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13238);
            reg = x13238;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13239);
            reg = x13239;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13240);
            reg = x13240;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13241);
            reg = x13241;
          }
          {
            host_args.at(0) = x13237;
            host_args.at(1) = x13238;
            host_args.at(2) = x13239;
            host_args.at(3) = x13240;
            host_args.at(4) = x13241;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13242 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13242 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13243 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13243 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13244 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13244 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13245 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13245 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13237);
            reg = x13237;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13242);
            reg = x13242;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13243);
            reg = x13243;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13244);
            reg = x13244;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13245);
            reg = x13245;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":235:41)
          auto x13246 = x13237 * x78;
          host_args.at(0) = x13246;
          host_args.at(1) = x13242;
          host_args.at(2) = x13243;
          host_args.at(3) = x13244;
          host_args.at(4) = x13245;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13247 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13247 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        auto x13248 = x13247 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        if (x13248 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:238");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13249 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        auto x13250 = x13249 - x13237;
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        if (x13250 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:239");
      }
      if (x13198 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":224:22)
      auto x13251 = x13202 + x13203;
      if (x13251 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13252 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13252 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":231:23)
        auto x13253 = x13252 + x77;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13254 = host_outs.at(0);
          auto x13255 = host_outs.at(1);
          auto x13256 = host_outs.at(2);
          auto x13257 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13254);
            reg = x13254;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13255);
            reg = x13255;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13256);
            reg = x13256;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13257);
            reg = x13257;
          }
          {
            host_args.at(0) = x13253;
            host_args.at(1) = x13254;
            host_args.at(2) = x13255;
            host_args.at(3) = x13256;
            host_args.at(4) = x13257;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13258 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13258 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13259 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x13259 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13260 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x13260 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13261 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x13261 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13253);
            reg = x13253;
          }
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13258);
            reg = x13258;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13259);
            reg = x13259;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13260);
            reg = x13260;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13261);
            reg = x13261;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":235:41)
          auto x13262 = x13253 * x78;
          host_args.at(0) = x13262;
          host_args.at(1) = x13258;
          host_args.at(2) = x13259;
          host_args.at(3) = x13260;
          host_args.at(4) = x13261;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":179:10))
        auto x13263 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13263 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        auto x13264 = x13263 - x740;
        // loc("cirgen/circuit/rv32im/ecall.cpp":238:10)
        if (x13264 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:238");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":175:10))
        auto x13265 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13265 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        auto x13266 = x13265 - x13253;
        // loc("cirgen/circuit/rv32im/ecall.cpp":239:10)
        if (x13266 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:239");
      }
      if (x94 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./cirgen/components/mux.h":49:25))
    auto x13267 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13267 != Fp::invalid());
    if (x13267 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/bigint.cpp":179:70))
      auto x13268 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13268 != Fp::invalid());
      if (x13268 != 0) {
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        {
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13269 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13269 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13270 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13270 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13271 = x13270 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13272 = x13269 + x13271;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13273 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13273 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13274 = x13273 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13275 = x13272 + x13274;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13276 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13276 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13277 = x13276 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13278 = x13275 + x13277;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13278 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13279 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13280 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13280 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13281 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13281 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13282 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x13283 = x13280 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13284 = x13279 + x13283;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13285 = x13281 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13286 = x13284 + x13285;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13287 = x13282 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13288 = x13286 + x13287;
        // loc("cirgen/circuit/rv32im/bigint.cpp":189:9)
        if (x13288 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:189");
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":191:22)
      auto x13289 = x95 - x13268;
      if (x13289 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/bigint.cpp":192:47))
        auto x13290 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13290 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":192:23)
        auto x13291 = x95 - x13290;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13292 = args[2][177 * steps + ((cycle - 1) & mask)];
        assert(x13292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":192:22)
        auto x13293 = x13291 - x13292;
        // loc("./cirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13293);
          reg = x13293;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13294 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x13294 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13295 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x13295 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13296 = x13295 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13297 = x13294 + x13296;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13298 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x13298 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13299 = x13298 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13300 = x13297 + x13299;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13301 = args[2][176 * steps + ((cycle - 1) & mask)];
        assert(x13301 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13302 = x13301 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13303 = x13300 + x13302;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13304 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":193:41)
        auto x13305 = x95 - x13304;
        // loc("cirgen/circuit/rv32im/bigint.cpp":193:36)
        auto x13306 = x13303 + x13305;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13307 = (x13306 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13307);
            reg = x13307;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13308 = x13306 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13309 = (x13308 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13309);
            reg = x13309;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13310 = x13306 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13311 = (x13310 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13311);
            reg = x13311;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13312 = x13306 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13313 = (x13312 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13313);
            reg = x13313;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13314 = x13306 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13315 = (x13314 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13315);
            reg = x13315;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13316 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13316 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13317 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13317 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13318 = x13317 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13319 = x13316 + x13318;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13320 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13320 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13321 = x13320 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13322 = x13319 + x13321;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13323 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13323 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13324 = x13323 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13325 = x13322 + x13324;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13326 = x13325 - x13306;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13326 != 0) abort();std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/bigint.cpp":195:19))
      auto x13327 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13327 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/bigint.cpp":195:34))
      auto x13328 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13328 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/bigint.cpp":195:19)
      auto x13329 = x13327 + x13328;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13330 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13330 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/bigint.cpp":195:18)
      auto x13331 = x13329 * x13330;
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][178 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13331);
        reg = x13331;
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":196:17)
      auto x13332 = x13328 * x13330;
      // loc("./cirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][179 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13332);
        reg = x13332;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13333 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13333 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x13334 = x13327 * x92;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x13335 = x13333 + x13334;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13336 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13336 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x13337 = x13336 * x77;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x13338 = x13335 + x13337;
      // loc("./cirgen/components/onehot.h":46:19)
      auto x13339 = x13328 * x78;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x13340 = x13338 + x13339;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13341 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13341 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x13342 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13342 != Fp::invalid());
      host_args.at(0) = x13340;
      host_args.at(1) = x13330;
      host_args.at(2) = x13341;
      host_args.at(3) = x13342;
      host(ctx, "log", "BIGINT: stage = %u, stageOffset = %u, mulActive = %u, finalize = %u", host_args.data(), 4, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/bigint.cpp":204:18))
      auto x13343 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x13343 != Fp::invalid());
      if (x13343 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13344 = host_outs.at(0);
          auto x13345 = host_outs.at(1);
          auto x13346 = host_outs.at(2);
          auto x13347 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13344);
            reg = x13344;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13345);
            reg = x13345;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13346);
            reg = x13346;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13347);
            reg = x13347;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13348 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13348 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13349 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13349 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13350 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13350 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13351 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13351 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13348);
          reg = x13348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13349);
          reg = x13349;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13350);
          reg = x13350;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13351);
          reg = x13351;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13352 = host_outs.at(0);
          auto x13353 = host_outs.at(1);
          auto x13354 = host_outs.at(2);
          auto x13355 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13352);
            reg = x13352;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13353);
            reg = x13353;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13354);
            reg = x13354;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13355);
            reg = x13355;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13356 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13357 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13358 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13359 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13356);
          reg = x13356;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13357);
          reg = x13357;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13358);
          reg = x13358;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13359);
          reg = x13359;
        }
        {
          host_args.at(0) = x23;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13360 = host_outs.at(0);
          auto x13361 = host_outs.at(1);
          auto x13362 = host_outs.at(2);
          auto x13363 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13360);
            reg = x13360;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13361);
            reg = x13361;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13362);
            reg = x13362;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13363);
            reg = x13363;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13364 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13365 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13366 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13367 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x23);
          reg = x23;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13364);
          reg = x13364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13365);
          reg = x13365;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13366);
          reg = x13366;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13367);
          reg = x13367;
        }
        {
          host_args.at(0) = x25;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13368 = host_outs.at(0);
          auto x13369 = host_outs.at(1);
          auto x13370 = host_outs.at(2);
          auto x13371 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13368);
            reg = x13368;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13369);
            reg = x13369;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13370);
            reg = x13370;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13371);
            reg = x13371;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13372 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13372 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13373 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13373 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13374 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13374 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13375 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13375 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13372);
          reg = x13372;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13373);
          reg = x13373;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13374);
          reg = x13374;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13375);
          reg = x13375;
        }
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":212:21)
      auto x13376 = x95 - x13330;
      if (x13376 != 0) {
        if (x13333 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13377 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x13377 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13378 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13378 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13379 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13379 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13380 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x13380 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13381 = x13378 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13382 = x13377 + x13381;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13383 = x13379 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13384 = x13382 + x13383;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13385 = x13380 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13386 = x13384 + x13385;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13387 = x13386 * x76;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13387);
            reg = x13387;
          }
        }
        if (x13327 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13388 = args[2][126 * steps + ((cycle - 3) & mask)];
          assert(x13388 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13389 = args[2][127 * steps + ((cycle - 3) & mask)];
          assert(x13389 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13390 = args[2][128 * steps + ((cycle - 3) & mask)];
          assert(x13390 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13391 = args[2][129 * steps + ((cycle - 3) & mask)];
          assert(x13391 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13392 = x13389 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13393 = x13388 + x13392;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13394 = x13390 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13395 = x13393 + x13394;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13396 = x13391 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13397 = x13395 + x13396;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13398 = x13397 * x76;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13398);
            reg = x13398;
          }
        }
        if (x13336 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13399 = args[2][133 * steps + ((cycle - 5) & mask)];
          assert(x13399 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13400 = args[2][134 * steps + ((cycle - 5) & mask)];
          assert(x13400 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13401 = args[2][135 * steps + ((cycle - 5) & mask)];
          assert(x13401 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13402 = args[2][136 * steps + ((cycle - 5) & mask)];
          assert(x13402 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13403 = x13400 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13404 = x13399 + x13403;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13405 = x13401 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13406 = x13404 + x13405;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13407 = x13402 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13408 = x13406 + x13407;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13409 = x13408 * x76;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13409);
            reg = x13409;
          }
        }
        if (x13328 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13410 = args[2][119 * steps + ((cycle - 7) & mask)];
          assert(x13410 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13411 = args[2][120 * steps + ((cycle - 7) & mask)];
          assert(x13411 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13412 = args[2][121 * steps + ((cycle - 7) & mask)];
          assert(x13412 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
          auto x13413 = args[2][122 * steps + ((cycle - 7) & mask)];
          assert(x13413 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13414 = x13411 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13415 = x13410 + x13414;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13416 = x13412 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13417 = x13415 + x13416;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13418 = x13413 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13419 = x13417 + x13418;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13420 = x13419 * x76;
          // loc("cirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13420);
            reg = x13420;
          }
        }
      }
      if (x13330 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":242:54))
        auto x13421 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13421 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":242:21)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13421);
          reg = x13421;
        }
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":246:48)
      auto x13422 = x13333 + x13327;
      // loc("cirgen/circuit/rv32im/bigint.cpp":246:48)
      auto x13423 = x13422 + x13336;
      if (x13423 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13424 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13424 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":248:40)
        auto x13425 = x13330 * x78;
        // loc("cirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13426 = x13424 + x13425;
        {
          host_args.at(0) = x13426;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13427 = host_outs.at(0);
          auto x13428 = host_outs.at(1);
          auto x13429 = host_outs.at(2);
          auto x13430 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13427);
            reg = x13427;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13428);
            reg = x13428;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13429);
            reg = x13429;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13430);
            reg = x13430;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13431 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13431 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13432 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13432 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13433 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13434 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13434 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13426);
          reg = x13426;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13431);
          reg = x13431;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13432);
          reg = x13432;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13433);
          reg = x13433;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13434);
          reg = x13434;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13435 = x13426 + x95;
        {
          host_args.at(0) = x13435;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13436 = host_outs.at(0);
          auto x13437 = host_outs.at(1);
          auto x13438 = host_outs.at(2);
          auto x13439 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13436);
            reg = x13436;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13437);
            reg = x13437;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13438);
            reg = x13438;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13439);
            reg = x13439;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13440 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13440 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13441 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13442 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13443 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13443 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13435);
          reg = x13435;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13440);
          reg = x13440;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13441);
          reg = x13441;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13442);
          reg = x13442;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13443);
          reg = x13443;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13444 = x13426 + x92;
        {
          host_args.at(0) = x13444;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13445 = host_outs.at(0);
          auto x13446 = host_outs.at(1);
          auto x13447 = host_outs.at(2);
          auto x13448 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13445);
            reg = x13445;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13446);
            reg = x13446;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13447);
            reg = x13447;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13448);
            reg = x13448;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13449 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13449 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13450 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13451 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13451 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13452 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13452 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13444);
          reg = x13444;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13449);
          reg = x13449;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13450);
          reg = x13450;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13451);
          reg = x13451;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13452);
          reg = x13452;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13453 = x13426 + x77;
        {
          host_args.at(0) = x13453;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13454 = host_outs.at(0);
          auto x13455 = host_outs.at(1);
          auto x13456 = host_outs.at(2);
          auto x13457 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13454);
            reg = x13454;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13455);
            reg = x13455;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13456);
            reg = x13456;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13457);
            reg = x13457;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13458 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13458 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13459 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13459 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13460 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13460 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x13461 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13453);
          reg = x13453;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13458);
          reg = x13458;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13459);
          reg = x13459;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13460);
          reg = x13460;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13461);
          reg = x13461;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":251:10)
        auto x13462 = x13424 * x78;
        // loc("./cirgen/components/u32.h":25:12)
        auto x13463 = x13432 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13464 = x13431 + x13463;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13465 = x13433 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13466 = x13464 + x13465;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13467 = x13434 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13468 = x13466 + x13467;
        // loc("./cirgen/components/u32.h":25:12)
        auto x13469 = x13441 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13470 = x13440 + x13469;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13471 = x13442 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13472 = x13470 + x13471;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13473 = x13443 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13474 = x13472 + x13473;
        // loc("./cirgen/components/u32.h":25:12)
        auto x13475 = x13450 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13476 = x13449 + x13475;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13477 = x13451 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13478 = x13476 + x13477;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13479 = x13452 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13480 = x13478 + x13479;
        // loc("./cirgen/components/u32.h":25:12)
        auto x13481 = x13459 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13482 = x13458 + x13481;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13483 = x13460 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13484 = x13482 + x13483;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13485 = x13461 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13486 = x13484 + x13485;
        host_args.at(0) = x13462;
        host_args.at(1) = x13468;
        host_args.at(2) = x13474;
        host_args.at(3) = x13480;
        host_args.at(4) = x13486;
        host(ctx, "log", "  Reading: ioAddr = 0x%x, data = { %u, %u, %u, %u }", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x24;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13487 = host_outs.at(0);
        auto x13488 = host_outs.at(1);
        auto x13489 = host_outs.at(2);
        auto x13490 = host_outs.at(3);
        // loc("./cirgen/components/u32.h":25:12)
        auto x13491 = x13488 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13492 = x13487 + x13491;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13493 = x13489 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13494 = x13492 + x13493;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13495 = x13490 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13496 = x13494 + x13495;
        // loc("cirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13497 = x13496 * x76;
        host_args.at(0) = x13497;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13498 = host_outs.at(0);
        auto x13499 = host_outs.at(1);
        auto x13500 = host_outs.at(2);
        auto x13501 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13502 = x13497 + x95;
        host_args.at(0) = x13502;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13503 = host_outs.at(0);
        auto x13504 = host_outs.at(1);
        auto x13505 = host_outs.at(2);
        auto x13506 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13507 = x13497 + x92;
        host_args.at(0) = x13507;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13508 = host_outs.at(0);
        auto x13509 = host_outs.at(1);
        auto x13510 = host_outs.at(2);
        auto x13511 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13512 = x13497 + x77;
        host_args.at(0) = x13512;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13513 = host_outs.at(0);
        auto x13514 = host_outs.at(1);
        auto x13515 = host_outs.at(2);
        auto x13516 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13517 = x13497 + x78;
        host_args.at(0) = x13517;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13518 = host_outs.at(0);
        auto x13519 = host_outs.at(1);
        auto x13520 = host_outs.at(2);
        auto x13521 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13522 = x13497 + x74;
        host_args.at(0) = x13522;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13523 = host_outs.at(0);
        auto x13524 = host_outs.at(1);
        auto x13525 = host_outs.at(2);
        auto x13526 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13527 = x13497 + x73;
        host_args.at(0) = x13527;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13528 = host_outs.at(0);
        auto x13529 = host_outs.at(1);
        auto x13530 = host_outs.at(2);
        auto x13531 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13532 = x13497 + x72;
        host_args.at(0) = x13532;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13533 = host_outs.at(0);
        auto x13534 = host_outs.at(1);
        auto x13535 = host_outs.at(2);
        auto x13536 = host_outs.at(3);
        host_args.at(0) = x23;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13537 = host_outs.at(0);
        auto x13538 = host_outs.at(1);
        auto x13539 = host_outs.at(2);
        auto x13540 = host_outs.at(3);
        // loc("./cirgen/components/u32.h":25:12)
        auto x13541 = x13538 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13542 = x13537 + x13541;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13543 = x13539 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13544 = x13542 + x13543;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13545 = x13540 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13546 = x13544 + x13545;
        // loc("cirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13547 = x13546 * x76;
        host_args.at(0) = x13547;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13548 = host_outs.at(0);
        auto x13549 = host_outs.at(1);
        auto x13550 = host_outs.at(2);
        auto x13551 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13552 = x13547 + x95;
        host_args.at(0) = x13552;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13553 = host_outs.at(0);
        auto x13554 = host_outs.at(1);
        auto x13555 = host_outs.at(2);
        auto x13556 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13557 = x13547 + x92;
        host_args.at(0) = x13557;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13558 = host_outs.at(0);
        auto x13559 = host_outs.at(1);
        auto x13560 = host_outs.at(2);
        auto x13561 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13562 = x13547 + x77;
        host_args.at(0) = x13562;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13563 = host_outs.at(0);
        auto x13564 = host_outs.at(1);
        auto x13565 = host_outs.at(2);
        auto x13566 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13567 = x13547 + x78;
        host_args.at(0) = x13567;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13568 = host_outs.at(0);
        auto x13569 = host_outs.at(1);
        auto x13570 = host_outs.at(2);
        auto x13571 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13572 = x13547 + x74;
        host_args.at(0) = x13572;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13573 = host_outs.at(0);
        auto x13574 = host_outs.at(1);
        auto x13575 = host_outs.at(2);
        auto x13576 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13577 = x13547 + x73;
        host_args.at(0) = x13577;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13578 = host_outs.at(0);
        auto x13579 = host_outs.at(1);
        auto x13580 = host_outs.at(2);
        auto x13581 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13582 = x13547 + x72;
        host_args.at(0) = x13582;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13583 = host_outs.at(0);
        auto x13584 = host_outs.at(1);
        auto x13585 = host_outs.at(2);
        auto x13586 = host_outs.at(3);
        host_args.at(0) = x25;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13587 = host_outs.at(0);
        auto x13588 = host_outs.at(1);
        auto x13589 = host_outs.at(2);
        auto x13590 = host_outs.at(3);
        // loc("./cirgen/components/u32.h":25:12)
        auto x13591 = x13588 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13592 = x13587 + x13591;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13593 = x13589 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13594 = x13592 + x13593;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13595 = x13590 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13596 = x13594 + x13595;
        // loc("cirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13597 = x13596 * x76;
        host_args.at(0) = x13597;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13598 = host_outs.at(0);
        auto x13599 = host_outs.at(1);
        auto x13600 = host_outs.at(2);
        auto x13601 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13602 = x13597 + x95;
        host_args.at(0) = x13602;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13603 = host_outs.at(0);
        auto x13604 = host_outs.at(1);
        auto x13605 = host_outs.at(2);
        auto x13606 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13607 = x13597 + x92;
        host_args.at(0) = x13607;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13608 = host_outs.at(0);
        auto x13609 = host_outs.at(1);
        auto x13610 = host_outs.at(2);
        auto x13611 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13612 = x13597 + x77;
        host_args.at(0) = x13612;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13613 = host_outs.at(0);
        auto x13614 = host_outs.at(1);
        auto x13615 = host_outs.at(2);
        auto x13616 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13617 = x13597 + x78;
        host_args.at(0) = x13617;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13618 = host_outs.at(0);
        auto x13619 = host_outs.at(1);
        auto x13620 = host_outs.at(2);
        auto x13621 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13622 = x13597 + x74;
        host_args.at(0) = x13622;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13623 = host_outs.at(0);
        auto x13624 = host_outs.at(1);
        auto x13625 = host_outs.at(2);
        auto x13626 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13627 = x13597 + x73;
        host_args.at(0) = x13627;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13628 = host_outs.at(0);
        auto x13629 = host_outs.at(1);
        auto x13630 = host_outs.at(2);
        auto x13631 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13632 = x13597 + x72;
        host_args.at(0) = x13632;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13633 = host_outs.at(0);
        auto x13634 = host_outs.at(1);
        auto x13635 = host_outs.at(2);
        auto x13636 = host_outs.at(3);
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13637 = x13498 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13638 = x13498 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13639 = x13499 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13640 = x13638 + x13639;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13641 = x13498 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13642 = x13499 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13643 = x13641 + x13642;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13644 = x13500 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13645 = x13643 + x13644;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13646 = x13498 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13647 = x13499 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13648 = x13646 + x13647;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13649 = x13500 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13650 = x13648 + x13649;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13651 = x13501 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13652 = x13650 + x13651;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13653 = x13498 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13654 = x13499 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13655 = x13653 + x13654;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13656 = x13500 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13657 = x13655 + x13656;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13658 = x13501 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13659 = x13657 + x13658;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13660 = x13503 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13661 = x13659 + x13660;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13662 = x13498 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13663 = x13499 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13664 = x13662 + x13663;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13665 = x13500 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13666 = x13664 + x13665;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13667 = x13501 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13668 = x13666 + x13667;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13669 = x13503 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13670 = x13668 + x13669;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13671 = x13504 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13672 = x13670 + x13671;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13673 = x13498 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13674 = x13499 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13675 = x13673 + x13674;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13676 = x13500 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13677 = x13675 + x13676;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13678 = x13501 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13679 = x13677 + x13678;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13680 = x13503 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13681 = x13679 + x13680;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13682 = x13504 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13683 = x13681 + x13682;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13684 = x13505 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13685 = x13683 + x13684;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13686 = x13498 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13687 = x13499 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13688 = x13686 + x13687;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13689 = x13500 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13690 = x13688 + x13689;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13691 = x13501 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13692 = x13690 + x13691;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13693 = x13503 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13694 = x13692 + x13693;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13695 = x13504 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13696 = x13694 + x13695;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13697 = x13505 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13698 = x13696 + x13697;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13699 = x13506 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13700 = x13698 + x13699;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13701 = x13498 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13702 = x13499 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13703 = x13701 + x13702;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13704 = x13500 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13705 = x13703 + x13704;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13706 = x13501 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13707 = x13705 + x13706;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13708 = x13503 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13709 = x13707 + x13708;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13710 = x13504 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13711 = x13709 + x13710;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13712 = x13505 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13713 = x13711 + x13712;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13714 = x13506 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13715 = x13713 + x13714;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13716 = x13508 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13717 = x13715 + x13716;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13718 = x13498 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13719 = x13499 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13720 = x13718 + x13719;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13721 = x13500 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13722 = x13720 + x13721;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13723 = x13501 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13724 = x13722 + x13723;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13725 = x13503 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13726 = x13724 + x13725;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13727 = x13504 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13728 = x13726 + x13727;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13729 = x13505 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13730 = x13728 + x13729;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13731 = x13506 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13732 = x13730 + x13731;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13733 = x13508 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13734 = x13732 + x13733;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13735 = x13509 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13736 = x13734 + x13735;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13737 = x13498 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13738 = x13499 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13739 = x13737 + x13738;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13740 = x13500 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13741 = x13739 + x13740;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13742 = x13501 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13743 = x13741 + x13742;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13744 = x13503 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13745 = x13743 + x13744;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13746 = x13504 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13747 = x13745 + x13746;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13748 = x13505 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13749 = x13747 + x13748;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13750 = x13506 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13751 = x13749 + x13750;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13752 = x13508 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13753 = x13751 + x13752;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13754 = x13509 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13755 = x13753 + x13754;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13756 = x13510 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13757 = x13755 + x13756;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13758 = x13498 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13759 = x13499 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13760 = x13758 + x13759;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13761 = x13500 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13762 = x13760 + x13761;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13763 = x13501 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13764 = x13762 + x13763;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13765 = x13503 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13766 = x13764 + x13765;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13767 = x13504 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13768 = x13766 + x13767;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13769 = x13505 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13770 = x13768 + x13769;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13771 = x13506 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13772 = x13770 + x13771;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13773 = x13508 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13774 = x13772 + x13773;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13775 = x13509 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13776 = x13774 + x13775;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13777 = x13510 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13778 = x13776 + x13777;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13779 = x13511 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13780 = x13778 + x13779;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13781 = x13498 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13782 = x13499 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13783 = x13781 + x13782;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13784 = x13500 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13785 = x13783 + x13784;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13786 = x13501 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13787 = x13785 + x13786;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13788 = x13503 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13789 = x13787 + x13788;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13790 = x13504 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13791 = x13789 + x13790;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13792 = x13505 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13793 = x13791 + x13792;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13794 = x13506 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13795 = x13793 + x13794;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13796 = x13508 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13797 = x13795 + x13796;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13798 = x13509 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13799 = x13797 + x13798;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13800 = x13510 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13801 = x13799 + x13800;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13802 = x13511 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13803 = x13801 + x13802;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13804 = x13513 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13805 = x13803 + x13804;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13806 = x13498 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13807 = x13499 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13808 = x13806 + x13807;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13809 = x13500 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13810 = x13808 + x13809;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13811 = x13501 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13812 = x13810 + x13811;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13813 = x13503 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13814 = x13812 + x13813;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13815 = x13504 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13816 = x13814 + x13815;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13817 = x13505 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13818 = x13816 + x13817;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13819 = x13506 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13820 = x13818 + x13819;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13821 = x13508 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13822 = x13820 + x13821;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13823 = x13509 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13824 = x13822 + x13823;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13825 = x13510 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13826 = x13824 + x13825;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13827 = x13511 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13828 = x13826 + x13827;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13829 = x13513 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13830 = x13828 + x13829;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13831 = x13514 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13832 = x13830 + x13831;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13833 = x13498 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13834 = x13499 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13835 = x13833 + x13834;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13836 = x13500 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13837 = x13835 + x13836;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13838 = x13501 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13839 = x13837 + x13838;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13840 = x13503 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13841 = x13839 + x13840;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13842 = x13504 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13843 = x13841 + x13842;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13844 = x13505 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13845 = x13843 + x13844;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13846 = x13506 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13847 = x13845 + x13846;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13848 = x13508 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13849 = x13847 + x13848;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13850 = x13509 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13851 = x13849 + x13850;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13852 = x13510 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13853 = x13851 + x13852;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13854 = x13511 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13855 = x13853 + x13854;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13856 = x13513 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13857 = x13855 + x13856;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13858 = x13514 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13859 = x13857 + x13858;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13860 = x13515 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13861 = x13859 + x13860;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13862 = x13498 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13863 = x13499 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13864 = x13862 + x13863;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13865 = x13500 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13866 = x13864 + x13865;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13867 = x13501 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13868 = x13866 + x13867;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13869 = x13503 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13870 = x13868 + x13869;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13871 = x13504 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13872 = x13870 + x13871;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13873 = x13505 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13874 = x13872 + x13873;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13875 = x13506 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13876 = x13874 + x13875;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13877 = x13508 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13878 = x13876 + x13877;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13879 = x13509 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13880 = x13878 + x13879;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13881 = x13510 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13882 = x13880 + x13881;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13883 = x13511 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13884 = x13882 + x13883;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13885 = x13513 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13886 = x13884 + x13885;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13887 = x13514 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13888 = x13886 + x13887;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13889 = x13515 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13890 = x13888 + x13889;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13891 = x13516 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13892 = x13890 + x13891;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13893 = x13498 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13894 = x13499 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13895 = x13893 + x13894;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13896 = x13500 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13897 = x13895 + x13896;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13898 = x13501 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13899 = x13897 + x13898;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13900 = x13503 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13901 = x13899 + x13900;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13902 = x13504 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13903 = x13901 + x13902;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13904 = x13505 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13905 = x13903 + x13904;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13906 = x13506 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13907 = x13905 + x13906;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13908 = x13508 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13909 = x13907 + x13908;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13910 = x13509 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13911 = x13909 + x13910;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13912 = x13510 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13913 = x13911 + x13912;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13914 = x13511 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13915 = x13913 + x13914;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13916 = x13513 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13917 = x13915 + x13916;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13918 = x13514 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13919 = x13917 + x13918;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13920 = x13515 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13921 = x13919 + x13920;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13922 = x13516 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13923 = x13921 + x13922;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13924 = x13518 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13925 = x13923 + x13924;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13926 = x13498 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13927 = x13499 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13928 = x13926 + x13927;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13929 = x13500 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13930 = x13928 + x13929;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13931 = x13501 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13932 = x13930 + x13931;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13933 = x13503 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13934 = x13932 + x13933;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13935 = x13504 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13936 = x13934 + x13935;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13937 = x13505 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13938 = x13936 + x13937;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13939 = x13506 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13940 = x13938 + x13939;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13941 = x13508 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13942 = x13940 + x13941;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13943 = x13509 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13944 = x13942 + x13943;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13945 = x13510 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13946 = x13944 + x13945;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13947 = x13511 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13948 = x13946 + x13947;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13949 = x13513 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13950 = x13948 + x13949;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13951 = x13514 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13952 = x13950 + x13951;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13953 = x13515 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13954 = x13952 + x13953;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13955 = x13516 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13956 = x13954 + x13955;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13957 = x13518 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13958 = x13956 + x13957;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13959 = x13519 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13960 = x13958 + x13959;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13961 = x13498 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13962 = x13499 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13963 = x13961 + x13962;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13964 = x13500 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13965 = x13963 + x13964;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13966 = x13501 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13967 = x13965 + x13966;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13968 = x13503 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13969 = x13967 + x13968;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13970 = x13504 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13971 = x13969 + x13970;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13972 = x13505 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13973 = x13971 + x13972;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13974 = x13506 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13975 = x13973 + x13974;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13976 = x13508 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13977 = x13975 + x13976;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13978 = x13509 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13979 = x13977 + x13978;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13980 = x13510 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13981 = x13979 + x13980;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13982 = x13511 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13983 = x13981 + x13982;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13984 = x13513 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13985 = x13983 + x13984;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13986 = x13514 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13987 = x13985 + x13986;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13988 = x13515 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13989 = x13987 + x13988;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13990 = x13516 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13991 = x13989 + x13990;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13992 = x13518 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13993 = x13991 + x13992;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13994 = x13519 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13995 = x13993 + x13994;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13996 = x13520 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13997 = x13995 + x13996;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13998 = x13498 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13999 = x13499 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14000 = x13998 + x13999;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14001 = x13500 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14002 = x14000 + x14001;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14003 = x13501 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14004 = x14002 + x14003;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14005 = x13503 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14006 = x14004 + x14005;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14007 = x13504 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14008 = x14006 + x14007;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14009 = x13505 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14010 = x14008 + x14009;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14011 = x13506 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14012 = x14010 + x14011;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14013 = x13508 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14014 = x14012 + x14013;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14015 = x13509 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14016 = x14014 + x14015;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14017 = x13510 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14018 = x14016 + x14017;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14019 = x13511 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14020 = x14018 + x14019;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14021 = x13513 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14022 = x14020 + x14021;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14023 = x13514 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14024 = x14022 + x14023;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14025 = x13515 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14026 = x14024 + x14025;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14027 = x13516 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14028 = x14026 + x14027;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14029 = x13518 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14030 = x14028 + x14029;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14031 = x13519 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14032 = x14030 + x14031;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14033 = x13520 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14034 = x14032 + x14033;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14035 = x13521 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14036 = x14034 + x14035;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14037 = x13498 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14038 = x13499 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14039 = x14037 + x14038;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14040 = x13500 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14041 = x14039 + x14040;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14042 = x13501 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14043 = x14041 + x14042;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14044 = x13503 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14045 = x14043 + x14044;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14046 = x13504 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14047 = x14045 + x14046;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14048 = x13505 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14049 = x14047 + x14048;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14050 = x13506 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14051 = x14049 + x14050;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14052 = x13508 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14053 = x14051 + x14052;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14054 = x13509 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14055 = x14053 + x14054;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14056 = x13510 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14057 = x14055 + x14056;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14058 = x13511 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14059 = x14057 + x14058;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14060 = x13513 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14061 = x14059 + x14060;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14062 = x13514 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14063 = x14061 + x14062;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14064 = x13515 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14065 = x14063 + x14064;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14066 = x13516 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14067 = x14065 + x14066;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14068 = x13518 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14069 = x14067 + x14068;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14070 = x13519 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14071 = x14069 + x14070;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14072 = x13520 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14073 = x14071 + x14072;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14074 = x13521 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14075 = x14073 + x14074;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14076 = x13523 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14077 = x14075 + x14076;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14078 = x13498 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14079 = x13499 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14080 = x14078 + x14079;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14081 = x13500 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14082 = x14080 + x14081;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14083 = x13501 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14084 = x14082 + x14083;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14085 = x13503 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14086 = x14084 + x14085;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14087 = x13504 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14088 = x14086 + x14087;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14089 = x13505 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14090 = x14088 + x14089;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14091 = x13506 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14092 = x14090 + x14091;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14093 = x13508 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14094 = x14092 + x14093;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14095 = x13509 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14096 = x14094 + x14095;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14097 = x13510 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14098 = x14096 + x14097;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14099 = x13511 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14100 = x14098 + x14099;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14101 = x13513 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14102 = x14100 + x14101;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14103 = x13514 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14104 = x14102 + x14103;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14105 = x13515 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14106 = x14104 + x14105;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14107 = x13516 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14108 = x14106 + x14107;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14109 = x13518 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14110 = x14108 + x14109;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14111 = x13519 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14112 = x14110 + x14111;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14113 = x13520 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14114 = x14112 + x14113;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14115 = x13521 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14116 = x14114 + x14115;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14117 = x13523 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14118 = x14116 + x14117;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14119 = x13524 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14120 = x14118 + x14119;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14121 = x13498 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14122 = x13499 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14123 = x14121 + x14122;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14124 = x13500 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14125 = x14123 + x14124;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14126 = x13501 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14127 = x14125 + x14126;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14128 = x13503 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14129 = x14127 + x14128;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14130 = x13504 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14131 = x14129 + x14130;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14132 = x13505 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14133 = x14131 + x14132;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14134 = x13506 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14135 = x14133 + x14134;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14136 = x13508 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14137 = x14135 + x14136;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14138 = x13509 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14139 = x14137 + x14138;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14140 = x13510 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14141 = x14139 + x14140;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14142 = x13511 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14143 = x14141 + x14142;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14144 = x13513 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14145 = x14143 + x14144;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14146 = x13514 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14147 = x14145 + x14146;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14148 = x13515 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14149 = x14147 + x14148;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14150 = x13516 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14151 = x14149 + x14150;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14152 = x13518 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14153 = x14151 + x14152;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14154 = x13519 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14155 = x14153 + x14154;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14156 = x13520 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14157 = x14155 + x14156;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14158 = x13521 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14159 = x14157 + x14158;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14160 = x13523 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14161 = x14159 + x14160;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14162 = x13524 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14163 = x14161 + x14162;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14164 = x13525 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14165 = x14163 + x14164;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14166 = x13498 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14167 = x13499 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14168 = x14166 + x14167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14169 = x13500 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14170 = x14168 + x14169;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14171 = x13501 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14172 = x14170 + x14171;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14173 = x13503 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14174 = x14172 + x14173;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14175 = x13504 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14176 = x14174 + x14175;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14177 = x13505 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14178 = x14176 + x14177;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14179 = x13506 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14180 = x14178 + x14179;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14181 = x13508 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14182 = x14180 + x14181;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14183 = x13509 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14184 = x14182 + x14183;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14185 = x13510 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14186 = x14184 + x14185;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14187 = x13511 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14188 = x14186 + x14187;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14189 = x13513 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14190 = x14188 + x14189;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14191 = x13514 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14192 = x14190 + x14191;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14193 = x13515 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14194 = x14192 + x14193;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14195 = x13516 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14196 = x14194 + x14195;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14197 = x13518 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14198 = x14196 + x14197;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14199 = x13519 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14200 = x14198 + x14199;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14201 = x13520 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14202 = x14200 + x14201;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14203 = x13521 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14204 = x14202 + x14203;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14205 = x13523 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14206 = x14204 + x14205;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14207 = x13524 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14208 = x14206 + x14207;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14209 = x13525 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14210 = x14208 + x14209;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14211 = x13526 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14212 = x14210 + x14211;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14213 = x13498 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14214 = x13499 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14215 = x14213 + x14214;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14216 = x13500 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14217 = x14215 + x14216;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14218 = x13501 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14219 = x14217 + x14218;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14220 = x13503 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14221 = x14219 + x14220;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14222 = x13504 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14223 = x14221 + x14222;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14224 = x13505 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14225 = x14223 + x14224;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14226 = x13506 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14227 = x14225 + x14226;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14228 = x13508 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14229 = x14227 + x14228;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14230 = x13509 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14231 = x14229 + x14230;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14232 = x13510 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14233 = x14231 + x14232;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14234 = x13511 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14235 = x14233 + x14234;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14236 = x13513 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14237 = x14235 + x14236;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14238 = x13514 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14239 = x14237 + x14238;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14240 = x13515 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14241 = x14239 + x14240;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14242 = x13516 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14243 = x14241 + x14242;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14244 = x13518 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14245 = x14243 + x14244;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14246 = x13519 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14247 = x14245 + x14246;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14248 = x13520 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14249 = x14247 + x14248;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14250 = x13521 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14251 = x14249 + x14250;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14252 = x13523 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14253 = x14251 + x14252;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14254 = x13524 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14255 = x14253 + x14254;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14256 = x13525 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14257 = x14255 + x14256;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14258 = x13526 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14259 = x14257 + x14258;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14260 = x13528 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14261 = x14259 + x14260;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14262 = x13498 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14263 = x13499 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14264 = x14262 + x14263;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14265 = x13500 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14266 = x14264 + x14265;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14267 = x13501 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14268 = x14266 + x14267;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14269 = x13503 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14270 = x14268 + x14269;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14271 = x13504 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14272 = x14270 + x14271;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14273 = x13505 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14274 = x14272 + x14273;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14275 = x13506 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14276 = x14274 + x14275;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14277 = x13508 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14278 = x14276 + x14277;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14279 = x13509 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14280 = x14278 + x14279;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14281 = x13510 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14282 = x14280 + x14281;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14283 = x13511 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14284 = x14282 + x14283;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14285 = x13513 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14286 = x14284 + x14285;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14287 = x13514 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14288 = x14286 + x14287;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14289 = x13515 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14290 = x14288 + x14289;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14291 = x13516 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14292 = x14290 + x14291;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14293 = x13518 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14294 = x14292 + x14293;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14295 = x13519 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14296 = x14294 + x14295;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14297 = x13520 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14298 = x14296 + x14297;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14299 = x13521 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14300 = x14298 + x14299;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14301 = x13523 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14302 = x14300 + x14301;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14303 = x13524 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14304 = x14302 + x14303;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14305 = x13525 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14306 = x14304 + x14305;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14307 = x13526 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14308 = x14306 + x14307;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14309 = x13528 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14310 = x14308 + x14309;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14311 = x13529 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14312 = x14310 + x14311;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14313 = x13498 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14314 = x13499 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14315 = x14313 + x14314;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14316 = x13500 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14317 = x14315 + x14316;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14318 = x13501 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14319 = x14317 + x14318;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14320 = x13503 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14321 = x14319 + x14320;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14322 = x13504 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14323 = x14321 + x14322;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14324 = x13505 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14325 = x14323 + x14324;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14326 = x13506 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14327 = x14325 + x14326;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14328 = x13508 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14329 = x14327 + x14328;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14330 = x13509 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14331 = x14329 + x14330;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14332 = x13510 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14333 = x14331 + x14332;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14334 = x13511 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14335 = x14333 + x14334;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14336 = x13513 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14337 = x14335 + x14336;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14338 = x13514 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14339 = x14337 + x14338;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14340 = x13515 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14341 = x14339 + x14340;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14342 = x13516 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14343 = x14341 + x14342;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14344 = x13518 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14345 = x14343 + x14344;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14346 = x13519 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14347 = x14345 + x14346;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14348 = x13520 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14349 = x14347 + x14348;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14350 = x13521 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14351 = x14349 + x14350;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14352 = x13523 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14353 = x14351 + x14352;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14354 = x13524 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14355 = x14353 + x14354;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14356 = x13525 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14357 = x14355 + x14356;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14358 = x13526 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14359 = x14357 + x14358;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14360 = x13528 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14361 = x14359 + x14360;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14362 = x13529 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14363 = x14361 + x14362;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14364 = x13530 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14365 = x14363 + x14364;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14366 = x13498 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14367 = x13499 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14368 = x14366 + x14367;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14369 = x13500 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14370 = x14368 + x14369;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14371 = x13501 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14372 = x14370 + x14371;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14373 = x13503 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14374 = x14372 + x14373;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14375 = x13504 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14376 = x14374 + x14375;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14377 = x13505 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14378 = x14376 + x14377;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14379 = x13506 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14380 = x14378 + x14379;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14381 = x13508 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14382 = x14380 + x14381;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14383 = x13509 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14384 = x14382 + x14383;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14385 = x13510 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14386 = x14384 + x14385;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14387 = x13511 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14388 = x14386 + x14387;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14389 = x13513 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14390 = x14388 + x14389;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14391 = x13514 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14392 = x14390 + x14391;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14393 = x13515 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14394 = x14392 + x14393;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14395 = x13516 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14396 = x14394 + x14395;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14397 = x13518 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14398 = x14396 + x14397;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14399 = x13519 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14400 = x14398 + x14399;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14401 = x13520 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14402 = x14400 + x14401;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14403 = x13521 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14404 = x14402 + x14403;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14405 = x13523 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14406 = x14404 + x14405;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14407 = x13524 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14408 = x14406 + x14407;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14409 = x13525 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14410 = x14408 + x14409;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14411 = x13526 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14412 = x14410 + x14411;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14413 = x13528 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14414 = x14412 + x14413;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14415 = x13529 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14416 = x14414 + x14415;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14417 = x13530 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14418 = x14416 + x14417;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14419 = x13531 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14420 = x14418 + x14419;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14421 = x13498 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14422 = x13499 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14423 = x14421 + x14422;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14424 = x13500 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14425 = x14423 + x14424;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14426 = x13501 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14427 = x14425 + x14426;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14428 = x13503 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14429 = x14427 + x14428;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14430 = x13504 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14431 = x14429 + x14430;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14432 = x13505 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14433 = x14431 + x14432;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14434 = x13506 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14435 = x14433 + x14434;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14436 = x13508 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14437 = x14435 + x14436;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14438 = x13509 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14439 = x14437 + x14438;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14440 = x13510 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14441 = x14439 + x14440;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14442 = x13511 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14443 = x14441 + x14442;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14444 = x13513 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14445 = x14443 + x14444;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14446 = x13514 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14447 = x14445 + x14446;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14448 = x13515 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14449 = x14447 + x14448;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14450 = x13516 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14451 = x14449 + x14450;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14452 = x13518 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14453 = x14451 + x14452;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14454 = x13519 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14455 = x14453 + x14454;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14456 = x13520 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14457 = x14455 + x14456;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14458 = x13521 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14459 = x14457 + x14458;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14460 = x13523 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14461 = x14459 + x14460;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14462 = x13524 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14463 = x14461 + x14462;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14464 = x13525 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14465 = x14463 + x14464;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14466 = x13526 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14467 = x14465 + x14466;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14468 = x13528 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14469 = x14467 + x14468;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14470 = x13529 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14471 = x14469 + x14470;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14472 = x13530 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14473 = x14471 + x14472;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14474 = x13531 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14475 = x14473 + x14474;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14476 = x13533 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14477 = x14475 + x14476;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14478 = x13498 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14479 = x13499 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14480 = x14478 + x14479;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14481 = x13500 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14482 = x14480 + x14481;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14483 = x13501 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14484 = x14482 + x14483;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14485 = x13503 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14486 = x14484 + x14485;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14487 = x13504 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14488 = x14486 + x14487;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14489 = x13505 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14490 = x14488 + x14489;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14491 = x13506 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14492 = x14490 + x14491;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14493 = x13508 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14494 = x14492 + x14493;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14495 = x13509 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14496 = x14494 + x14495;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14497 = x13510 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14498 = x14496 + x14497;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14499 = x13511 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14500 = x14498 + x14499;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14501 = x13513 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14502 = x14500 + x14501;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14503 = x13514 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14504 = x14502 + x14503;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14505 = x13515 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14506 = x14504 + x14505;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14507 = x13516 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14508 = x14506 + x14507;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14509 = x13518 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14510 = x14508 + x14509;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14511 = x13519 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14512 = x14510 + x14511;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14513 = x13520 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14514 = x14512 + x14513;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14515 = x13521 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14516 = x14514 + x14515;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14517 = x13523 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14518 = x14516 + x14517;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14519 = x13524 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14520 = x14518 + x14519;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14521 = x13525 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14522 = x14520 + x14521;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14523 = x13526 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14524 = x14522 + x14523;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14525 = x13528 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14526 = x14524 + x14525;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14527 = x13529 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14528 = x14526 + x14527;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14529 = x13530 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14530 = x14528 + x14529;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14531 = x13531 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14532 = x14530 + x14531;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14533 = x13533 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14534 = x14532 + x14533;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14535 = x13534 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14536 = x14534 + x14535;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14537 = x13498 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14538 = x13499 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14539 = x14537 + x14538;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14540 = x13500 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14541 = x14539 + x14540;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14542 = x13501 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14543 = x14541 + x14542;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14544 = x13503 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14545 = x14543 + x14544;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14546 = x13504 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14547 = x14545 + x14546;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14548 = x13505 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14549 = x14547 + x14548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14550 = x13506 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14551 = x14549 + x14550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14552 = x13508 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14553 = x14551 + x14552;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14554 = x13509 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14555 = x14553 + x14554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14556 = x13510 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14557 = x14555 + x14556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14558 = x13511 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14559 = x14557 + x14558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14560 = x13513 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14561 = x14559 + x14560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14562 = x13514 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14563 = x14561 + x14562;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14564 = x13515 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14565 = x14563 + x14564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14566 = x13516 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14567 = x14565 + x14566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14568 = x13518 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14569 = x14567 + x14568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14570 = x13519 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14571 = x14569 + x14570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14572 = x13520 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14573 = x14571 + x14572;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14574 = x13521 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14575 = x14573 + x14574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14576 = x13523 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14577 = x14575 + x14576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14578 = x13524 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14579 = x14577 + x14578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14580 = x13525 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14581 = x14579 + x14580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14582 = x13526 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14583 = x14581 + x14582;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14584 = x13528 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14585 = x14583 + x14584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14586 = x13529 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14587 = x14585 + x14586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14588 = x13530 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14589 = x14587 + x14588;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14590 = x13531 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14591 = x14589 + x14590;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14592 = x13533 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14593 = x14591 + x14592;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14594 = x13534 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14595 = x14593 + x14594;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14596 = x13535 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14597 = x14595 + x14596;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14598 = x13498 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14599 = x13499 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14600 = x14598 + x14599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14601 = x13500 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14602 = x14600 + x14601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14603 = x13501 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14604 = x14602 + x14603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14605 = x13503 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14606 = x14604 + x14605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14607 = x13504 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14608 = x14606 + x14607;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14609 = x13505 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14610 = x14608 + x14609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14611 = x13506 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14612 = x14610 + x14611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14613 = x13508 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14614 = x14612 + x14613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14615 = x13509 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14616 = x14614 + x14615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14617 = x13510 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14618 = x14616 + x14617;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14619 = x13511 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14620 = x14618 + x14619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14621 = x13513 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14622 = x14620 + x14621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14623 = x13514 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14624 = x14622 + x14623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14625 = x13515 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14626 = x14624 + x14625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14627 = x13516 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14628 = x14626 + x14627;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14629 = x13518 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14630 = x14628 + x14629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14631 = x13519 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14632 = x14630 + x14631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14633 = x13520 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14634 = x14632 + x14633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14635 = x13521 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14636 = x14634 + x14635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14637 = x13523 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14638 = x14636 + x14637;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14639 = x13524 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14640 = x14638 + x14639;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14641 = x13525 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14642 = x14640 + x14641;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14643 = x13526 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14644 = x14642 + x14643;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14645 = x13528 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14646 = x14644 + x14645;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14647 = x13529 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14648 = x14646 + x14647;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14649 = x13530 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14650 = x14648 + x14649;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14651 = x13531 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14652 = x14650 + x14651;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14653 = x13533 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14654 = x14652 + x14653;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14655 = x13534 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14656 = x14654 + x14655;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14657 = x13535 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14658 = x14656 + x14657;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14659 = x13536 * x13548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14660 = x14658 + x14659;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14661 = x13499 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14662 = x13500 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14663 = x14661 + x14662;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14664 = x13501 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14665 = x14663 + x14664;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14666 = x13503 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14667 = x14665 + x14666;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14668 = x13504 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14669 = x14667 + x14668;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14670 = x13505 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14671 = x14669 + x14670;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14672 = x13506 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14673 = x14671 + x14672;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14674 = x13508 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14675 = x14673 + x14674;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14676 = x13509 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14677 = x14675 + x14676;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14678 = x13510 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14679 = x14677 + x14678;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14680 = x13511 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14681 = x14679 + x14680;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14682 = x13513 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14683 = x14681 + x14682;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14684 = x13514 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14685 = x14683 + x14684;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14686 = x13515 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14687 = x14685 + x14686;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14688 = x13516 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14689 = x14687 + x14688;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14690 = x13518 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14691 = x14689 + x14690;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14692 = x13519 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14693 = x14691 + x14692;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14694 = x13520 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14695 = x14693 + x14694;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14696 = x13521 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14697 = x14695 + x14696;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14698 = x13523 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14699 = x14697 + x14698;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14700 = x13524 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14701 = x14699 + x14700;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14702 = x13525 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14703 = x14701 + x14702;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14704 = x13526 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14705 = x14703 + x14704;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14706 = x13528 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14707 = x14705 + x14706;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14708 = x13529 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14709 = x14707 + x14708;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14710 = x13530 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14711 = x14709 + x14710;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14712 = x13531 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14713 = x14711 + x14712;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14714 = x13533 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14715 = x14713 + x14714;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14716 = x13534 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14717 = x14715 + x14716;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14718 = x13535 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14719 = x14717 + x14718;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14720 = x13536 * x13549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14721 = x14719 + x14720;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14722 = x13500 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14723 = x13501 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14724 = x14722 + x14723;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14725 = x13503 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14726 = x14724 + x14725;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14727 = x13504 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14728 = x14726 + x14727;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14729 = x13505 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14730 = x14728 + x14729;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14731 = x13506 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14732 = x14730 + x14731;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14733 = x13508 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14734 = x14732 + x14733;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14735 = x13509 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14736 = x14734 + x14735;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14737 = x13510 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14738 = x14736 + x14737;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14739 = x13511 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14740 = x14738 + x14739;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14741 = x13513 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14742 = x14740 + x14741;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14743 = x13514 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14744 = x14742 + x14743;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14745 = x13515 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14746 = x14744 + x14745;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14747 = x13516 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14748 = x14746 + x14747;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14749 = x13518 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14750 = x14748 + x14749;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14751 = x13519 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14752 = x14750 + x14751;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14753 = x13520 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14754 = x14752 + x14753;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14755 = x13521 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14756 = x14754 + x14755;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14757 = x13523 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14758 = x14756 + x14757;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14759 = x13524 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14760 = x14758 + x14759;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14761 = x13525 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14762 = x14760 + x14761;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14763 = x13526 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14764 = x14762 + x14763;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14765 = x13528 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14766 = x14764 + x14765;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14767 = x13529 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14768 = x14766 + x14767;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14769 = x13530 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14770 = x14768 + x14769;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14771 = x13531 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14772 = x14770 + x14771;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14773 = x13533 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14774 = x14772 + x14773;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14775 = x13534 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14776 = x14774 + x14775;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14777 = x13535 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14778 = x14776 + x14777;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14779 = x13536 * x13550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14780 = x14778 + x14779;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14781 = x13501 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14782 = x13503 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14783 = x14781 + x14782;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14784 = x13504 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14785 = x14783 + x14784;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14786 = x13505 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14787 = x14785 + x14786;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14788 = x13506 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14789 = x14787 + x14788;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14790 = x13508 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14791 = x14789 + x14790;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14792 = x13509 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14793 = x14791 + x14792;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14794 = x13510 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14795 = x14793 + x14794;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14796 = x13511 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14797 = x14795 + x14796;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14798 = x13513 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14799 = x14797 + x14798;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14800 = x13514 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14801 = x14799 + x14800;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14802 = x13515 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14803 = x14801 + x14802;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14804 = x13516 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14805 = x14803 + x14804;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14806 = x13518 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14807 = x14805 + x14806;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14808 = x13519 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14809 = x14807 + x14808;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14810 = x13520 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14811 = x14809 + x14810;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14812 = x13521 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14813 = x14811 + x14812;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14814 = x13523 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14815 = x14813 + x14814;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14816 = x13524 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14817 = x14815 + x14816;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14818 = x13525 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14819 = x14817 + x14818;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14820 = x13526 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14821 = x14819 + x14820;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14822 = x13528 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14823 = x14821 + x14822;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14824 = x13529 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14825 = x14823 + x14824;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14826 = x13530 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14827 = x14825 + x14826;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14828 = x13531 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14829 = x14827 + x14828;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14830 = x13533 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14831 = x14829 + x14830;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14832 = x13534 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14833 = x14831 + x14832;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14834 = x13535 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14835 = x14833 + x14834;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14836 = x13536 * x13551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14837 = x14835 + x14836;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14838 = x13503 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14839 = x13504 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14840 = x14838 + x14839;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14841 = x13505 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14842 = x14840 + x14841;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14843 = x13506 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14844 = x14842 + x14843;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14845 = x13508 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14846 = x14844 + x14845;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14847 = x13509 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14848 = x14846 + x14847;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14849 = x13510 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14850 = x14848 + x14849;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14851 = x13511 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14852 = x14850 + x14851;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14853 = x13513 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14854 = x14852 + x14853;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14855 = x13514 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14856 = x14854 + x14855;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14857 = x13515 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14858 = x14856 + x14857;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14859 = x13516 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14860 = x14858 + x14859;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14861 = x13518 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14862 = x14860 + x14861;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14863 = x13519 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14864 = x14862 + x14863;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14865 = x13520 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14866 = x14864 + x14865;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14867 = x13521 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14868 = x14866 + x14867;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14869 = x13523 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14870 = x14868 + x14869;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14871 = x13524 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14872 = x14870 + x14871;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14873 = x13525 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14874 = x14872 + x14873;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14875 = x13526 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14876 = x14874 + x14875;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14877 = x13528 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14878 = x14876 + x14877;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14879 = x13529 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14880 = x14878 + x14879;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14881 = x13530 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14882 = x14880 + x14881;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14883 = x13531 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14884 = x14882 + x14883;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14885 = x13533 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14886 = x14884 + x14885;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14887 = x13534 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14888 = x14886 + x14887;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14889 = x13535 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14890 = x14888 + x14889;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14891 = x13536 * x13553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14892 = x14890 + x14891;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14893 = x13504 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14894 = x13505 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14895 = x14893 + x14894;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14896 = x13506 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14897 = x14895 + x14896;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14898 = x13508 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14899 = x14897 + x14898;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14900 = x13509 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14901 = x14899 + x14900;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14902 = x13510 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14903 = x14901 + x14902;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14904 = x13511 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14905 = x14903 + x14904;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14906 = x13513 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14907 = x14905 + x14906;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14908 = x13514 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14909 = x14907 + x14908;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14910 = x13515 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14911 = x14909 + x14910;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14912 = x13516 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14913 = x14911 + x14912;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14914 = x13518 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14915 = x14913 + x14914;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14916 = x13519 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14917 = x14915 + x14916;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14918 = x13520 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14919 = x14917 + x14918;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14920 = x13521 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14921 = x14919 + x14920;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14922 = x13523 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14923 = x14921 + x14922;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14924 = x13524 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14925 = x14923 + x14924;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14926 = x13525 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14927 = x14925 + x14926;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14928 = x13526 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14929 = x14927 + x14928;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14930 = x13528 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14931 = x14929 + x14930;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14932 = x13529 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14933 = x14931 + x14932;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14934 = x13530 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14935 = x14933 + x14934;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14936 = x13531 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14937 = x14935 + x14936;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14938 = x13533 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14939 = x14937 + x14938;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14940 = x13534 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14941 = x14939 + x14940;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14942 = x13535 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14943 = x14941 + x14942;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14944 = x13536 * x13554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14945 = x14943 + x14944;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14946 = x13505 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14947 = x13506 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14948 = x14946 + x14947;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14949 = x13508 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14950 = x14948 + x14949;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14951 = x13509 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14952 = x14950 + x14951;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14953 = x13510 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14954 = x14952 + x14953;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14955 = x13511 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14956 = x14954 + x14955;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14957 = x13513 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14958 = x14956 + x14957;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14959 = x13514 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14960 = x14958 + x14959;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14961 = x13515 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14962 = x14960 + x14961;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14963 = x13516 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14964 = x14962 + x14963;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14965 = x13518 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14966 = x14964 + x14965;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14967 = x13519 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14968 = x14966 + x14967;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14969 = x13520 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14970 = x14968 + x14969;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14971 = x13521 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14972 = x14970 + x14971;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14973 = x13523 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14974 = x14972 + x14973;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14975 = x13524 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14976 = x14974 + x14975;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14977 = x13525 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14978 = x14976 + x14977;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14979 = x13526 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14980 = x14978 + x14979;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14981 = x13528 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14982 = x14980 + x14981;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14983 = x13529 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14984 = x14982 + x14983;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14985 = x13530 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14986 = x14984 + x14985;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14987 = x13531 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14988 = x14986 + x14987;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14989 = x13533 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14990 = x14988 + x14989;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14991 = x13534 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14992 = x14990 + x14991;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14993 = x13535 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14994 = x14992 + x14993;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14995 = x13536 * x13555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14996 = x14994 + x14995;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14997 = x13506 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14998 = x13508 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14999 = x14997 + x14998;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15000 = x13509 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15001 = x14999 + x15000;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15002 = x13510 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15003 = x15001 + x15002;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15004 = x13511 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15005 = x15003 + x15004;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15006 = x13513 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15007 = x15005 + x15006;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15008 = x13514 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15009 = x15007 + x15008;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15010 = x13515 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15011 = x15009 + x15010;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15012 = x13516 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15013 = x15011 + x15012;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15014 = x13518 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15015 = x15013 + x15014;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15016 = x13519 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15017 = x15015 + x15016;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15018 = x13520 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15019 = x15017 + x15018;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15020 = x13521 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15021 = x15019 + x15020;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15022 = x13523 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15023 = x15021 + x15022;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15024 = x13524 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15025 = x15023 + x15024;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15026 = x13525 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15027 = x15025 + x15026;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15028 = x13526 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15029 = x15027 + x15028;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15030 = x13528 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15031 = x15029 + x15030;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15032 = x13529 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15033 = x15031 + x15032;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15034 = x13530 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15035 = x15033 + x15034;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15036 = x13531 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15037 = x15035 + x15036;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15038 = x13533 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15039 = x15037 + x15038;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15040 = x13534 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15041 = x15039 + x15040;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15042 = x13535 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15043 = x15041 + x15042;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15044 = x13536 * x13556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15045 = x15043 + x15044;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15046 = x13508 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15047 = x13509 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15048 = x15046 + x15047;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15049 = x13510 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15050 = x15048 + x15049;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15051 = x13511 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15052 = x15050 + x15051;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15053 = x13513 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15054 = x15052 + x15053;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15055 = x13514 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15056 = x15054 + x15055;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15057 = x13515 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15058 = x15056 + x15057;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15059 = x13516 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15060 = x15058 + x15059;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15061 = x13518 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15062 = x15060 + x15061;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15063 = x13519 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15064 = x15062 + x15063;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15065 = x13520 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15066 = x15064 + x15065;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15067 = x13521 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15068 = x15066 + x15067;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15069 = x13523 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15070 = x15068 + x15069;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15071 = x13524 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15072 = x15070 + x15071;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15073 = x13525 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15074 = x15072 + x15073;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15075 = x13526 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15076 = x15074 + x15075;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15077 = x13528 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15078 = x15076 + x15077;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15079 = x13529 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15080 = x15078 + x15079;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15081 = x13530 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15082 = x15080 + x15081;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15083 = x13531 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15084 = x15082 + x15083;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15085 = x13533 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15086 = x15084 + x15085;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15087 = x13534 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15088 = x15086 + x15087;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15089 = x13535 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15090 = x15088 + x15089;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15091 = x13536 * x13558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15092 = x15090 + x15091;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15093 = x13509 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15094 = x13510 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15095 = x15093 + x15094;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15096 = x13511 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15097 = x15095 + x15096;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15098 = x13513 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15099 = x15097 + x15098;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15100 = x13514 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15101 = x15099 + x15100;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15102 = x13515 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15103 = x15101 + x15102;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15104 = x13516 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15105 = x15103 + x15104;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15106 = x13518 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15107 = x15105 + x15106;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15108 = x13519 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15109 = x15107 + x15108;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15110 = x13520 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15111 = x15109 + x15110;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15112 = x13521 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15113 = x15111 + x15112;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15114 = x13523 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15115 = x15113 + x15114;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15116 = x13524 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15117 = x15115 + x15116;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15118 = x13525 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15119 = x15117 + x15118;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15120 = x13526 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15121 = x15119 + x15120;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15122 = x13528 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15123 = x15121 + x15122;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15124 = x13529 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15125 = x15123 + x15124;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15126 = x13530 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15127 = x15125 + x15126;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15128 = x13531 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15129 = x15127 + x15128;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15130 = x13533 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15131 = x15129 + x15130;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15132 = x13534 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15133 = x15131 + x15132;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15134 = x13535 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15135 = x15133 + x15134;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15136 = x13536 * x13559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15137 = x15135 + x15136;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15138 = x13510 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15139 = x13511 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15140 = x15138 + x15139;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15141 = x13513 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15142 = x15140 + x15141;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15143 = x13514 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15144 = x15142 + x15143;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15145 = x13515 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15146 = x15144 + x15145;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15147 = x13516 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15148 = x15146 + x15147;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15149 = x13518 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15150 = x15148 + x15149;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15151 = x13519 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15152 = x15150 + x15151;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15153 = x13520 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15154 = x15152 + x15153;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15155 = x13521 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15156 = x15154 + x15155;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15157 = x13523 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15158 = x15156 + x15157;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15159 = x13524 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15160 = x15158 + x15159;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15161 = x13525 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15162 = x15160 + x15161;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15163 = x13526 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15164 = x15162 + x15163;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15165 = x13528 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15166 = x15164 + x15165;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15167 = x13529 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15168 = x15166 + x15167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15169 = x13530 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15170 = x15168 + x15169;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15171 = x13531 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15172 = x15170 + x15171;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15173 = x13533 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15174 = x15172 + x15173;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15175 = x13534 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15176 = x15174 + x15175;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15177 = x13535 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15178 = x15176 + x15177;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15179 = x13536 * x13560;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15180 = x15178 + x15179;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15181 = x13511 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15182 = x13513 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15183 = x15181 + x15182;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15184 = x13514 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15185 = x15183 + x15184;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15186 = x13515 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15187 = x15185 + x15186;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15188 = x13516 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15189 = x15187 + x15188;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15190 = x13518 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15191 = x15189 + x15190;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15192 = x13519 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15193 = x15191 + x15192;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15194 = x13520 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15195 = x15193 + x15194;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15196 = x13521 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15197 = x15195 + x15196;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15198 = x13523 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15199 = x15197 + x15198;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15200 = x13524 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15201 = x15199 + x15200;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15202 = x13525 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15203 = x15201 + x15202;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15204 = x13526 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15205 = x15203 + x15204;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15206 = x13528 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15207 = x15205 + x15206;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15208 = x13529 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15209 = x15207 + x15208;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15210 = x13530 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15211 = x15209 + x15210;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15212 = x13531 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15213 = x15211 + x15212;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15214 = x13533 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15215 = x15213 + x15214;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15216 = x13534 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15217 = x15215 + x15216;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15218 = x13535 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15219 = x15217 + x15218;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15220 = x13536 * x13561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15221 = x15219 + x15220;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15222 = x13513 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15223 = x13514 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15224 = x15222 + x15223;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15225 = x13515 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15226 = x15224 + x15225;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15227 = x13516 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15228 = x15226 + x15227;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15229 = x13518 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15230 = x15228 + x15229;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15231 = x13519 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15232 = x15230 + x15231;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15233 = x13520 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15234 = x15232 + x15233;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15235 = x13521 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15236 = x15234 + x15235;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15237 = x13523 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15238 = x15236 + x15237;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15239 = x13524 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15240 = x15238 + x15239;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15241 = x13525 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15242 = x15240 + x15241;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15243 = x13526 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15244 = x15242 + x15243;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15245 = x13528 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15246 = x15244 + x15245;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15247 = x13529 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15248 = x15246 + x15247;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15249 = x13530 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15250 = x15248 + x15249;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15251 = x13531 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15252 = x15250 + x15251;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15253 = x13533 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15254 = x15252 + x15253;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15255 = x13534 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15256 = x15254 + x15255;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15257 = x13535 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15258 = x15256 + x15257;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15259 = x13536 * x13563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15260 = x15258 + x15259;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15261 = x13514 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15262 = x13515 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15263 = x15261 + x15262;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15264 = x13516 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15265 = x15263 + x15264;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15266 = x13518 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15267 = x15265 + x15266;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15268 = x13519 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15269 = x15267 + x15268;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15270 = x13520 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15271 = x15269 + x15270;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15272 = x13521 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15273 = x15271 + x15272;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15274 = x13523 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15275 = x15273 + x15274;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15276 = x13524 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15277 = x15275 + x15276;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15278 = x13525 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15279 = x15277 + x15278;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15280 = x13526 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15281 = x15279 + x15280;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15282 = x13528 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15283 = x15281 + x15282;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15284 = x13529 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15285 = x15283 + x15284;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15286 = x13530 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15287 = x15285 + x15286;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15288 = x13531 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15289 = x15287 + x15288;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15290 = x13533 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15291 = x15289 + x15290;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15292 = x13534 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15293 = x15291 + x15292;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15294 = x13535 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15295 = x15293 + x15294;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15296 = x13536 * x13564;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15297 = x15295 + x15296;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15298 = x13515 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15299 = x13516 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15300 = x15298 + x15299;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15301 = x13518 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15302 = x15300 + x15301;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15303 = x13519 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15304 = x15302 + x15303;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15305 = x13520 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15306 = x15304 + x15305;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15307 = x13521 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15308 = x15306 + x15307;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15309 = x13523 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15310 = x15308 + x15309;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15311 = x13524 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15312 = x15310 + x15311;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15313 = x13525 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15314 = x15312 + x15313;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15315 = x13526 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15316 = x15314 + x15315;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15317 = x13528 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15318 = x15316 + x15317;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15319 = x13529 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15320 = x15318 + x15319;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15321 = x13530 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15322 = x15320 + x15321;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15323 = x13531 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15324 = x15322 + x15323;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15325 = x13533 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15326 = x15324 + x15325;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15327 = x13534 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15328 = x15326 + x15327;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15329 = x13535 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15330 = x15328 + x15329;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15331 = x13536 * x13565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15332 = x15330 + x15331;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15333 = x13516 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15334 = x13518 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15335 = x15333 + x15334;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15336 = x13519 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15337 = x15335 + x15336;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15338 = x13520 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15339 = x15337 + x15338;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15340 = x13521 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15341 = x15339 + x15340;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15342 = x13523 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15343 = x15341 + x15342;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15344 = x13524 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15345 = x15343 + x15344;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15346 = x13525 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15347 = x15345 + x15346;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15348 = x13526 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15349 = x15347 + x15348;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15350 = x13528 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15351 = x15349 + x15350;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15352 = x13529 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15353 = x15351 + x15352;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15354 = x13530 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15355 = x15353 + x15354;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15356 = x13531 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15357 = x15355 + x15356;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15358 = x13533 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15359 = x15357 + x15358;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15360 = x13534 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15361 = x15359 + x15360;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15362 = x13535 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15363 = x15361 + x15362;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15364 = x13536 * x13566;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15365 = x15363 + x15364;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15366 = x13518 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15367 = x13519 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15368 = x15366 + x15367;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15369 = x13520 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15370 = x15368 + x15369;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15371 = x13521 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15372 = x15370 + x15371;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15373 = x13523 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15374 = x15372 + x15373;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15375 = x13524 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15376 = x15374 + x15375;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15377 = x13525 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15378 = x15376 + x15377;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15379 = x13526 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15380 = x15378 + x15379;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15381 = x13528 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15382 = x15380 + x15381;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15383 = x13529 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15384 = x15382 + x15383;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15385 = x13530 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15386 = x15384 + x15385;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15387 = x13531 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15388 = x15386 + x15387;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15389 = x13533 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15390 = x15388 + x15389;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15391 = x13534 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15392 = x15390 + x15391;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15393 = x13535 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15394 = x15392 + x15393;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15395 = x13536 * x13568;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15396 = x15394 + x15395;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15397 = x13519 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15398 = x13520 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15399 = x15397 + x15398;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15400 = x13521 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15401 = x15399 + x15400;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15402 = x13523 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15403 = x15401 + x15402;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15404 = x13524 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15405 = x15403 + x15404;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15406 = x13525 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15407 = x15405 + x15406;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15408 = x13526 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15409 = x15407 + x15408;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15410 = x13528 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15411 = x15409 + x15410;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15412 = x13529 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15413 = x15411 + x15412;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15414 = x13530 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15415 = x15413 + x15414;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15416 = x13531 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15417 = x15415 + x15416;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15418 = x13533 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15419 = x15417 + x15418;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15420 = x13534 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15421 = x15419 + x15420;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15422 = x13535 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15423 = x15421 + x15422;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15424 = x13536 * x13569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15425 = x15423 + x15424;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15426 = x13520 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15427 = x13521 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15428 = x15426 + x15427;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15429 = x13523 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15430 = x15428 + x15429;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15431 = x13524 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15432 = x15430 + x15431;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15433 = x13525 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15434 = x15432 + x15433;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15435 = x13526 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15436 = x15434 + x15435;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15437 = x13528 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15438 = x15436 + x15437;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15439 = x13529 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15440 = x15438 + x15439;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15441 = x13530 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15442 = x15440 + x15441;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15443 = x13531 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15444 = x15442 + x15443;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15445 = x13533 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15446 = x15444 + x15445;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15447 = x13534 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15448 = x15446 + x15447;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15449 = x13535 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15450 = x15448 + x15449;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15451 = x13536 * x13570;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15452 = x15450 + x15451;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15453 = x13521 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15454 = x13523 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15455 = x15453 + x15454;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15456 = x13524 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15457 = x15455 + x15456;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15458 = x13525 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15459 = x15457 + x15458;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15460 = x13526 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15461 = x15459 + x15460;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15462 = x13528 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15463 = x15461 + x15462;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15464 = x13529 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15465 = x15463 + x15464;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15466 = x13530 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15467 = x15465 + x15466;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15468 = x13531 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15469 = x15467 + x15468;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15470 = x13533 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15471 = x15469 + x15470;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15472 = x13534 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15473 = x15471 + x15472;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15474 = x13535 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15475 = x15473 + x15474;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15476 = x13536 * x13571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15477 = x15475 + x15476;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15478 = x13523 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15479 = x13524 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15480 = x15478 + x15479;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15481 = x13525 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15482 = x15480 + x15481;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15483 = x13526 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15484 = x15482 + x15483;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15485 = x13528 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15486 = x15484 + x15485;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15487 = x13529 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15488 = x15486 + x15487;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15489 = x13530 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15490 = x15488 + x15489;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15491 = x13531 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15492 = x15490 + x15491;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15493 = x13533 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15494 = x15492 + x15493;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15495 = x13534 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15496 = x15494 + x15495;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15497 = x13535 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15498 = x15496 + x15497;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15499 = x13536 * x13573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15500 = x15498 + x15499;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15501 = x13524 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15502 = x13525 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15503 = x15501 + x15502;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15504 = x13526 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15505 = x15503 + x15504;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15506 = x13528 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15507 = x15505 + x15506;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15508 = x13529 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15509 = x15507 + x15508;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15510 = x13530 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15511 = x15509 + x15510;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15512 = x13531 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15513 = x15511 + x15512;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15514 = x13533 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15515 = x15513 + x15514;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15516 = x13534 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15517 = x15515 + x15516;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15518 = x13535 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15519 = x15517 + x15518;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15520 = x13536 * x13574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15521 = x15519 + x15520;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15522 = x13525 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15523 = x13526 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15524 = x15522 + x15523;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15525 = x13528 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15526 = x15524 + x15525;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15527 = x13529 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15528 = x15526 + x15527;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15529 = x13530 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15530 = x15528 + x15529;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15531 = x13531 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15532 = x15530 + x15531;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15533 = x13533 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15534 = x15532 + x15533;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15535 = x13534 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15536 = x15534 + x15535;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15537 = x13535 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15538 = x15536 + x15537;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15539 = x13536 * x13575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15540 = x15538 + x15539;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15541 = x13526 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15542 = x13528 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15543 = x15541 + x15542;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15544 = x13529 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15545 = x15543 + x15544;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15546 = x13530 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15547 = x15545 + x15546;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15548 = x13531 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15549 = x15547 + x15548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15550 = x13533 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15551 = x15549 + x15550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15552 = x13534 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15553 = x15551 + x15552;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15554 = x13535 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15555 = x15553 + x15554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15556 = x13536 * x13576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15557 = x15555 + x15556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15558 = x13528 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15559 = x13529 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15560 = x15558 + x15559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15561 = x13530 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15562 = x15560 + x15561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15563 = x13531 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15564 = x15562 + x15563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15565 = x13533 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15566 = x15564 + x15565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15567 = x13534 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15568 = x15566 + x15567;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15569 = x13535 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15570 = x15568 + x15569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15571 = x13536 * x13578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15572 = x15570 + x15571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15573 = x13529 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15574 = x13530 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15575 = x15573 + x15574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15576 = x13531 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15577 = x15575 + x15576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15578 = x13533 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15579 = x15577 + x15578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15580 = x13534 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15581 = x15579 + x15580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15582 = x13535 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15583 = x15581 + x15582;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15584 = x13536 * x13579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15585 = x15583 + x15584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15586 = x13530 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15587 = x13531 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15588 = x15586 + x15587;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15589 = x13533 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15590 = x15588 + x15589;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15591 = x13534 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15592 = x15590 + x15591;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15593 = x13535 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15594 = x15592 + x15593;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15595 = x13536 * x13580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15596 = x15594 + x15595;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15597 = x13531 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15598 = x13533 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15599 = x15597 + x15598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15600 = x13534 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15601 = x15599 + x15600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15602 = x13535 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15603 = x15601 + x15602;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15604 = x13536 * x13581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15605 = x15603 + x15604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15606 = x13533 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15607 = x13534 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15608 = x15606 + x15607;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15609 = x13535 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15610 = x15608 + x15609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15611 = x13536 * x13583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15612 = x15610 + x15611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15613 = x13534 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15614 = x13535 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15615 = x15613 + x15614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15616 = x13536 * x13584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15617 = x15615 + x15616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15618 = x13535 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15619 = x13536 * x13585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15620 = x15618 + x15619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15621 = x13536 * x13586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15622 = x13637 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15623 = Fp(x15622.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15624 = x15622 - x15623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15625 = x15624 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15626 = x15625 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15627 = x13640 + x15626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15628 = x15627 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15629 = Fp(x15628.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15630 = x15628 - x15629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15631 = x15630 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15632 = x15631 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15633 = x13645 + x15632;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15634 = x15633 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15635 = Fp(x15634.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15636 = x15634 - x15635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15637 = x15636 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15638 = x15637 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15639 = x13652 + x15638;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15640 = x15639 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15641 = Fp(x15640.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15642 = x15640 - x15641;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15643 = x15642 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15644 = x15643 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15645 = x13661 + x15644;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15646 = x15645 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15647 = Fp(x15646.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15648 = x15646 - x15647;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15649 = x15648 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15650 = x15649 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15651 = x13672 + x15650;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15652 = x15651 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15653 = Fp(x15652.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15654 = x15652 - x15653;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15655 = x15654 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15656 = x15655 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15657 = x13685 + x15656;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15658 = x15657 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15659 = Fp(x15658.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15660 = x15658 - x15659;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15661 = x15660 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15662 = x15661 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15663 = x13700 + x15662;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15664 = x15663 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15665 = Fp(x15664.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15666 = x15664 - x15665;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15667 = x15666 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15668 = x15667 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15669 = x13717 + x15668;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15670 = x15669 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15671 = Fp(x15670.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15672 = x15670 - x15671;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15673 = x15672 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15674 = x15673 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15675 = x13736 + x15674;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15676 = x15675 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15677 = Fp(x15676.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15678 = x15676 - x15677;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15679 = x15678 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15680 = x15679 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15681 = x13757 + x15680;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15682 = x15681 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15683 = Fp(x15682.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15684 = x15682 - x15683;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15685 = x15684 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15686 = x15685 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15687 = x13780 + x15686;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15688 = x15687 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15689 = Fp(x15688.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15690 = x15688 - x15689;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15691 = x15690 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15692 = x15691 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15693 = x13805 + x15692;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15694 = x15693 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15695 = Fp(x15694.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15696 = x15694 - x15695;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15697 = x15696 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15698 = x15697 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15699 = x13832 + x15698;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15700 = x15699 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15701 = Fp(x15700.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15702 = x15700 - x15701;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15703 = x15702 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15704 = x15703 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15705 = x13861 + x15704;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15706 = x15705 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15707 = Fp(x15706.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15708 = x15706 - x15707;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15709 = x15708 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15710 = x15709 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15711 = x13892 + x15710;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15712 = x15711 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15713 = Fp(x15712.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15714 = x15712 - x15713;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15715 = x15714 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15716 = x15715 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15717 = x13925 + x15716;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15718 = x15717 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15719 = Fp(x15718.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15720 = x15718 - x15719;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15721 = x15720 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15722 = x15721 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15723 = x13960 + x15722;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15724 = x15723 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15725 = Fp(x15724.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15726 = x15724 - x15725;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15727 = x15726 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15728 = x15727 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15729 = x13997 + x15728;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15730 = x15729 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15731 = Fp(x15730.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15732 = x15730 - x15731;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15733 = x15732 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15734 = x15733 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15735 = x14036 + x15734;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15736 = x15735 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15737 = Fp(x15736.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15738 = x15736 - x15737;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15739 = x15738 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15740 = x15739 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15741 = x14077 + x15740;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15742 = x15741 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15743 = Fp(x15742.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15744 = x15742 - x15743;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15745 = x15744 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15746 = x15745 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15747 = x14120 + x15746;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15748 = x15747 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15749 = Fp(x15748.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15750 = x15748 - x15749;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15751 = x15750 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15752 = x15751 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15753 = x14165 + x15752;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15754 = x15753 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15755 = Fp(x15754.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15756 = x15754 - x15755;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15757 = x15756 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15758 = x15757 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15759 = x14212 + x15758;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15760 = x15759 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15761 = Fp(x15760.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15762 = x15760 - x15761;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15763 = x15762 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15764 = x15763 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15765 = x14261 + x15764;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15766 = x15765 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15767 = Fp(x15766.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15768 = x15766 - x15767;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15769 = x15768 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15770 = x15769 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15771 = x14312 + x15770;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15772 = x15771 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15773 = Fp(x15772.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15774 = x15772 - x15773;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15775 = x15774 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15776 = x15775 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15777 = x14365 + x15776;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15778 = x15777 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15779 = Fp(x15778.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15780 = x15778 - x15779;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15781 = x15780 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15782 = x15781 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15783 = x14420 + x15782;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15784 = x15783 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15785 = Fp(x15784.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15786 = x15784 - x15785;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15787 = x15786 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15788 = x15787 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15789 = x14477 + x15788;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15790 = x15789 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15791 = Fp(x15790.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15792 = x15790 - x15791;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15793 = x15792 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15794 = x15793 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15795 = x14536 + x15794;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15796 = x15795 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15797 = Fp(x15796.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15798 = x15796 - x15797;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15799 = x15798 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15800 = x15799 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15801 = x14597 + x15800;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15802 = x15801 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15803 = Fp(x15802.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15804 = x15802 - x15803;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15805 = x15804 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15806 = x15805 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15807 = x14660 + x15806;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15808 = x15807 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15809 = Fp(x15808.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15810 = x15808 - x15809;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15811 = x15810 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15812 = x15811 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15813 = x14721 + x15812;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15814 = x15813 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15815 = Fp(x15814.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15816 = x15814 - x15815;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15817 = x15816 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15818 = x15817 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15819 = x14780 + x15818;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15820 = x15819 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15821 = Fp(x15820.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15822 = x15820 - x15821;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15823 = x15822 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15824 = x15823 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15825 = x14837 + x15824;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15826 = x15825 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15827 = Fp(x15826.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15828 = x15826 - x15827;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15829 = x15828 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15830 = x15829 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15831 = x14892 + x15830;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15832 = x15831 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15833 = Fp(x15832.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15834 = x15832 - x15833;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15835 = x15834 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15836 = x15835 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15837 = x14945 + x15836;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15838 = x15837 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15839 = Fp(x15838.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15840 = x15838 - x15839;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15841 = x15840 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15842 = x15841 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15843 = x14996 + x15842;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15844 = x15843 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15845 = Fp(x15844.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15846 = x15844 - x15845;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15847 = x15846 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15848 = x15847 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15849 = x15045 + x15848;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15850 = x15849 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15851 = Fp(x15850.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15852 = x15850 - x15851;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15853 = x15852 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15854 = x15853 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15855 = x15092 + x15854;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15856 = x15855 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15857 = Fp(x15856.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15858 = x15856 - x15857;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15859 = x15858 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15860 = x15859 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15861 = x15137 + x15860;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15862 = x15861 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15863 = Fp(x15862.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15864 = x15862 - x15863;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15865 = x15864 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15866 = x15865 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15867 = x15180 + x15866;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15868 = x15867 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15869 = Fp(x15868.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15870 = x15868 - x15869;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15871 = x15870 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15872 = x15871 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15873 = x15221 + x15872;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15874 = x15873 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15875 = Fp(x15874.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15876 = x15874 - x15875;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15877 = x15876 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15878 = x15877 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15879 = x15260 + x15878;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15880 = x15879 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15881 = Fp(x15880.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15882 = x15880 - x15881;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15883 = x15882 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15884 = x15883 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15885 = x15297 + x15884;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15886 = x15885 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15887 = Fp(x15886.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15888 = x15886 - x15887;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15889 = x15888 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15890 = x15889 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15891 = x15332 + x15890;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15892 = x15891 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15893 = Fp(x15892.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15894 = x15892 - x15893;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15895 = x15894 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15896 = x15895 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15897 = x15365 + x15896;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15898 = x15897 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15899 = Fp(x15898.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15900 = x15898 - x15899;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15901 = x15900 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15902 = x15901 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15903 = x15396 + x15902;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15904 = x15903 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15905 = Fp(x15904.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15906 = x15904 - x15905;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15907 = x15906 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15908 = x15907 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15909 = x15425 + x15908;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15910 = x15909 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15911 = Fp(x15910.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15912 = x15910 - x15911;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15913 = x15912 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15914 = x15913 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15915 = x15452 + x15914;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15916 = x15915 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15917 = Fp(x15916.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15918 = x15916 - x15917;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15919 = x15918 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15920 = x15919 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15921 = x15477 + x15920;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15922 = x15921 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15923 = Fp(x15922.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15924 = x15922 - x15923;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15925 = x15924 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15926 = x15925 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15927 = x15500 + x15926;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15928 = x15927 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15929 = Fp(x15928.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15930 = x15928 - x15929;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15931 = x15930 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15932 = x15931 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15933 = x15521 + x15932;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15934 = x15933 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15935 = Fp(x15934.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15936 = x15934 - x15935;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15937 = x15936 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15938 = x15937 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15939 = x15540 + x15938;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15940 = x15939 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15941 = Fp(x15940.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15942 = x15940 - x15941;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15943 = x15942 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15944 = x15943 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15945 = x15557 + x15944;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15946 = x15945 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15947 = Fp(x15946.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15948 = x15946 - x15947;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15949 = x15948 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15950 = x15949 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15951 = x15572 + x15950;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15952 = x15951 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15953 = Fp(x15952.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15954 = x15952 - x15953;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15955 = x15954 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15956 = x15955 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15957 = x15585 + x15956;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15958 = x15957 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15959 = Fp(x15958.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15960 = x15958 - x15959;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15961 = x15960 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15962 = x15961 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15963 = x15596 + x15962;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15964 = x15963 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15965 = Fp(x15964.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15966 = x15964 - x15965;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15967 = x15966 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15968 = x15967 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15969 = x15605 + x15968;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15970 = x15969 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15971 = Fp(x15970.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15972 = x15970 - x15971;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15973 = x15972 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15974 = x15973 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15975 = x15612 + x15974;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15976 = x15975 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15977 = Fp(x15976.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15978 = x15976 - x15977;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15979 = x15978 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15980 = x15979 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15981 = x15617 + x15980;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15982 = x15981 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15983 = Fp(x15982.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15984 = x15982 - x15983;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15985 = x15984 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15986 = x15985 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15987 = x15620 + x15986;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15988 = x15987 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15989 = Fp(x15988.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15990 = x15988 - x15989;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15991 = x15990 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15992 = x15991 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15993 = x15621 + x15992;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15994 = x15993 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15995 = Fp(x15994.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15996 = x15994 - x15995;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15997 = x15996 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15998 = x15997 - x11;
        host_args.at(0) = x15623;
        host_args.at(1) = x15629;
        host_args.at(2) = x15635;
        host_args.at(3) = x15641;
        host_args.at(4) = x15647;
        host_args.at(5) = x15653;
        host_args.at(6) = x15659;
        host_args.at(7) = x15665;
        host_args.at(8) = x15671;
        host_args.at(9) = x15677;
        host_args.at(10) = x15683;
        host_args.at(11) = x15689;
        host_args.at(12) = x15695;
        host_args.at(13) = x15701;
        host_args.at(14) = x15707;
        host_args.at(15) = x15713;
        host_args.at(16) = x15719;
        host_args.at(17) = x15725;
        host_args.at(18) = x15731;
        host_args.at(19) = x15737;
        host_args.at(20) = x15743;
        host_args.at(21) = x15749;
        host_args.at(22) = x15755;
        host_args.at(23) = x15761;
        host_args.at(24) = x15767;
        host_args.at(25) = x15773;
        host_args.at(26) = x15779;
        host_args.at(27) = x15785;
        host_args.at(28) = x15791;
        host_args.at(29) = x15797;
        host_args.at(30) = x15803;
        host_args.at(31) = x15809;
        host_args.at(32) = x15815;
        host_args.at(33) = x15821;
        host_args.at(34) = x15827;
        host_args.at(35) = x15833;
        host_args.at(36) = x15839;
        host_args.at(37) = x15845;
        host_args.at(38) = x15851;
        host_args.at(39) = x15857;
        host_args.at(40) = x15863;
        host_args.at(41) = x15869;
        host_args.at(42) = x15875;
        host_args.at(43) = x15881;
        host_args.at(44) = x15887;
        host_args.at(45) = x15893;
        host_args.at(46) = x15899;
        host_args.at(47) = x15905;
        host_args.at(48) = x15911;
        host_args.at(49) = x15917;
        host_args.at(50) = x15923;
        host_args.at(51) = x15929;
        host_args.at(52) = x15935;
        host_args.at(53) = x15941;
        host_args.at(54) = x15947;
        host_args.at(55) = x15953;
        host_args.at(56) = x15959;
        host_args.at(57) = x15965;
        host_args.at(58) = x15971;
        host_args.at(59) = x15977;
        host_args.at(60) = x15983;
        host_args.at(61) = x15989;
        host_args.at(62) = x15995;
        host_args.at(63) = x15998;
        host_args.at(64) = x13598;
        host_args.at(65) = x13599;
        host_args.at(66) = x13600;
        host_args.at(67) = x13601;
        host_args.at(68) = x13603;
        host_args.at(69) = x13604;
        host_args.at(70) = x13605;
        host_args.at(71) = x13606;
        host_args.at(72) = x13608;
        host_args.at(73) = x13609;
        host_args.at(74) = x13610;
        host_args.at(75) = x13611;
        host_args.at(76) = x13613;
        host_args.at(77) = x13614;
        host_args.at(78) = x13615;
        host_args.at(79) = x13616;
        host_args.at(80) = x13618;
        host_args.at(81) = x13619;
        host_args.at(82) = x13620;
        host_args.at(83) = x13621;
        host_args.at(84) = x13623;
        host_args.at(85) = x13624;
        host_args.at(86) = x13625;
        host_args.at(87) = x13626;
        host_args.at(88) = x13628;
        host_args.at(89) = x13629;
        host_args.at(90) = x13630;
        host_args.at(91) = x13631;
        host_args.at(92) = x13633;
        host_args.at(93) = x13634;
        host_args.at(94) = x13635;
        host_args.at(95) = x13636;
        host(ctx, "bigintQuotient", "", host_args.data(), 96, host_outs.data(), 32);
        auto x15999 = host_outs.at(0);
        auto x16000 = host_outs.at(1);
        auto x16001 = host_outs.at(2);
        auto x16002 = host_outs.at(3);
        auto x16003 = host_outs.at(4);
        auto x16004 = host_outs.at(5);
        auto x16005 = host_outs.at(6);
        auto x16006 = host_outs.at(7);
        auto x16007 = host_outs.at(8);
        auto x16008 = host_outs.at(9);
        auto x16009 = host_outs.at(10);
        auto x16010 = host_outs.at(11);
        auto x16011 = host_outs.at(12);
        auto x16012 = host_outs.at(13);
        auto x16013 = host_outs.at(14);
        auto x16014 = host_outs.at(15);
        auto x16015 = host_outs.at(16);
        auto x16016 = host_outs.at(17);
        auto x16017 = host_outs.at(18);
        auto x16018 = host_outs.at(19);
        auto x16019 = host_outs.at(20);
        auto x16020 = host_outs.at(21);
        auto x16021 = host_outs.at(22);
        auto x16022 = host_outs.at(23);
        auto x16023 = host_outs.at(24);
        auto x16024 = host_outs.at(25);
        auto x16025 = host_outs.at(26);
        auto x16026 = host_outs.at(27);
        auto x16027 = host_outs.at(28);
        auto x16028 = host_outs.at(29);
        auto x16029 = host_outs.at(30);
        auto x16030 = host_outs.at(31);
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16031 = x15999 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16032 = x15999 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16033 = x16000 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16034 = x16032 + x16033;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16035 = x15999 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16036 = x16000 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16037 = x16035 + x16036;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16038 = x16001 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16039 = x16037 + x16038;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16040 = x15999 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16041 = x16000 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16042 = x16040 + x16041;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16043 = x16001 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16044 = x16042 + x16043;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16045 = x16002 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16046 = x16044 + x16045;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16047 = x15999 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16048 = x16000 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16049 = x16047 + x16048;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16050 = x16001 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16051 = x16049 + x16050;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16052 = x16002 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16053 = x16051 + x16052;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16054 = x16003 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16055 = x16053 + x16054;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16056 = x15999 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16057 = x16000 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16058 = x16056 + x16057;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16059 = x16001 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16060 = x16058 + x16059;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16061 = x16002 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16062 = x16060 + x16061;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16063 = x16003 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16064 = x16062 + x16063;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16065 = x16004 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16066 = x16064 + x16065;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16067 = x15999 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16068 = x16000 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16069 = x16067 + x16068;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16070 = x16001 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16071 = x16069 + x16070;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16072 = x16002 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16073 = x16071 + x16072;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16074 = x16003 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16075 = x16073 + x16074;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16076 = x16004 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16077 = x16075 + x16076;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16078 = x16005 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16079 = x16077 + x16078;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16080 = x15999 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16081 = x16000 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16082 = x16080 + x16081;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16083 = x16001 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16084 = x16082 + x16083;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16085 = x16002 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16086 = x16084 + x16085;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16087 = x16003 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16088 = x16086 + x16087;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16089 = x16004 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16090 = x16088 + x16089;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16091 = x16005 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16092 = x16090 + x16091;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16093 = x16006 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16094 = x16092 + x16093;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16095 = x15999 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16096 = x16000 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16097 = x16095 + x16096;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16098 = x16001 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16099 = x16097 + x16098;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16100 = x16002 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16101 = x16099 + x16100;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16102 = x16003 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16103 = x16101 + x16102;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16104 = x16004 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16105 = x16103 + x16104;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16106 = x16005 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16107 = x16105 + x16106;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16108 = x16006 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16109 = x16107 + x16108;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16110 = x16007 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16111 = x16109 + x16110;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16112 = x15999 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16113 = x16000 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16114 = x16112 + x16113;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16115 = x16001 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16116 = x16114 + x16115;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16117 = x16002 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16118 = x16116 + x16117;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16119 = x16003 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16120 = x16118 + x16119;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16121 = x16004 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16122 = x16120 + x16121;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16123 = x16005 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16124 = x16122 + x16123;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16125 = x16006 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16126 = x16124 + x16125;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16127 = x16007 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16128 = x16126 + x16127;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16129 = x16008 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16130 = x16128 + x16129;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16131 = x15999 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16132 = x16000 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16133 = x16131 + x16132;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16134 = x16001 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16135 = x16133 + x16134;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16136 = x16002 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16137 = x16135 + x16136;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16138 = x16003 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16139 = x16137 + x16138;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16140 = x16004 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16141 = x16139 + x16140;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16142 = x16005 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16143 = x16141 + x16142;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16144 = x16006 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16145 = x16143 + x16144;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16146 = x16007 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16147 = x16145 + x16146;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16148 = x16008 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16149 = x16147 + x16148;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16150 = x16009 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16151 = x16149 + x16150;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16152 = x15999 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16153 = x16000 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16154 = x16152 + x16153;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16155 = x16001 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16156 = x16154 + x16155;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16157 = x16002 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16158 = x16156 + x16157;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16159 = x16003 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16160 = x16158 + x16159;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16161 = x16004 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16162 = x16160 + x16161;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16163 = x16005 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16164 = x16162 + x16163;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16165 = x16006 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16166 = x16164 + x16165;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16167 = x16007 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16168 = x16166 + x16167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16169 = x16008 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16170 = x16168 + x16169;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16171 = x16009 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16172 = x16170 + x16171;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16173 = x16010 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16174 = x16172 + x16173;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16175 = x15999 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16176 = x16000 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16177 = x16175 + x16176;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16178 = x16001 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16179 = x16177 + x16178;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16180 = x16002 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16181 = x16179 + x16180;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16182 = x16003 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16183 = x16181 + x16182;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16184 = x16004 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16185 = x16183 + x16184;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16186 = x16005 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16187 = x16185 + x16186;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16188 = x16006 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16189 = x16187 + x16188;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16190 = x16007 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16191 = x16189 + x16190;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16192 = x16008 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16193 = x16191 + x16192;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16194 = x16009 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16195 = x16193 + x16194;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16196 = x16010 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16197 = x16195 + x16196;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16198 = x16011 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16199 = x16197 + x16198;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16200 = x15999 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16201 = x16000 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16202 = x16200 + x16201;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16203 = x16001 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16204 = x16202 + x16203;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16205 = x16002 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16206 = x16204 + x16205;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16207 = x16003 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16208 = x16206 + x16207;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16209 = x16004 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16210 = x16208 + x16209;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16211 = x16005 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16212 = x16210 + x16211;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16213 = x16006 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16214 = x16212 + x16213;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16215 = x16007 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16216 = x16214 + x16215;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16217 = x16008 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16218 = x16216 + x16217;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16219 = x16009 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16220 = x16218 + x16219;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16221 = x16010 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16222 = x16220 + x16221;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16223 = x16011 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16224 = x16222 + x16223;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16225 = x16012 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16226 = x16224 + x16225;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16227 = x15999 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16228 = x16000 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16229 = x16227 + x16228;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16230 = x16001 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16231 = x16229 + x16230;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16232 = x16002 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16233 = x16231 + x16232;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16234 = x16003 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16235 = x16233 + x16234;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16236 = x16004 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16237 = x16235 + x16236;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16238 = x16005 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16239 = x16237 + x16238;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16240 = x16006 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16241 = x16239 + x16240;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16242 = x16007 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16243 = x16241 + x16242;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16244 = x16008 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16245 = x16243 + x16244;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16246 = x16009 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16247 = x16245 + x16246;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16248 = x16010 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16249 = x16247 + x16248;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16250 = x16011 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16251 = x16249 + x16250;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16252 = x16012 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16253 = x16251 + x16252;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16254 = x16013 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16255 = x16253 + x16254;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16256 = x15999 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16257 = x16000 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16258 = x16256 + x16257;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16259 = x16001 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16260 = x16258 + x16259;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16261 = x16002 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16262 = x16260 + x16261;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16263 = x16003 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16264 = x16262 + x16263;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16265 = x16004 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16266 = x16264 + x16265;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16267 = x16005 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16268 = x16266 + x16267;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16269 = x16006 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16270 = x16268 + x16269;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16271 = x16007 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16272 = x16270 + x16271;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16273 = x16008 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16274 = x16272 + x16273;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16275 = x16009 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16276 = x16274 + x16275;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16277 = x16010 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16278 = x16276 + x16277;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16279 = x16011 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16280 = x16278 + x16279;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16281 = x16012 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16282 = x16280 + x16281;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16283 = x16013 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16284 = x16282 + x16283;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16285 = x16014 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16286 = x16284 + x16285;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16287 = x15999 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16288 = x16000 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16289 = x16287 + x16288;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16290 = x16001 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16291 = x16289 + x16290;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16292 = x16002 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16293 = x16291 + x16292;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16294 = x16003 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16295 = x16293 + x16294;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16296 = x16004 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16297 = x16295 + x16296;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16298 = x16005 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16299 = x16297 + x16298;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16300 = x16006 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16301 = x16299 + x16300;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16302 = x16007 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16303 = x16301 + x16302;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16304 = x16008 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16305 = x16303 + x16304;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16306 = x16009 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16307 = x16305 + x16306;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16308 = x16010 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16309 = x16307 + x16308;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16310 = x16011 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16311 = x16309 + x16310;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16312 = x16012 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16313 = x16311 + x16312;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16314 = x16013 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16315 = x16313 + x16314;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16316 = x16014 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16317 = x16315 + x16316;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16318 = x16015 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16319 = x16317 + x16318;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16320 = x15999 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16321 = x16000 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16322 = x16320 + x16321;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16323 = x16001 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16324 = x16322 + x16323;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16325 = x16002 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16326 = x16324 + x16325;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16327 = x16003 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16328 = x16326 + x16327;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16329 = x16004 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16330 = x16328 + x16329;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16331 = x16005 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16332 = x16330 + x16331;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16333 = x16006 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16334 = x16332 + x16333;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16335 = x16007 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16336 = x16334 + x16335;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16337 = x16008 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16338 = x16336 + x16337;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16339 = x16009 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16340 = x16338 + x16339;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16341 = x16010 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16342 = x16340 + x16341;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16343 = x16011 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16344 = x16342 + x16343;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16345 = x16012 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16346 = x16344 + x16345;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16347 = x16013 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16348 = x16346 + x16347;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16349 = x16014 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16350 = x16348 + x16349;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16351 = x16015 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16352 = x16350 + x16351;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16353 = x16016 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16354 = x16352 + x16353;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16355 = x15999 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16356 = x16000 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16357 = x16355 + x16356;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16358 = x16001 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16359 = x16357 + x16358;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16360 = x16002 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16361 = x16359 + x16360;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16362 = x16003 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16363 = x16361 + x16362;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16364 = x16004 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16365 = x16363 + x16364;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16366 = x16005 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16367 = x16365 + x16366;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16368 = x16006 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16369 = x16367 + x16368;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16370 = x16007 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16371 = x16369 + x16370;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16372 = x16008 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16373 = x16371 + x16372;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16374 = x16009 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16375 = x16373 + x16374;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16376 = x16010 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16377 = x16375 + x16376;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16378 = x16011 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16379 = x16377 + x16378;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16380 = x16012 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16381 = x16379 + x16380;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16382 = x16013 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16383 = x16381 + x16382;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16384 = x16014 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16385 = x16383 + x16384;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16386 = x16015 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16387 = x16385 + x16386;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16388 = x16016 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16389 = x16387 + x16388;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16390 = x16017 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16391 = x16389 + x16390;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16392 = x15999 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16393 = x16000 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16394 = x16392 + x16393;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16395 = x16001 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16396 = x16394 + x16395;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16397 = x16002 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16398 = x16396 + x16397;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16399 = x16003 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16400 = x16398 + x16399;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16401 = x16004 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16402 = x16400 + x16401;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16403 = x16005 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16404 = x16402 + x16403;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16405 = x16006 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16406 = x16404 + x16405;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16407 = x16007 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16408 = x16406 + x16407;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16409 = x16008 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16410 = x16408 + x16409;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16411 = x16009 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16412 = x16410 + x16411;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16413 = x16010 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16414 = x16412 + x16413;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16415 = x16011 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16416 = x16414 + x16415;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16417 = x16012 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16418 = x16416 + x16417;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16419 = x16013 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16420 = x16418 + x16419;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16421 = x16014 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16422 = x16420 + x16421;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16423 = x16015 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16424 = x16422 + x16423;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16425 = x16016 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16426 = x16424 + x16425;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16427 = x16017 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16428 = x16426 + x16427;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16429 = x16018 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16430 = x16428 + x16429;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16431 = x15999 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16432 = x16000 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16433 = x16431 + x16432;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16434 = x16001 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16435 = x16433 + x16434;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16436 = x16002 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16437 = x16435 + x16436;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16438 = x16003 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16439 = x16437 + x16438;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16440 = x16004 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16441 = x16439 + x16440;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16442 = x16005 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16443 = x16441 + x16442;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16444 = x16006 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16445 = x16443 + x16444;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16446 = x16007 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16447 = x16445 + x16446;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16448 = x16008 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16449 = x16447 + x16448;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16450 = x16009 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16451 = x16449 + x16450;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16452 = x16010 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16453 = x16451 + x16452;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16454 = x16011 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16455 = x16453 + x16454;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16456 = x16012 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16457 = x16455 + x16456;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16458 = x16013 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16459 = x16457 + x16458;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16460 = x16014 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16461 = x16459 + x16460;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16462 = x16015 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16463 = x16461 + x16462;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16464 = x16016 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16465 = x16463 + x16464;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16466 = x16017 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16467 = x16465 + x16466;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16468 = x16018 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16469 = x16467 + x16468;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16470 = x16019 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16471 = x16469 + x16470;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16472 = x15999 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16473 = x16000 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16474 = x16472 + x16473;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16475 = x16001 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16476 = x16474 + x16475;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16477 = x16002 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16478 = x16476 + x16477;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16479 = x16003 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16480 = x16478 + x16479;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16481 = x16004 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16482 = x16480 + x16481;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16483 = x16005 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16484 = x16482 + x16483;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16485 = x16006 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16486 = x16484 + x16485;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16487 = x16007 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16488 = x16486 + x16487;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16489 = x16008 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16490 = x16488 + x16489;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16491 = x16009 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16492 = x16490 + x16491;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16493 = x16010 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16494 = x16492 + x16493;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16495 = x16011 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16496 = x16494 + x16495;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16497 = x16012 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16498 = x16496 + x16497;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16499 = x16013 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16500 = x16498 + x16499;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16501 = x16014 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16502 = x16500 + x16501;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16503 = x16015 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16504 = x16502 + x16503;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16505 = x16016 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16506 = x16504 + x16505;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16507 = x16017 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16508 = x16506 + x16507;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16509 = x16018 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16510 = x16508 + x16509;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16511 = x16019 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16512 = x16510 + x16511;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16513 = x16020 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16514 = x16512 + x16513;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16515 = x15999 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16516 = x16000 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16517 = x16515 + x16516;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16518 = x16001 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16519 = x16517 + x16518;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16520 = x16002 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16521 = x16519 + x16520;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16522 = x16003 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16523 = x16521 + x16522;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16524 = x16004 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16525 = x16523 + x16524;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16526 = x16005 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16527 = x16525 + x16526;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16528 = x16006 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16529 = x16527 + x16528;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16530 = x16007 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16531 = x16529 + x16530;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16532 = x16008 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16533 = x16531 + x16532;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16534 = x16009 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16535 = x16533 + x16534;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16536 = x16010 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16537 = x16535 + x16536;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16538 = x16011 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16539 = x16537 + x16538;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16540 = x16012 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16541 = x16539 + x16540;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16542 = x16013 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16543 = x16541 + x16542;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16544 = x16014 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16545 = x16543 + x16544;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16546 = x16015 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16547 = x16545 + x16546;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16548 = x16016 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16549 = x16547 + x16548;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16550 = x16017 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16551 = x16549 + x16550;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16552 = x16018 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16553 = x16551 + x16552;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16554 = x16019 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16555 = x16553 + x16554;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16556 = x16020 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16557 = x16555 + x16556;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16558 = x16021 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16559 = x16557 + x16558;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16560 = x15999 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16561 = x16000 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16562 = x16560 + x16561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16563 = x16001 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16564 = x16562 + x16563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16565 = x16002 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16566 = x16564 + x16565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16567 = x16003 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16568 = x16566 + x16567;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16569 = x16004 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16570 = x16568 + x16569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16571 = x16005 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16572 = x16570 + x16571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16573 = x16006 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16574 = x16572 + x16573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16575 = x16007 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16576 = x16574 + x16575;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16577 = x16008 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16578 = x16576 + x16577;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16579 = x16009 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16580 = x16578 + x16579;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16581 = x16010 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16582 = x16580 + x16581;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16583 = x16011 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16584 = x16582 + x16583;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16585 = x16012 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16586 = x16584 + x16585;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16587 = x16013 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16588 = x16586 + x16587;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16589 = x16014 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16590 = x16588 + x16589;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16591 = x16015 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16592 = x16590 + x16591;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16593 = x16016 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16594 = x16592 + x16593;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16595 = x16017 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16596 = x16594 + x16595;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16597 = x16018 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16598 = x16596 + x16597;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16599 = x16019 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16600 = x16598 + x16599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16601 = x16020 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16602 = x16600 + x16601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16603 = x16021 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16604 = x16602 + x16603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16605 = x16022 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16606 = x16604 + x16605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16607 = x15999 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16608 = x16000 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16609 = x16607 + x16608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16610 = x16001 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16611 = x16609 + x16610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16612 = x16002 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16613 = x16611 + x16612;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16614 = x16003 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16615 = x16613 + x16614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16616 = x16004 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16617 = x16615 + x16616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16618 = x16005 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16619 = x16617 + x16618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16620 = x16006 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16621 = x16619 + x16620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16622 = x16007 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16623 = x16621 + x16622;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16624 = x16008 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16625 = x16623 + x16624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16626 = x16009 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16627 = x16625 + x16626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16628 = x16010 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16629 = x16627 + x16628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16630 = x16011 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16631 = x16629 + x16630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16632 = x16012 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16633 = x16631 + x16632;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16634 = x16013 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16635 = x16633 + x16634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16636 = x16014 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16637 = x16635 + x16636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16638 = x16015 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16639 = x16637 + x16638;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16640 = x16016 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16641 = x16639 + x16640;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16642 = x16017 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16643 = x16641 + x16642;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16644 = x16018 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16645 = x16643 + x16644;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16646 = x16019 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16647 = x16645 + x16646;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16648 = x16020 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16649 = x16647 + x16648;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16650 = x16021 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16651 = x16649 + x16650;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16652 = x16022 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16653 = x16651 + x16652;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16654 = x16023 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16655 = x16653 + x16654;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16656 = x15999 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16657 = x16000 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16658 = x16656 + x16657;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16659 = x16001 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16660 = x16658 + x16659;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16661 = x16002 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16662 = x16660 + x16661;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16663 = x16003 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16664 = x16662 + x16663;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16665 = x16004 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16666 = x16664 + x16665;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16667 = x16005 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16668 = x16666 + x16667;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16669 = x16006 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16670 = x16668 + x16669;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16671 = x16007 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16672 = x16670 + x16671;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16673 = x16008 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16674 = x16672 + x16673;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16675 = x16009 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16676 = x16674 + x16675;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16677 = x16010 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16678 = x16676 + x16677;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16679 = x16011 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16680 = x16678 + x16679;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16681 = x16012 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16682 = x16680 + x16681;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16683 = x16013 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16684 = x16682 + x16683;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16685 = x16014 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16686 = x16684 + x16685;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16687 = x16015 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16688 = x16686 + x16687;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16689 = x16016 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16690 = x16688 + x16689;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16691 = x16017 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16692 = x16690 + x16691;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16693 = x16018 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16694 = x16692 + x16693;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16695 = x16019 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16696 = x16694 + x16695;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16697 = x16020 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16698 = x16696 + x16697;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16699 = x16021 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16700 = x16698 + x16699;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16701 = x16022 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16702 = x16700 + x16701;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16703 = x16023 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16704 = x16702 + x16703;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16705 = x16024 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16706 = x16704 + x16705;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16707 = x15999 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16708 = x16000 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16709 = x16707 + x16708;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16710 = x16001 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16711 = x16709 + x16710;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16712 = x16002 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16713 = x16711 + x16712;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16714 = x16003 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16715 = x16713 + x16714;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16716 = x16004 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16717 = x16715 + x16716;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16718 = x16005 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16719 = x16717 + x16718;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16720 = x16006 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16721 = x16719 + x16720;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16722 = x16007 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16723 = x16721 + x16722;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16724 = x16008 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16725 = x16723 + x16724;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16726 = x16009 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16727 = x16725 + x16726;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16728 = x16010 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16729 = x16727 + x16728;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16730 = x16011 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16731 = x16729 + x16730;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16732 = x16012 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16733 = x16731 + x16732;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16734 = x16013 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16735 = x16733 + x16734;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16736 = x16014 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16737 = x16735 + x16736;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16738 = x16015 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16739 = x16737 + x16738;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16740 = x16016 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16741 = x16739 + x16740;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16742 = x16017 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16743 = x16741 + x16742;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16744 = x16018 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16745 = x16743 + x16744;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16746 = x16019 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16747 = x16745 + x16746;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16748 = x16020 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16749 = x16747 + x16748;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16750 = x16021 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16751 = x16749 + x16750;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16752 = x16022 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16753 = x16751 + x16752;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16754 = x16023 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16755 = x16753 + x16754;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16756 = x16024 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16757 = x16755 + x16756;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16758 = x16025 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16759 = x16757 + x16758;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16760 = x15999 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16761 = x16000 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16762 = x16760 + x16761;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16763 = x16001 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16764 = x16762 + x16763;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16765 = x16002 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16766 = x16764 + x16765;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16767 = x16003 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16768 = x16766 + x16767;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16769 = x16004 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16770 = x16768 + x16769;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16771 = x16005 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16772 = x16770 + x16771;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16773 = x16006 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16774 = x16772 + x16773;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16775 = x16007 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16776 = x16774 + x16775;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16777 = x16008 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16778 = x16776 + x16777;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16779 = x16009 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16780 = x16778 + x16779;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16781 = x16010 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16782 = x16780 + x16781;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16783 = x16011 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16784 = x16782 + x16783;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16785 = x16012 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16786 = x16784 + x16785;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16787 = x16013 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16788 = x16786 + x16787;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16789 = x16014 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16790 = x16788 + x16789;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16791 = x16015 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16792 = x16790 + x16791;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16793 = x16016 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16794 = x16792 + x16793;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16795 = x16017 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16796 = x16794 + x16795;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16797 = x16018 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16798 = x16796 + x16797;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16799 = x16019 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16800 = x16798 + x16799;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16801 = x16020 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16802 = x16800 + x16801;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16803 = x16021 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16804 = x16802 + x16803;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16805 = x16022 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16806 = x16804 + x16805;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16807 = x16023 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16808 = x16806 + x16807;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16809 = x16024 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16810 = x16808 + x16809;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16811 = x16025 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16812 = x16810 + x16811;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16813 = x16026 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16814 = x16812 + x16813;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16815 = x15999 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16816 = x16000 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16817 = x16815 + x16816;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16818 = x16001 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16819 = x16817 + x16818;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16820 = x16002 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16821 = x16819 + x16820;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16822 = x16003 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16823 = x16821 + x16822;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16824 = x16004 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16825 = x16823 + x16824;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16826 = x16005 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16827 = x16825 + x16826;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16828 = x16006 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16829 = x16827 + x16828;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16830 = x16007 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16831 = x16829 + x16830;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16832 = x16008 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16833 = x16831 + x16832;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16834 = x16009 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16835 = x16833 + x16834;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16836 = x16010 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16837 = x16835 + x16836;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16838 = x16011 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16839 = x16837 + x16838;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16840 = x16012 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16841 = x16839 + x16840;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16842 = x16013 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16843 = x16841 + x16842;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16844 = x16014 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16845 = x16843 + x16844;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16846 = x16015 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16847 = x16845 + x16846;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16848 = x16016 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16849 = x16847 + x16848;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16850 = x16017 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16851 = x16849 + x16850;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16852 = x16018 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16853 = x16851 + x16852;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16854 = x16019 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16855 = x16853 + x16854;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16856 = x16020 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16857 = x16855 + x16856;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16858 = x16021 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16859 = x16857 + x16858;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16860 = x16022 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16861 = x16859 + x16860;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16862 = x16023 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16863 = x16861 + x16862;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16864 = x16024 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16865 = x16863 + x16864;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16866 = x16025 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16867 = x16865 + x16866;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16868 = x16026 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16869 = x16867 + x16868;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16870 = x16027 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16871 = x16869 + x16870;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16872 = x15999 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16873 = x16000 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16874 = x16872 + x16873;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16875 = x16001 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16876 = x16874 + x16875;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16877 = x16002 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16878 = x16876 + x16877;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16879 = x16003 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16880 = x16878 + x16879;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16881 = x16004 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16882 = x16880 + x16881;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16883 = x16005 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16884 = x16882 + x16883;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16885 = x16006 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16886 = x16884 + x16885;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16887 = x16007 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16888 = x16886 + x16887;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16889 = x16008 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16890 = x16888 + x16889;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16891 = x16009 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16892 = x16890 + x16891;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16893 = x16010 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16894 = x16892 + x16893;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16895 = x16011 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16896 = x16894 + x16895;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16897 = x16012 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16898 = x16896 + x16897;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16899 = x16013 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16900 = x16898 + x16899;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16901 = x16014 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16902 = x16900 + x16901;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16903 = x16015 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16904 = x16902 + x16903;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16905 = x16016 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16906 = x16904 + x16905;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16907 = x16017 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16908 = x16906 + x16907;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16909 = x16018 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16910 = x16908 + x16909;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16911 = x16019 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16912 = x16910 + x16911;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16913 = x16020 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16914 = x16912 + x16913;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16915 = x16021 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16916 = x16914 + x16915;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16917 = x16022 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16918 = x16916 + x16917;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16919 = x16023 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16920 = x16918 + x16919;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16921 = x16024 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16922 = x16920 + x16921;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16923 = x16025 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16924 = x16922 + x16923;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16925 = x16026 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16926 = x16924 + x16925;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16927 = x16027 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16928 = x16926 + x16927;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16929 = x16028 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16930 = x16928 + x16929;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16931 = x15999 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16932 = x16000 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16933 = x16931 + x16932;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16934 = x16001 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16935 = x16933 + x16934;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16936 = x16002 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16937 = x16935 + x16936;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16938 = x16003 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16939 = x16937 + x16938;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16940 = x16004 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16941 = x16939 + x16940;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16942 = x16005 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16943 = x16941 + x16942;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16944 = x16006 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16945 = x16943 + x16944;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16946 = x16007 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16947 = x16945 + x16946;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16948 = x16008 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16949 = x16947 + x16948;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16950 = x16009 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16951 = x16949 + x16950;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16952 = x16010 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16953 = x16951 + x16952;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16954 = x16011 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16955 = x16953 + x16954;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16956 = x16012 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16957 = x16955 + x16956;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16958 = x16013 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16959 = x16957 + x16958;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16960 = x16014 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16961 = x16959 + x16960;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16962 = x16015 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16963 = x16961 + x16962;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16964 = x16016 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16965 = x16963 + x16964;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16966 = x16017 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16967 = x16965 + x16966;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16968 = x16018 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16969 = x16967 + x16968;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16970 = x16019 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16971 = x16969 + x16970;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16972 = x16020 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16973 = x16971 + x16972;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16974 = x16021 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16975 = x16973 + x16974;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16976 = x16022 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16977 = x16975 + x16976;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16978 = x16023 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16979 = x16977 + x16978;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16980 = x16024 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16981 = x16979 + x16980;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16982 = x16025 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16983 = x16981 + x16982;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16984 = x16026 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16985 = x16983 + x16984;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16986 = x16027 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16987 = x16985 + x16986;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16988 = x16028 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16989 = x16987 + x16988;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16990 = x16029 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16991 = x16989 + x16990;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16992 = x15999 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16993 = x16000 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16994 = x16992 + x16993;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16995 = x16001 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16996 = x16994 + x16995;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16997 = x16002 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16998 = x16996 + x16997;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16999 = x16003 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17000 = x16998 + x16999;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17001 = x16004 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17002 = x17000 + x17001;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17003 = x16005 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17004 = x17002 + x17003;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17005 = x16006 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17006 = x17004 + x17005;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17007 = x16007 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17008 = x17006 + x17007;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17009 = x16008 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17010 = x17008 + x17009;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17011 = x16009 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17012 = x17010 + x17011;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17013 = x16010 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17014 = x17012 + x17013;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17015 = x16011 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17016 = x17014 + x17015;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17017 = x16012 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17018 = x17016 + x17017;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17019 = x16013 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17020 = x17018 + x17019;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17021 = x16014 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17022 = x17020 + x17021;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17023 = x16015 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17024 = x17022 + x17023;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17025 = x16016 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17026 = x17024 + x17025;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17027 = x16017 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17028 = x17026 + x17027;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17029 = x16018 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17030 = x17028 + x17029;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17031 = x16019 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17032 = x17030 + x17031;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17033 = x16020 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17034 = x17032 + x17033;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17035 = x16021 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17036 = x17034 + x17035;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17037 = x16022 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17038 = x17036 + x17037;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17039 = x16023 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17040 = x17038 + x17039;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17041 = x16024 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17042 = x17040 + x17041;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17043 = x16025 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17044 = x17042 + x17043;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17045 = x16026 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17046 = x17044 + x17045;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17047 = x16027 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17048 = x17046 + x17047;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17049 = x16028 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17050 = x17048 + x17049;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17051 = x16029 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17052 = x17050 + x17051;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17053 = x16030 * x13598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17054 = x17052 + x17053;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17055 = x16000 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17056 = x16001 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17057 = x17055 + x17056;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17058 = x16002 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17059 = x17057 + x17058;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17060 = x16003 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17061 = x17059 + x17060;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17062 = x16004 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17063 = x17061 + x17062;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17064 = x16005 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17065 = x17063 + x17064;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17066 = x16006 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17067 = x17065 + x17066;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17068 = x16007 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17069 = x17067 + x17068;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17070 = x16008 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17071 = x17069 + x17070;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17072 = x16009 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17073 = x17071 + x17072;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17074 = x16010 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17075 = x17073 + x17074;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17076 = x16011 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17077 = x17075 + x17076;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17078 = x16012 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17079 = x17077 + x17078;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17080 = x16013 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17081 = x17079 + x17080;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17082 = x16014 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17083 = x17081 + x17082;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17084 = x16015 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17085 = x17083 + x17084;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17086 = x16016 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17087 = x17085 + x17086;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17088 = x16017 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17089 = x17087 + x17088;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17090 = x16018 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17091 = x17089 + x17090;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17092 = x16019 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17093 = x17091 + x17092;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17094 = x16020 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17095 = x17093 + x17094;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17096 = x16021 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17097 = x17095 + x17096;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17098 = x16022 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17099 = x17097 + x17098;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17100 = x16023 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17101 = x17099 + x17100;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17102 = x16024 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17103 = x17101 + x17102;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17104 = x16025 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17105 = x17103 + x17104;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17106 = x16026 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17107 = x17105 + x17106;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17108 = x16027 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17109 = x17107 + x17108;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17110 = x16028 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17111 = x17109 + x17110;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17112 = x16029 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17113 = x17111 + x17112;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17114 = x16030 * x13599;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17115 = x17113 + x17114;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17116 = x16001 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17117 = x16002 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17118 = x17116 + x17117;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17119 = x16003 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17120 = x17118 + x17119;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17121 = x16004 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17122 = x17120 + x17121;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17123 = x16005 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17124 = x17122 + x17123;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17125 = x16006 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17126 = x17124 + x17125;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17127 = x16007 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17128 = x17126 + x17127;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17129 = x16008 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17130 = x17128 + x17129;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17131 = x16009 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17132 = x17130 + x17131;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17133 = x16010 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17134 = x17132 + x17133;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17135 = x16011 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17136 = x17134 + x17135;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17137 = x16012 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17138 = x17136 + x17137;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17139 = x16013 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17140 = x17138 + x17139;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17141 = x16014 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17142 = x17140 + x17141;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17143 = x16015 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17144 = x17142 + x17143;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17145 = x16016 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17146 = x17144 + x17145;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17147 = x16017 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17148 = x17146 + x17147;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17149 = x16018 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17150 = x17148 + x17149;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17151 = x16019 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17152 = x17150 + x17151;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17153 = x16020 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17154 = x17152 + x17153;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17155 = x16021 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17156 = x17154 + x17155;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17157 = x16022 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17158 = x17156 + x17157;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17159 = x16023 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17160 = x17158 + x17159;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17161 = x16024 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17162 = x17160 + x17161;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17163 = x16025 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17164 = x17162 + x17163;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17165 = x16026 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17166 = x17164 + x17165;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17167 = x16027 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17168 = x17166 + x17167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17169 = x16028 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17170 = x17168 + x17169;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17171 = x16029 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17172 = x17170 + x17171;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17173 = x16030 * x13600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17174 = x17172 + x17173;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17175 = x16002 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17176 = x16003 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17177 = x17175 + x17176;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17178 = x16004 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17179 = x17177 + x17178;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17180 = x16005 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17181 = x17179 + x17180;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17182 = x16006 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17183 = x17181 + x17182;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17184 = x16007 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17185 = x17183 + x17184;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17186 = x16008 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17187 = x17185 + x17186;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17188 = x16009 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17189 = x17187 + x17188;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17190 = x16010 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17191 = x17189 + x17190;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17192 = x16011 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17193 = x17191 + x17192;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17194 = x16012 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17195 = x17193 + x17194;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17196 = x16013 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17197 = x17195 + x17196;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17198 = x16014 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17199 = x17197 + x17198;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17200 = x16015 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17201 = x17199 + x17200;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17202 = x16016 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17203 = x17201 + x17202;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17204 = x16017 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17205 = x17203 + x17204;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17206 = x16018 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17207 = x17205 + x17206;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17208 = x16019 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17209 = x17207 + x17208;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17210 = x16020 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17211 = x17209 + x17210;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17212 = x16021 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17213 = x17211 + x17212;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17214 = x16022 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17215 = x17213 + x17214;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17216 = x16023 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17217 = x17215 + x17216;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17218 = x16024 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17219 = x17217 + x17218;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17220 = x16025 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17221 = x17219 + x17220;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17222 = x16026 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17223 = x17221 + x17222;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17224 = x16027 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17225 = x17223 + x17224;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17226 = x16028 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17227 = x17225 + x17226;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17228 = x16029 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17229 = x17227 + x17228;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17230 = x16030 * x13601;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17231 = x17229 + x17230;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17232 = x16003 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17233 = x16004 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17234 = x17232 + x17233;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17235 = x16005 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17236 = x17234 + x17235;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17237 = x16006 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17238 = x17236 + x17237;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17239 = x16007 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17240 = x17238 + x17239;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17241 = x16008 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17242 = x17240 + x17241;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17243 = x16009 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17244 = x17242 + x17243;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17245 = x16010 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17246 = x17244 + x17245;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17247 = x16011 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17248 = x17246 + x17247;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17249 = x16012 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17250 = x17248 + x17249;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17251 = x16013 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17252 = x17250 + x17251;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17253 = x16014 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17254 = x17252 + x17253;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17255 = x16015 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17256 = x17254 + x17255;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17257 = x16016 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17258 = x17256 + x17257;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17259 = x16017 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17260 = x17258 + x17259;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17261 = x16018 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17262 = x17260 + x17261;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17263 = x16019 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17264 = x17262 + x17263;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17265 = x16020 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17266 = x17264 + x17265;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17267 = x16021 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17268 = x17266 + x17267;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17269 = x16022 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17270 = x17268 + x17269;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17271 = x16023 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17272 = x17270 + x17271;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17273 = x16024 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17274 = x17272 + x17273;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17275 = x16025 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17276 = x17274 + x17275;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17277 = x16026 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17278 = x17276 + x17277;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17279 = x16027 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17280 = x17278 + x17279;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17281 = x16028 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17282 = x17280 + x17281;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17283 = x16029 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17284 = x17282 + x17283;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17285 = x16030 * x13603;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17286 = x17284 + x17285;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17287 = x16004 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17288 = x16005 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17289 = x17287 + x17288;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17290 = x16006 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17291 = x17289 + x17290;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17292 = x16007 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17293 = x17291 + x17292;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17294 = x16008 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17295 = x17293 + x17294;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17296 = x16009 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17297 = x17295 + x17296;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17298 = x16010 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17299 = x17297 + x17298;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17300 = x16011 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17301 = x17299 + x17300;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17302 = x16012 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17303 = x17301 + x17302;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17304 = x16013 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17305 = x17303 + x17304;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17306 = x16014 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17307 = x17305 + x17306;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17308 = x16015 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17309 = x17307 + x17308;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17310 = x16016 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17311 = x17309 + x17310;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17312 = x16017 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17313 = x17311 + x17312;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17314 = x16018 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17315 = x17313 + x17314;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17316 = x16019 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17317 = x17315 + x17316;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17318 = x16020 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17319 = x17317 + x17318;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17320 = x16021 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17321 = x17319 + x17320;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17322 = x16022 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17323 = x17321 + x17322;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17324 = x16023 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17325 = x17323 + x17324;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17326 = x16024 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17327 = x17325 + x17326;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17328 = x16025 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17329 = x17327 + x17328;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17330 = x16026 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17331 = x17329 + x17330;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17332 = x16027 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17333 = x17331 + x17332;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17334 = x16028 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17335 = x17333 + x17334;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17336 = x16029 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17337 = x17335 + x17336;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17338 = x16030 * x13604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17339 = x17337 + x17338;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17340 = x16005 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17341 = x16006 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17342 = x17340 + x17341;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17343 = x16007 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17344 = x17342 + x17343;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17345 = x16008 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17346 = x17344 + x17345;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17347 = x16009 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17348 = x17346 + x17347;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17349 = x16010 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17350 = x17348 + x17349;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17351 = x16011 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17352 = x17350 + x17351;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17353 = x16012 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17354 = x17352 + x17353;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17355 = x16013 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17356 = x17354 + x17355;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17357 = x16014 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17358 = x17356 + x17357;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17359 = x16015 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17360 = x17358 + x17359;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17361 = x16016 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17362 = x17360 + x17361;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17363 = x16017 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17364 = x17362 + x17363;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17365 = x16018 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17366 = x17364 + x17365;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17367 = x16019 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17368 = x17366 + x17367;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17369 = x16020 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17370 = x17368 + x17369;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17371 = x16021 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17372 = x17370 + x17371;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17373 = x16022 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17374 = x17372 + x17373;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17375 = x16023 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17376 = x17374 + x17375;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17377 = x16024 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17378 = x17376 + x17377;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17379 = x16025 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17380 = x17378 + x17379;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17381 = x16026 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17382 = x17380 + x17381;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17383 = x16027 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17384 = x17382 + x17383;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17385 = x16028 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17386 = x17384 + x17385;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17387 = x16029 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17388 = x17386 + x17387;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17389 = x16030 * x13605;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17390 = x17388 + x17389;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17391 = x16006 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17392 = x16007 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17393 = x17391 + x17392;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17394 = x16008 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17395 = x17393 + x17394;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17396 = x16009 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17397 = x17395 + x17396;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17398 = x16010 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17399 = x17397 + x17398;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17400 = x16011 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17401 = x17399 + x17400;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17402 = x16012 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17403 = x17401 + x17402;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17404 = x16013 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17405 = x17403 + x17404;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17406 = x16014 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17407 = x17405 + x17406;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17408 = x16015 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17409 = x17407 + x17408;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17410 = x16016 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17411 = x17409 + x17410;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17412 = x16017 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17413 = x17411 + x17412;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17414 = x16018 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17415 = x17413 + x17414;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17416 = x16019 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17417 = x17415 + x17416;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17418 = x16020 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17419 = x17417 + x17418;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17420 = x16021 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17421 = x17419 + x17420;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17422 = x16022 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17423 = x17421 + x17422;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17424 = x16023 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17425 = x17423 + x17424;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17426 = x16024 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17427 = x17425 + x17426;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17428 = x16025 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17429 = x17427 + x17428;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17430 = x16026 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17431 = x17429 + x17430;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17432 = x16027 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17433 = x17431 + x17432;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17434 = x16028 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17435 = x17433 + x17434;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17436 = x16029 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17437 = x17435 + x17436;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17438 = x16030 * x13606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17439 = x17437 + x17438;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17440 = x16007 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17441 = x16008 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17442 = x17440 + x17441;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17443 = x16009 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17444 = x17442 + x17443;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17445 = x16010 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17446 = x17444 + x17445;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17447 = x16011 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17448 = x17446 + x17447;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17449 = x16012 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17450 = x17448 + x17449;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17451 = x16013 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17452 = x17450 + x17451;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17453 = x16014 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17454 = x17452 + x17453;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17455 = x16015 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17456 = x17454 + x17455;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17457 = x16016 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17458 = x17456 + x17457;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17459 = x16017 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17460 = x17458 + x17459;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17461 = x16018 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17462 = x17460 + x17461;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17463 = x16019 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17464 = x17462 + x17463;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17465 = x16020 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17466 = x17464 + x17465;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17467 = x16021 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17468 = x17466 + x17467;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17469 = x16022 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17470 = x17468 + x17469;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17471 = x16023 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17472 = x17470 + x17471;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17473 = x16024 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17474 = x17472 + x17473;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17475 = x16025 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17476 = x17474 + x17475;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17477 = x16026 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17478 = x17476 + x17477;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17479 = x16027 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17480 = x17478 + x17479;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17481 = x16028 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17482 = x17480 + x17481;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17483 = x16029 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17484 = x17482 + x17483;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17485 = x16030 * x13608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17486 = x17484 + x17485;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17487 = x16008 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17488 = x16009 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17489 = x17487 + x17488;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17490 = x16010 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17491 = x17489 + x17490;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17492 = x16011 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17493 = x17491 + x17492;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17494 = x16012 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17495 = x17493 + x17494;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17496 = x16013 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17497 = x17495 + x17496;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17498 = x16014 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17499 = x17497 + x17498;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17500 = x16015 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17501 = x17499 + x17500;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17502 = x16016 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17503 = x17501 + x17502;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17504 = x16017 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17505 = x17503 + x17504;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17506 = x16018 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17507 = x17505 + x17506;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17508 = x16019 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17509 = x17507 + x17508;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17510 = x16020 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17511 = x17509 + x17510;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17512 = x16021 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17513 = x17511 + x17512;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17514 = x16022 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17515 = x17513 + x17514;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17516 = x16023 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17517 = x17515 + x17516;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17518 = x16024 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17519 = x17517 + x17518;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17520 = x16025 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17521 = x17519 + x17520;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17522 = x16026 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17523 = x17521 + x17522;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17524 = x16027 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17525 = x17523 + x17524;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17526 = x16028 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17527 = x17525 + x17526;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17528 = x16029 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17529 = x17527 + x17528;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17530 = x16030 * x13609;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17531 = x17529 + x17530;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17532 = x16009 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17533 = x16010 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17534 = x17532 + x17533;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17535 = x16011 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17536 = x17534 + x17535;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17537 = x16012 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17538 = x17536 + x17537;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17539 = x16013 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17540 = x17538 + x17539;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17541 = x16014 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17542 = x17540 + x17541;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17543 = x16015 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17544 = x17542 + x17543;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17545 = x16016 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17546 = x17544 + x17545;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17547 = x16017 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17548 = x17546 + x17547;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17549 = x16018 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17550 = x17548 + x17549;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17551 = x16019 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17552 = x17550 + x17551;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17553 = x16020 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17554 = x17552 + x17553;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17555 = x16021 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17556 = x17554 + x17555;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17557 = x16022 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17558 = x17556 + x17557;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17559 = x16023 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17560 = x17558 + x17559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17561 = x16024 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17562 = x17560 + x17561;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17563 = x16025 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17564 = x17562 + x17563;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17565 = x16026 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17566 = x17564 + x17565;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17567 = x16027 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17568 = x17566 + x17567;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17569 = x16028 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17570 = x17568 + x17569;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17571 = x16029 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17572 = x17570 + x17571;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17573 = x16030 * x13610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17574 = x17572 + x17573;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17575 = x16010 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17576 = x16011 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17577 = x17575 + x17576;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17578 = x16012 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17579 = x17577 + x17578;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17580 = x16013 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17581 = x17579 + x17580;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17582 = x16014 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17583 = x17581 + x17582;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17584 = x16015 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17585 = x17583 + x17584;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17586 = x16016 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17587 = x17585 + x17586;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17588 = x16017 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17589 = x17587 + x17588;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17590 = x16018 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17591 = x17589 + x17590;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17592 = x16019 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17593 = x17591 + x17592;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17594 = x16020 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17595 = x17593 + x17594;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17596 = x16021 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17597 = x17595 + x17596;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17598 = x16022 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17599 = x17597 + x17598;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17600 = x16023 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17601 = x17599 + x17600;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17602 = x16024 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17603 = x17601 + x17602;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17604 = x16025 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17605 = x17603 + x17604;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17606 = x16026 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17607 = x17605 + x17606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17608 = x16027 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17609 = x17607 + x17608;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17610 = x16028 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17611 = x17609 + x17610;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17612 = x16029 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17613 = x17611 + x17612;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17614 = x16030 * x13611;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17615 = x17613 + x17614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17616 = x16011 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17617 = x16012 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17618 = x17616 + x17617;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17619 = x16013 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17620 = x17618 + x17619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17621 = x16014 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17622 = x17620 + x17621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17623 = x16015 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17624 = x17622 + x17623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17625 = x16016 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17626 = x17624 + x17625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17627 = x16017 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17628 = x17626 + x17627;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17629 = x16018 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17630 = x17628 + x17629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17631 = x16019 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17632 = x17630 + x17631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17633 = x16020 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17634 = x17632 + x17633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17635 = x16021 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17636 = x17634 + x17635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17637 = x16022 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17638 = x17636 + x17637;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17639 = x16023 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17640 = x17638 + x17639;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17641 = x16024 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17642 = x17640 + x17641;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17643 = x16025 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17644 = x17642 + x17643;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17645 = x16026 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17646 = x17644 + x17645;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17647 = x16027 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17648 = x17646 + x17647;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17649 = x16028 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17650 = x17648 + x17649;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17651 = x16029 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17652 = x17650 + x17651;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17653 = x16030 * x13613;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17654 = x17652 + x17653;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17655 = x16012 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17656 = x16013 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17657 = x17655 + x17656;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17658 = x16014 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17659 = x17657 + x17658;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17660 = x16015 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17661 = x17659 + x17660;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17662 = x16016 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17663 = x17661 + x17662;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17664 = x16017 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17665 = x17663 + x17664;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17666 = x16018 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17667 = x17665 + x17666;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17668 = x16019 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17669 = x17667 + x17668;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17670 = x16020 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17671 = x17669 + x17670;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17672 = x16021 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17673 = x17671 + x17672;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17674 = x16022 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17675 = x17673 + x17674;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17676 = x16023 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17677 = x17675 + x17676;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17678 = x16024 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17679 = x17677 + x17678;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17680 = x16025 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17681 = x17679 + x17680;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17682 = x16026 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17683 = x17681 + x17682;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17684 = x16027 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17685 = x17683 + x17684;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17686 = x16028 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17687 = x17685 + x17686;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17688 = x16029 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17689 = x17687 + x17688;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17690 = x16030 * x13614;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17691 = x17689 + x17690;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17692 = x16013 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17693 = x16014 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17694 = x17692 + x17693;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17695 = x16015 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17696 = x17694 + x17695;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17697 = x16016 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17698 = x17696 + x17697;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17699 = x16017 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17700 = x17698 + x17699;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17701 = x16018 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17702 = x17700 + x17701;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17703 = x16019 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17704 = x17702 + x17703;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17705 = x16020 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17706 = x17704 + x17705;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17707 = x16021 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17708 = x17706 + x17707;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17709 = x16022 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17710 = x17708 + x17709;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17711 = x16023 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17712 = x17710 + x17711;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17713 = x16024 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17714 = x17712 + x17713;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17715 = x16025 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17716 = x17714 + x17715;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17717 = x16026 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17718 = x17716 + x17717;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17719 = x16027 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17720 = x17718 + x17719;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17721 = x16028 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17722 = x17720 + x17721;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17723 = x16029 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17724 = x17722 + x17723;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17725 = x16030 * x13615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17726 = x17724 + x17725;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17727 = x16014 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17728 = x16015 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17729 = x17727 + x17728;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17730 = x16016 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17731 = x17729 + x17730;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17732 = x16017 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17733 = x17731 + x17732;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17734 = x16018 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17735 = x17733 + x17734;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17736 = x16019 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17737 = x17735 + x17736;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17738 = x16020 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17739 = x17737 + x17738;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17740 = x16021 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17741 = x17739 + x17740;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17742 = x16022 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17743 = x17741 + x17742;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17744 = x16023 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17745 = x17743 + x17744;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17746 = x16024 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17747 = x17745 + x17746;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17748 = x16025 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17749 = x17747 + x17748;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17750 = x16026 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17751 = x17749 + x17750;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17752 = x16027 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17753 = x17751 + x17752;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17754 = x16028 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17755 = x17753 + x17754;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17756 = x16029 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17757 = x17755 + x17756;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17758 = x16030 * x13616;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17759 = x17757 + x17758;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17760 = x16015 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17761 = x16016 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17762 = x17760 + x17761;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17763 = x16017 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17764 = x17762 + x17763;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17765 = x16018 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17766 = x17764 + x17765;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17767 = x16019 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17768 = x17766 + x17767;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17769 = x16020 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17770 = x17768 + x17769;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17771 = x16021 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17772 = x17770 + x17771;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17773 = x16022 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17774 = x17772 + x17773;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17775 = x16023 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17776 = x17774 + x17775;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17777 = x16024 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17778 = x17776 + x17777;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17779 = x16025 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17780 = x17778 + x17779;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17781 = x16026 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17782 = x17780 + x17781;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17783 = x16027 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17784 = x17782 + x17783;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17785 = x16028 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17786 = x17784 + x17785;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17787 = x16029 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17788 = x17786 + x17787;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17789 = x16030 * x13618;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17790 = x17788 + x17789;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17791 = x16016 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17792 = x16017 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17793 = x17791 + x17792;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17794 = x16018 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17795 = x17793 + x17794;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17796 = x16019 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17797 = x17795 + x17796;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17798 = x16020 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17799 = x17797 + x17798;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17800 = x16021 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17801 = x17799 + x17800;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17802 = x16022 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17803 = x17801 + x17802;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17804 = x16023 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17805 = x17803 + x17804;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17806 = x16024 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17807 = x17805 + x17806;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17808 = x16025 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17809 = x17807 + x17808;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17810 = x16026 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17811 = x17809 + x17810;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17812 = x16027 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17813 = x17811 + x17812;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17814 = x16028 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17815 = x17813 + x17814;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17816 = x16029 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17817 = x17815 + x17816;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17818 = x16030 * x13619;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17819 = x17817 + x17818;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17820 = x16017 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17821 = x16018 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17822 = x17820 + x17821;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17823 = x16019 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17824 = x17822 + x17823;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17825 = x16020 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17826 = x17824 + x17825;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17827 = x16021 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17828 = x17826 + x17827;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17829 = x16022 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17830 = x17828 + x17829;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17831 = x16023 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17832 = x17830 + x17831;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17833 = x16024 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17834 = x17832 + x17833;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17835 = x16025 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17836 = x17834 + x17835;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17837 = x16026 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17838 = x17836 + x17837;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17839 = x16027 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17840 = x17838 + x17839;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17841 = x16028 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17842 = x17840 + x17841;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17843 = x16029 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17844 = x17842 + x17843;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17845 = x16030 * x13620;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17846 = x17844 + x17845;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17847 = x16018 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17848 = x16019 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17849 = x17847 + x17848;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17850 = x16020 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17851 = x17849 + x17850;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17852 = x16021 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17853 = x17851 + x17852;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17854 = x16022 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17855 = x17853 + x17854;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17856 = x16023 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17857 = x17855 + x17856;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17858 = x16024 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17859 = x17857 + x17858;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17860 = x16025 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17861 = x17859 + x17860;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17862 = x16026 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17863 = x17861 + x17862;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17864 = x16027 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17865 = x17863 + x17864;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17866 = x16028 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17867 = x17865 + x17866;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17868 = x16029 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17869 = x17867 + x17868;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17870 = x16030 * x13621;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17871 = x17869 + x17870;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17872 = x16019 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17873 = x16020 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17874 = x17872 + x17873;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17875 = x16021 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17876 = x17874 + x17875;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17877 = x16022 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17878 = x17876 + x17877;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17879 = x16023 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17880 = x17878 + x17879;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17881 = x16024 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17882 = x17880 + x17881;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17883 = x16025 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17884 = x17882 + x17883;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17885 = x16026 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17886 = x17884 + x17885;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17887 = x16027 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17888 = x17886 + x17887;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17889 = x16028 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17890 = x17888 + x17889;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17891 = x16029 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17892 = x17890 + x17891;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17893 = x16030 * x13623;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17894 = x17892 + x17893;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17895 = x16020 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17896 = x16021 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17897 = x17895 + x17896;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17898 = x16022 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17899 = x17897 + x17898;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17900 = x16023 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17901 = x17899 + x17900;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17902 = x16024 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17903 = x17901 + x17902;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17904 = x16025 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17905 = x17903 + x17904;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17906 = x16026 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17907 = x17905 + x17906;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17908 = x16027 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17909 = x17907 + x17908;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17910 = x16028 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17911 = x17909 + x17910;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17912 = x16029 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17913 = x17911 + x17912;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17914 = x16030 * x13624;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17915 = x17913 + x17914;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17916 = x16021 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17917 = x16022 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17918 = x17916 + x17917;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17919 = x16023 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17920 = x17918 + x17919;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17921 = x16024 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17922 = x17920 + x17921;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17923 = x16025 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17924 = x17922 + x17923;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17925 = x16026 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17926 = x17924 + x17925;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17927 = x16027 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17928 = x17926 + x17927;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17929 = x16028 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17930 = x17928 + x17929;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17931 = x16029 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17932 = x17930 + x17931;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17933 = x16030 * x13625;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17934 = x17932 + x17933;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17935 = x16022 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17936 = x16023 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17937 = x17935 + x17936;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17938 = x16024 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17939 = x17937 + x17938;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17940 = x16025 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17941 = x17939 + x17940;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17942 = x16026 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17943 = x17941 + x17942;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17944 = x16027 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17945 = x17943 + x17944;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17946 = x16028 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17947 = x17945 + x17946;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17948 = x16029 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17949 = x17947 + x17948;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17950 = x16030 * x13626;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17951 = x17949 + x17950;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17952 = x16023 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17953 = x16024 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17954 = x17952 + x17953;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17955 = x16025 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17956 = x17954 + x17955;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17957 = x16026 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17958 = x17956 + x17957;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17959 = x16027 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17960 = x17958 + x17959;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17961 = x16028 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17962 = x17960 + x17961;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17963 = x16029 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17964 = x17962 + x17963;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17965 = x16030 * x13628;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17966 = x17964 + x17965;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17967 = x16024 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17968 = x16025 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17969 = x17967 + x17968;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17970 = x16026 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17971 = x17969 + x17970;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17972 = x16027 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17973 = x17971 + x17972;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17974 = x16028 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17975 = x17973 + x17974;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17976 = x16029 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17977 = x17975 + x17976;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17978 = x16030 * x13629;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17979 = x17977 + x17978;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17980 = x16025 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17981 = x16026 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17982 = x17980 + x17981;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17983 = x16027 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17984 = x17982 + x17983;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17985 = x16028 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17986 = x17984 + x17985;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17987 = x16029 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17988 = x17986 + x17987;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17989 = x16030 * x13630;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17990 = x17988 + x17989;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17991 = x16026 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17992 = x16027 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17993 = x17991 + x17992;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17994 = x16028 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17995 = x17993 + x17994;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17996 = x16029 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17997 = x17995 + x17996;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17998 = x16030 * x13631;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17999 = x17997 + x17998;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18000 = x16027 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18001 = x16028 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18002 = x18000 + x18001;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18003 = x16029 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18004 = x18002 + x18003;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18005 = x16030 * x13633;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18006 = x18004 + x18005;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18007 = x16028 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18008 = x16029 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18009 = x18007 + x18008;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18010 = x16030 * x13634;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18011 = x18009 + x18010;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18012 = x16029 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18013 = x16030 * x13635;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18014 = x18012 + x18013;
        // loc("cirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18015 = x16030 * x13636;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18016 = x13637 - x16031;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18017 = x13640 - x16034;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18018 = x13645 - x16039;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18019 = x13652 - x16046;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18020 = x13661 - x16055;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18021 = x13672 - x16066;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18022 = x13685 - x16079;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18023 = x13700 - x16094;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18024 = x13717 - x16111;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18025 = x13736 - x16130;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18026 = x13757 - x16151;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18027 = x13780 - x16174;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18028 = x13805 - x16199;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18029 = x13832 - x16226;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18030 = x13861 - x16255;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18031 = x13892 - x16286;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18032 = x13925 - x16319;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18033 = x13960 - x16354;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18034 = x13997 - x16391;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18035 = x14036 - x16430;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18036 = x14077 - x16471;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18037 = x14120 - x16514;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18038 = x14165 - x16559;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18039 = x14212 - x16606;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18040 = x14261 - x16655;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18041 = x14312 - x16706;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18042 = x14365 - x16759;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18043 = x14420 - x16814;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18044 = x14477 - x16871;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18045 = x14536 - x16930;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18046 = x14597 - x16991;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18047 = x14660 - x17054;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18048 = x14721 - x17115;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18049 = x14780 - x17174;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18050 = x14837 - x17231;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18051 = x14892 - x17286;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18052 = x14945 - x17339;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18053 = x14996 - x17390;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18054 = x15045 - x17439;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18055 = x15092 - x17486;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18056 = x15137 - x17531;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18057 = x15180 - x17574;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18058 = x15221 - x17615;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18059 = x15260 - x17654;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18060 = x15297 - x17691;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18061 = x15332 - x17726;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18062 = x15365 - x17759;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18063 = x15396 - x17790;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18064 = x15425 - x17819;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18065 = x15452 - x17846;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18066 = x15477 - x17871;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18067 = x15500 - x17894;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18068 = x15521 - x17915;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18069 = x15540 - x17934;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18070 = x15557 - x17951;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18071 = x15572 - x17966;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18072 = x15585 - x17979;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18073 = x15596 - x17990;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18074 = x15605 - x17999;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18075 = x15612 - x18006;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18076 = x15617 - x18011;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18077 = x15620 - x18014;
        // loc("cirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18078 = x15621 - x18015;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18079 = x18016 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18080 = Fp(x18079.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18081 = x18079 - x18080;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18082 = x18081 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18083 = x18082 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18084 = x18017 + x18083;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18085 = x18084 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18086 = Fp(x18085.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18087 = x18085 - x18086;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18088 = x18087 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18089 = x18088 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18090 = x18018 + x18089;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18091 = x18090 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18092 = Fp(x18091.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18093 = x18091 - x18092;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18094 = x18093 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18095 = x18094 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18096 = x18019 + x18095;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18097 = x18096 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18098 = Fp(x18097.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18099 = x18097 - x18098;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18100 = x18099 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18101 = x18100 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18102 = x18020 + x18101;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18103 = x18102 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18104 = Fp(x18103.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18105 = x18103 - x18104;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18106 = x18105 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18107 = x18106 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18108 = x18021 + x18107;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18109 = x18108 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18110 = Fp(x18109.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18111 = x18109 - x18110;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18112 = x18111 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18113 = x18112 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18114 = x18022 + x18113;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18115 = x18114 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18116 = Fp(x18115.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18117 = x18115 - x18116;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18118 = x18117 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18119 = x18118 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18120 = x18023 + x18119;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18121 = x18120 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18122 = Fp(x18121.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18123 = x18121 - x18122;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18124 = x18123 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18125 = x18124 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18126 = x18024 + x18125;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18127 = x18126 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18128 = Fp(x18127.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18129 = x18127 - x18128;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18130 = x18129 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18131 = x18130 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18132 = x18025 + x18131;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18133 = x18132 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18134 = Fp(x18133.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18135 = x18133 - x18134;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18136 = x18135 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18137 = x18136 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18138 = x18026 + x18137;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18139 = x18138 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18140 = Fp(x18139.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18141 = x18139 - x18140;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18142 = x18141 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18143 = x18142 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18144 = x18027 + x18143;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18145 = x18144 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18146 = Fp(x18145.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18147 = x18145 - x18146;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18148 = x18147 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18149 = x18148 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18150 = x18028 + x18149;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18151 = x18150 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18152 = Fp(x18151.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18153 = x18151 - x18152;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18154 = x18153 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18155 = x18154 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18156 = x18029 + x18155;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18157 = x18156 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18158 = Fp(x18157.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18159 = x18157 - x18158;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18160 = x18159 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18161 = x18160 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18162 = x18030 + x18161;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18163 = x18162 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18164 = Fp(x18163.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18165 = x18163 - x18164;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18166 = x18165 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18167 = x18166 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18168 = x18031 + x18167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18169 = x18168 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18170 = Fp(x18169.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18171 = x18169 - x18170;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18172 = x18171 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18173 = x18172 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18174 = x18032 + x18173;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18175 = x18174 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18176 = Fp(x18175.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18177 = x18175 - x18176;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18178 = x18177 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18179 = x18178 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18180 = x18033 + x18179;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18181 = x18180 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18182 = Fp(x18181.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18183 = x18181 - x18182;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18184 = x18183 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18185 = x18184 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18186 = x18034 + x18185;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18187 = x18186 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18188 = Fp(x18187.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18189 = x18187 - x18188;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18190 = x18189 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18191 = x18190 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18192 = x18035 + x18191;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18193 = x18192 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18194 = Fp(x18193.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18195 = x18193 - x18194;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18196 = x18195 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18197 = x18196 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18198 = x18036 + x18197;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18199 = x18198 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18200 = Fp(x18199.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18201 = x18199 - x18200;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18202 = x18201 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18203 = x18202 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18204 = x18037 + x18203;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18205 = x18204 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18206 = Fp(x18205.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18207 = x18205 - x18206;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18208 = x18207 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18209 = x18208 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18210 = x18038 + x18209;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18211 = x18210 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18212 = Fp(x18211.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18213 = x18211 - x18212;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18214 = x18213 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18215 = x18214 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18216 = x18039 + x18215;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18217 = x18216 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18218 = Fp(x18217.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18219 = x18217 - x18218;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18220 = x18219 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18221 = x18220 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18222 = x18040 + x18221;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18223 = x18222 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18224 = Fp(x18223.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18225 = x18223 - x18224;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18226 = x18225 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18227 = x18226 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18228 = x18041 + x18227;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18229 = x18228 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18230 = Fp(x18229.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18231 = x18229 - x18230;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18232 = x18231 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18233 = x18232 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18234 = x18042 + x18233;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18235 = x18234 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18236 = Fp(x18235.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18237 = x18235 - x18236;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18238 = x18237 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18239 = x18238 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18240 = x18043 + x18239;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18241 = x18240 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18242 = Fp(x18241.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18243 = x18241 - x18242;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18244 = x18243 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18245 = x18244 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18246 = x18044 + x18245;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18247 = x18246 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18248 = Fp(x18247.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18249 = x18247 - x18248;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18250 = x18249 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18251 = x18250 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18252 = x18045 + x18251;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18253 = x18252 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18254 = Fp(x18253.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18255 = x18253 - x18254;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18256 = x18255 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18257 = x18256 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18258 = x18046 + x18257;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18259 = x18258 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18260 = Fp(x18259.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18261 = x18259 - x18260;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18262 = x18261 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18263 = x18262 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18264 = x18047 + x18263;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18265 = x18264 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18266 = Fp(x18265.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18267 = x18265 - x18266;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18268 = x18267 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18269 = x18268 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18270 = x18048 + x18269;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18271 = x18270 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18272 = Fp(x18271.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18273 = x18271 - x18272;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18274 = x18273 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18275 = x18274 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18276 = x18049 + x18275;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18277 = x18276 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18278 = Fp(x18277.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18279 = x18277 - x18278;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18280 = x18279 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18281 = x18280 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18282 = x18050 + x18281;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18283 = x18282 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18284 = Fp(x18283.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18285 = x18283 - x18284;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18286 = x18285 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18287 = x18286 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18288 = x18051 + x18287;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18289 = x18288 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18290 = Fp(x18289.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18291 = x18289 - x18290;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18292 = x18291 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18293 = x18292 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18294 = x18052 + x18293;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18295 = x18294 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18296 = Fp(x18295.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18297 = x18295 - x18296;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18298 = x18297 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18299 = x18298 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18300 = x18053 + x18299;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18301 = x18300 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18302 = Fp(x18301.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18303 = x18301 - x18302;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18304 = x18303 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18305 = x18304 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18306 = x18054 + x18305;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18307 = x18306 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18308 = Fp(x18307.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18309 = x18307 - x18308;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18310 = x18309 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18311 = x18310 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18312 = x18055 + x18311;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18313 = x18312 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18314 = Fp(x18313.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18315 = x18313 - x18314;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18316 = x18315 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18317 = x18316 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18318 = x18056 + x18317;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18319 = x18318 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18320 = Fp(x18319.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18321 = x18319 - x18320;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18322 = x18321 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18323 = x18322 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18324 = x18057 + x18323;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18325 = x18324 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18326 = Fp(x18325.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18327 = x18325 - x18326;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18328 = x18327 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18329 = x18328 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18330 = x18058 + x18329;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18331 = x18330 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18332 = Fp(x18331.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18333 = x18331 - x18332;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18334 = x18333 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18335 = x18334 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18336 = x18059 + x18335;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18337 = x18336 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18338 = Fp(x18337.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18339 = x18337 - x18338;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18340 = x18339 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18341 = x18340 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18342 = x18060 + x18341;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18343 = x18342 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18344 = Fp(x18343.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18345 = x18343 - x18344;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18346 = x18345 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18347 = x18346 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18348 = x18061 + x18347;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18349 = x18348 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18350 = Fp(x18349.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18351 = x18349 - x18350;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18352 = x18351 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18353 = x18352 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18354 = x18062 + x18353;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18355 = x18354 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18356 = Fp(x18355.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18357 = x18355 - x18356;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18358 = x18357 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18359 = x18358 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18360 = x18063 + x18359;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18361 = x18360 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18362 = Fp(x18361.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18363 = x18361 - x18362;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18364 = x18363 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18365 = x18364 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18366 = x18064 + x18365;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18367 = x18366 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18368 = Fp(x18367.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18369 = x18367 - x18368;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18370 = x18369 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18371 = x18370 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18372 = x18065 + x18371;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18373 = x18372 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18374 = Fp(x18373.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18375 = x18373 - x18374;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18376 = x18375 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18377 = x18376 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18378 = x18066 + x18377;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18379 = x18378 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18380 = Fp(x18379.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18381 = x18379 - x18380;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18382 = x18381 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18383 = x18382 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18384 = x18067 + x18383;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18385 = x18384 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18386 = Fp(x18385.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18387 = x18385 - x18386;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18388 = x18387 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18389 = x18388 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18390 = x18068 + x18389;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18391 = x18390 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18392 = Fp(x18391.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18393 = x18391 - x18392;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18394 = x18393 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18395 = x18394 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18396 = x18069 + x18395;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18397 = x18396 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18398 = Fp(x18397.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18399 = x18397 - x18398;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18400 = x18399 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18401 = x18400 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18402 = x18070 + x18401;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18403 = x18402 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18404 = Fp(x18403.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18405 = x18403 - x18404;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18406 = x18405 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18407 = x18406 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18408 = x18071 + x18407;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18409 = x18408 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18410 = Fp(x18409.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18411 = x18409 - x18410;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18412 = x18411 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18413 = x18412 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18414 = x18072 + x18413;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18415 = x18414 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18416 = Fp(x18415.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18417 = x18415 - x18416;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18418 = x18417 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18419 = x18418 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18420 = x18073 + x18419;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18421 = x18420 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18422 = Fp(x18421.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18423 = x18421 - x18422;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18424 = x18423 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18425 = x18424 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18426 = x18074 + x18425;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18427 = x18426 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18428 = Fp(x18427.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18429 = x18427 - x18428;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18430 = x18429 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18431 = x18430 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18432 = x18075 + x18431;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18433 = x18432 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18434 = Fp(x18433.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18435 = x18433 - x18434;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18436 = x18435 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18437 = x18436 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18438 = x18076 + x18437;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18439 = x18438 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18440 = Fp(x18439.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18441 = x18439 - x18440;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18442 = x18441 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18443 = x18442 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18444 = x18077 + x18443;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18445 = x18444 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18446 = Fp(x18445.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18447 = x18445 - x18446;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18448 = x18447 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18449 = x18448 - x11;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18450 = x18078 + x18449;
        // loc("cirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18451 = x18450 + x1;
        // loc("cirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18452 = Fp(x18451.asUInt32() & x91.asUInt32());
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18453 = x18451 - x18452;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18454 = x18453 * x89;
        // loc("cirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18455 = x18454 - x11;
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][18 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18456 = Fp(x15999.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18456);
                reg = x18456;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18457 = Fp(x16015.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18457);
                reg = x18457;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18458 = x18083 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18459 = Fp(x18458.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18460 = Fp(x18459.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18460);
                reg = x18460;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18461 = x18131 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18462 = Fp(x18461.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18463 = Fp(x18462.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18463);
                reg = x18463;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18464 = x18179 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18465 = Fp(x18464.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18466 = Fp(x18465.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18466);
                reg = x18466;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18467 = x18227 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18468 = Fp(x18467.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18469 = Fp(x18468.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18469);
                reg = x18469;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18470 = Fp(x18080.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18470);
                reg = x18470;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18471 = Fp(x18176.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18471);
                reg = x18471;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][19 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18472 = Fp(x16000.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18472);
                reg = x18472;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18473 = Fp(x16016.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18473);
                reg = x18473;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18474 = x18083 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18475 = Fp(x18474.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18476 = x18475 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18477 = Fp(x18476.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18477);
                reg = x18477;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18478 = x18131 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18479 = Fp(x18478.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18480 = x18479 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18481 = Fp(x18480.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18481);
                reg = x18481;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18482 = x18179 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18483 = Fp(x18482.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18484 = x18483 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18485 = Fp(x18484.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18485);
                reg = x18485;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18486 = x18227 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18487 = Fp(x18486.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18488 = x18487 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18489 = Fp(x18488.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18489);
                reg = x18489;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18490 = Fp(x18086.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18490);
                reg = x18490;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18491 = Fp(x18182.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18491);
                reg = x18491;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][20 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18492 = Fp(x16001.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18492);
                reg = x18492;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18493 = Fp(x16017.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18493);
                reg = x18493;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18494 = x18089 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18495 = Fp(x18494.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18496 = Fp(x18495.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18496);
                reg = x18496;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18497 = x18137 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18498 = Fp(x18497.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18499 = Fp(x18498.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18499);
                reg = x18499;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18500 = x18185 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18501 = Fp(x18500.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18502 = Fp(x18501.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18502);
                reg = x18502;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18503 = x18233 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18504 = Fp(x18503.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18505 = Fp(x18504.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18505);
                reg = x18505;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18506 = Fp(x18092.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18506);
                reg = x18506;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18507 = Fp(x18188.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18507);
                reg = x18507;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][21 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18508 = Fp(x16002.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18508);
                reg = x18508;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18509 = Fp(x16018.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18509);
                reg = x18509;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18510 = x18089 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18511 = Fp(x18510.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18512 = x18511 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18513 = Fp(x18512.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18513);
                reg = x18513;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18514 = x18137 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18515 = Fp(x18514.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18516 = x18515 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18517 = Fp(x18516.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18517);
                reg = x18517;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18518 = x18185 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18519 = Fp(x18518.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18520 = x18519 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18521 = Fp(x18520.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18521);
                reg = x18521;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18522 = x18233 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18523 = Fp(x18522.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18524 = x18523 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18525 = Fp(x18524.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18525);
                reg = x18525;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18526 = Fp(x18098.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18526);
                reg = x18526;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18527 = Fp(x18194.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18527);
                reg = x18527;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][22 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18528 = Fp(x16003.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18528);
                reg = x18528;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18529 = Fp(x16019.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18529);
                reg = x18529;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18530 = x18095 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18531 = Fp(x18530.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18532 = Fp(x18531.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18532);
                reg = x18532;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18533 = x18143 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18534 = Fp(x18533.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18535 = Fp(x18534.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18535);
                reg = x18535;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18536 = x18191 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18537 = Fp(x18536.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18538 = Fp(x18537.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18538);
                reg = x18538;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18539 = x18239 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18540 = Fp(x18539.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18541 = Fp(x18540.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18541);
                reg = x18541;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18542 = Fp(x18104.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18542);
                reg = x18542;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18543 = Fp(x18200.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18543);
                reg = x18543;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][23 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18544 = Fp(x16004.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18544);
                reg = x18544;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18545 = Fp(x16020.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18545);
                reg = x18545;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18546 = x18095 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18547 = Fp(x18546.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18548 = x18547 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18549 = Fp(x18548.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18549);
                reg = x18549;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18550 = x18143 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18551 = Fp(x18550.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18552 = x18551 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18553 = Fp(x18552.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18553);
                reg = x18553;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18554 = x18191 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18555 = Fp(x18554.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18556 = x18555 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18557 = Fp(x18556.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18557);
                reg = x18557;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18558 = x18239 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18559 = Fp(x18558.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18560 = x18559 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18561 = Fp(x18560.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18561);
                reg = x18561;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18562 = Fp(x18110.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18562);
                reg = x18562;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18563 = Fp(x18206.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18563);
                reg = x18563;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][24 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18564 = Fp(x16005.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18564);
                reg = x18564;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18565 = Fp(x16021.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18565);
                reg = x18565;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18566 = x18101 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18567 = Fp(x18566.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18568 = Fp(x18567.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18568);
                reg = x18568;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18569 = x18149 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18570 = Fp(x18569.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18571 = Fp(x18570.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18571);
                reg = x18571;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18572 = x18197 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18573 = Fp(x18572.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18574 = Fp(x18573.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18574);
                reg = x18574;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18575 = x18245 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18576 = Fp(x18575.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18577 = Fp(x18576.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18577);
                reg = x18577;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18578 = Fp(x18116.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18578);
                reg = x18578;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18579 = Fp(x18212.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18579);
                reg = x18579;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][25 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18580 = Fp(x16006.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18580);
                reg = x18580;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18581 = Fp(x16022.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18581);
                reg = x18581;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18582 = x18101 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18583 = Fp(x18582.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18584 = x18583 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18585 = Fp(x18584.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18585);
                reg = x18585;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18586 = x18149 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18587 = Fp(x18586.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18588 = x18587 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18589 = Fp(x18588.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18589);
                reg = x18589;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18590 = x18197 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18591 = Fp(x18590.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18592 = x18591 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18593 = Fp(x18592.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18593);
                reg = x18593;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18594 = x18245 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18595 = Fp(x18594.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18596 = x18595 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18597 = Fp(x18596.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18597);
                reg = x18597;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18598 = Fp(x18122.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18598);
                reg = x18598;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18599 = Fp(x18218.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18599);
                reg = x18599;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][26 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18600 = Fp(x16007.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18600);
                reg = x18600;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18601 = Fp(x16023.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18601);
                reg = x18601;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18602 = x18107 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18603 = Fp(x18602.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18604 = Fp(x18603.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18604);
                reg = x18604;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18605 = x18155 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18606 = Fp(x18605.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18607 = Fp(x18606.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18607);
                reg = x18607;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18608 = x18203 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18609 = Fp(x18608.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18610 = Fp(x18609.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18610);
                reg = x18610;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18611 = x18251 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18612 = Fp(x18611.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18613 = Fp(x18612.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18613);
                reg = x18613;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18614 = Fp(x18128.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18614);
                reg = x18614;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18615 = Fp(x18224.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18615);
                reg = x18615;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][27 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18616 = Fp(x16008.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18616);
                reg = x18616;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18617 = Fp(x16024.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18617);
                reg = x18617;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18618 = x18107 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18619 = Fp(x18618.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18620 = x18619 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18621 = Fp(x18620.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18621);
                reg = x18621;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18622 = x18155 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18623 = Fp(x18622.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18624 = x18623 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18625 = Fp(x18624.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18625);
                reg = x18625;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18626 = x18203 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18627 = Fp(x18626.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18628 = x18627 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18629 = Fp(x18628.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18629);
                reg = x18629;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18630 = x18251 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18631 = Fp(x18630.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18632 = x18631 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18633 = Fp(x18632.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18633);
                reg = x18633;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18634 = Fp(x18134.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18634);
                reg = x18634;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18635 = Fp(x18230.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18635);
                reg = x18635;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][28 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18636 = Fp(x16009.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18636);
                reg = x18636;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18637 = Fp(x16025.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18637);
                reg = x18637;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18638 = x18113 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18639 = Fp(x18638.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18640 = Fp(x18639.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18640);
                reg = x18640;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18641 = x18161 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18642 = Fp(x18641.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18643 = Fp(x18642.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18643);
                reg = x18643;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18644 = x18209 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18645 = Fp(x18644.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18646 = Fp(x18645.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18646);
                reg = x18646;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18647 = x18257 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18648 = Fp(x18647.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18649 = Fp(x18648.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18649);
                reg = x18649;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18650 = Fp(x18140.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18650);
                reg = x18650;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18651 = Fp(x18236.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18651);
                reg = x18651;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18652 = Fp(x16010.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18652);
                reg = x18652;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18653 = Fp(x16026.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18653);
                reg = x18653;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18654 = x18113 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18655 = Fp(x18654.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18656 = x18655 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18657 = Fp(x18656.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18657);
                reg = x18657;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18658 = x18161 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18659 = Fp(x18658.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18660 = x18659 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18661 = Fp(x18660.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18661);
                reg = x18661;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18662 = x18209 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18663 = Fp(x18662.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18664 = x18663 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18665 = Fp(x18664.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18665);
                reg = x18665;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18666 = x18257 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18667 = Fp(x18666.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18668 = x18667 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18669 = Fp(x18668.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18669);
                reg = x18669;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18670 = Fp(x18146.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18670);
                reg = x18670;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18671 = Fp(x18242.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18671);
                reg = x18671;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][30 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18672 = Fp(x16011.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18672);
                reg = x18672;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18673 = Fp(x16027.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18673);
                reg = x18673;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18674 = x18119 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18675 = Fp(x18674.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18676 = Fp(x18675.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18676);
                reg = x18676;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18677 = x18167 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18678 = Fp(x18677.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18679 = Fp(x18678.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18679);
                reg = x18679;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18680 = x18215 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18681 = Fp(x18680.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18682 = Fp(x18681.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18682);
                reg = x18682;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18683 = x18263 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18684 = Fp(x18683.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18685 = Fp(x18684.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18685);
                reg = x18685;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18686 = Fp(x18152.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18686);
                reg = x18686;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18687 = Fp(x18248.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18687);
                reg = x18687;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][31 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18688 = Fp(x16012.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18688);
                reg = x18688;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18689 = Fp(x16028.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18689);
                reg = x18689;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18690 = x18119 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18691 = Fp(x18690.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18692 = x18691 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18693 = Fp(x18692.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18693);
                reg = x18693;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18694 = x18167 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18695 = Fp(x18694.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18696 = x18695 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18697 = Fp(x18696.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18697);
                reg = x18697;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18698 = x18215 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18699 = Fp(x18698.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18700 = x18699 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18701 = Fp(x18700.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18701);
                reg = x18701;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18702 = x18263 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18703 = Fp(x18702.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18704 = x18703 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18705 = Fp(x18704.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18705);
                reg = x18705;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18706 = Fp(x18158.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18706);
                reg = x18706;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18707 = Fp(x18254.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18707);
                reg = x18707;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][32 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18708 = Fp(x16013.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18708);
                reg = x18708;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18709 = Fp(x16029.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18709);
                reg = x18709;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18710 = x18125 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18711 = Fp(x18710.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18712 = Fp(x18711.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18712);
                reg = x18712;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18713 = x18173 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18714 = Fp(x18713.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18715 = Fp(x18714.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18715);
                reg = x18715;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18716 = x18221 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18717 = Fp(x18716.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18718 = Fp(x18717.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18718);
                reg = x18718;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18719 = x18269 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18720 = Fp(x18719.asUInt32() & x91.asUInt32());
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18721 = Fp(x18720.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18721);
                reg = x18721;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18722 = Fp(x18164.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18722);
                reg = x18722;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18723 = Fp(x18260.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18723);
                reg = x18723;
              }
            }
          }
        }
        if (x13343 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][33 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13333 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18724 = Fp(x16014.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18724);
                reg = x18724;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18725 = Fp(x16030.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18725);
                reg = x18725;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18726 = x18125 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18727 = Fp(x18726.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18728 = x18727 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18729 = Fp(x18728.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18729);
                reg = x18729;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18730 = x18173 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18731 = Fp(x18730.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18732 = x18731 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18733 = Fp(x18732.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18733);
                reg = x18733;
              }
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18734 = x18221 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18735 = Fp(x18734.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18736 = x18735 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18737 = Fp(x18736.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18737);
                reg = x18737;
              }
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18738 = x18269 + x11;
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18739 = Fp(x18738.asUInt32() & x0.asUInt32());
            // loc("cirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18740 = x18739 * x89;
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18741 = Fp(x18740.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18741);
                reg = x18741;
              }
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18742 = Fp(x18170.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18742);
                reg = x18742;
              }
            }
          }
          if (x13330 != 0) {
            {
              // loc("cirgen/components/bytes.cpp":96:21)
              auto x18743 = Fp(x18266.asUInt32() & x91.asUInt32());
              // loc("cirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18743);
                reg = x18743;
              }
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18275);
              reg = x18275;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18323);
              reg = x18323;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18371);
              reg = x18371;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18419);
              reg = x18419;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18281);
              reg = x18281;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18329);
              reg = x18329;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18377);
              reg = x18377;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18425);
              reg = x18425;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18287);
              reg = x18287;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18335);
              reg = x18335;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18383);
              reg = x18383;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18431);
              reg = x18431;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18293);
              reg = x18293;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18341);
              reg = x18341;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18389);
              reg = x18389;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18437);
              reg = x18437;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18299);
              reg = x18299;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18347);
              reg = x18347;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18395);
              reg = x18395;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18443);
              reg = x18443;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18305);
              reg = x18305;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18353);
              reg = x18353;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18401);
              reg = x18401;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18449);
              reg = x18449;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18311);
              reg = x18311;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18359);
              reg = x18359;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18407);
              reg = x18407;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18455);
              reg = x18455;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18317);
              reg = x18317;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18365);
              reg = x18365;
            }
          }
        }
        if (x13336 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18413);
              reg = x18413;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16031);
              reg = x16031;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17115);
              reg = x17115;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18016);
              reg = x18016;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18048);
              reg = x18048;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16034);
              reg = x16034;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17174);
              reg = x17174;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18017);
              reg = x18017;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18049);
              reg = x18049;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16039);
              reg = x16039;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17231);
              reg = x17231;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18018);
              reg = x18018;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18050);
              reg = x18050;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16046);
              reg = x16046;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17286);
              reg = x17286;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18019);
              reg = x18019;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18051);
              reg = x18051;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16055);
              reg = x16055;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17339);
              reg = x17339;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18020);
              reg = x18020;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18052);
              reg = x18052;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16066);
              reg = x16066;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17390);
              reg = x17390;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18021);
              reg = x18021;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18053);
              reg = x18053;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16079);
              reg = x16079;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17439);
              reg = x17439;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18022);
              reg = x18022;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18054);
              reg = x18054;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16094);
              reg = x16094;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17486);
              reg = x17486;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18023);
              reg = x18023;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18055);
              reg = x18055;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16111);
              reg = x16111;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17531);
              reg = x17531;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18024);
              reg = x18024;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18056);
              reg = x18056;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16130);
              reg = x16130;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17574);
              reg = x17574;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18025);
              reg = x18025;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18057);
              reg = x18057;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16151);
              reg = x16151;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17615);
              reg = x17615;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18026);
              reg = x18026;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18058);
              reg = x18058;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16174);
              reg = x16174;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17654);
              reg = x17654;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18027);
              reg = x18027;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18059);
              reg = x18059;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16199);
              reg = x16199;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17691);
              reg = x17691;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18028);
              reg = x18028;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18060);
              reg = x18060;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16226);
              reg = x16226;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17726);
              reg = x17726;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18029);
              reg = x18029;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18061);
              reg = x18061;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16255);
              reg = x16255;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17759);
              reg = x17759;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18030);
              reg = x18030;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18062);
              reg = x18062;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16286);
              reg = x16286;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17790);
              reg = x17790;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18031);
              reg = x18031;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18063);
              reg = x18063;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16319);
              reg = x16319;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17819);
              reg = x17819;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18032);
              reg = x18032;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18064);
              reg = x18064;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16354);
              reg = x16354;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17846);
              reg = x17846;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18033);
              reg = x18033;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18065);
              reg = x18065;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16391);
              reg = x16391;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17871);
              reg = x17871;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18034);
              reg = x18034;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18066);
              reg = x18066;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16430);
              reg = x16430;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17894);
              reg = x17894;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18035);
              reg = x18035;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18067);
              reg = x18067;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16471);
              reg = x16471;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17915);
              reg = x17915;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18036);
              reg = x18036;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18068);
              reg = x18068;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16514);
              reg = x16514;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17934);
              reg = x17934;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18037);
              reg = x18037;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18069);
              reg = x18069;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16559);
              reg = x16559;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17951);
              reg = x17951;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18038);
              reg = x18038;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18070);
              reg = x18070;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16606);
              reg = x16606;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17966);
              reg = x17966;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18039);
              reg = x18039;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18071);
              reg = x18071;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16655);
              reg = x16655;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17979);
              reg = x17979;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18040);
              reg = x18040;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18072);
              reg = x18072;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16706);
              reg = x16706;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17990);
              reg = x17990;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18041);
              reg = x18041;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18073);
              reg = x18073;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16759);
              reg = x16759;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17999);
              reg = x17999;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18042);
              reg = x18042;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18074);
              reg = x18074;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16814);
              reg = x16814;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18006);
              reg = x18006;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18043);
              reg = x18043;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18075);
              reg = x18075;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16871);
              reg = x16871;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18011);
              reg = x18011;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18044);
              reg = x18044;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18076);
              reg = x18076;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16930);
              reg = x16930;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18014);
              reg = x18014;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18045);
              reg = x18045;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18077);
              reg = x18077;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16991);
              reg = x16991;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18015);
              reg = x18015;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18046);
              reg = x18046;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18078);
              reg = x18078;
            }
          }
        }
        if (x13327 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17054);
              reg = x17054;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
        if (x13328 != 0) {
          if (x13376 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18047);
              reg = x18047;
            }
          }
          if (x13330 != 0) {
            // loc("cirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x94);
              reg = x94;
            }
          }
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18744 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x18744 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18744);
          reg = x18744;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18745 = args[2][119 * steps + ((cycle - 2) & mask)];
        assert(x18745 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18745);
          reg = x18745;
        }
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":379:35)
      auto x18746 = x13333 + x13336;
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18747 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x18747 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18747);
          reg = x18747;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18748 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x18748 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18748);
          reg = x18748;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18749 = args[2][120 * steps + ((cycle - 2) & mask)];
        assert(x18749 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18749);
          reg = x18749;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18750 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x18750 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18750);
          reg = x18750;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18751 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x18751 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18751);
          reg = x18751;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18752 = args[2][121 * steps + ((cycle - 2) & mask)];
        assert(x18752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18752);
          reg = x18752;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18753 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x18753 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18753);
          reg = x18753;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18754 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x18754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18754);
          reg = x18754;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18755 = args[2][122 * steps + ((cycle - 2) & mask)];
        assert(x18755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18755);
          reg = x18755;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18756 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x18756 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18756);
          reg = x18756;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18757 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x18757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18757);
          reg = x18757;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18758 = args[2][126 * steps + ((cycle - 2) & mask)];
        assert(x18758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18758);
          reg = x18758;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18759 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x18759 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18759);
          reg = x18759;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18760 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x18760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18760);
          reg = x18760;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18761 = args[2][127 * steps + ((cycle - 2) & mask)];
        assert(x18761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18761);
          reg = x18761;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18762 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x18762 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18762);
          reg = x18762;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18763 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x18763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18763);
          reg = x18763;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18764 = args[2][128 * steps + ((cycle - 2) & mask)];
        assert(x18764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18764);
          reg = x18764;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18765 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x18765 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18765);
          reg = x18765;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18766 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x18766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18766);
          reg = x18766;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18767 = args[2][129 * steps + ((cycle - 2) & mask)];
        assert(x18767 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18767);
          reg = x18767;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18768 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x18768 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18768);
          reg = x18768;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18769 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x18769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18769);
          reg = x18769;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18770 = args[2][133 * steps + ((cycle - 2) & mask)];
        assert(x18770 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18770);
          reg = x18770;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18771 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x18771 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18771);
          reg = x18771;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18772 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x18772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18772);
          reg = x18772;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18773 = args[2][134 * steps + ((cycle - 2) & mask)];
        assert(x18773 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18773);
          reg = x18773;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18774 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x18774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18774);
          reg = x18774;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18775 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x18775 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18775);
          reg = x18775;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18776 = args[2][135 * steps + ((cycle - 2) & mask)];
        assert(x18776 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18776);
          reg = x18776;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18777 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x18777 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18777);
          reg = x18777;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18778 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x18778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18778);
          reg = x18778;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18779 = args[2][136 * steps + ((cycle - 2) & mask)];
        assert(x18779 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18779);
          reg = x18779;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18780 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x18780 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18780);
          reg = x18780;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18781 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x18781 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18781);
          reg = x18781;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18782 = args[2][140 * steps + ((cycle - 2) & mask)];
        assert(x18782 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18782);
          reg = x18782;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18783 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x18783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18783);
          reg = x18783;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18784 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x18784 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18784);
          reg = x18784;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18785 = args[2][141 * steps + ((cycle - 2) & mask)];
        assert(x18785 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18785);
          reg = x18785;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18786 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x18786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18786);
          reg = x18786;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18787 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x18787 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18787);
          reg = x18787;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18788 = args[2][142 * steps + ((cycle - 2) & mask)];
        assert(x18788 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18788);
          reg = x18788;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18789 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x18789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18789);
          reg = x18789;
        }
      }
      if (x13333 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18790 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x18790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18790);
          reg = x18790;
        }
      }
      if (x13336 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18791 = args[2][143 * steps + ((cycle - 2) & mask)];
        assert(x18791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18791);
          reg = x18791;
        }
      }
      if (x18746 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x18792 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x18792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18792);
          reg = x18792;
        }
      }
      if (x13342 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18793 = args[2][18 * steps + ((cycle - 5) & mask)];
        assert(x18793 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18794 = args[2][19 * steps + ((cycle - 5) & mask)];
        assert(x18794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18795 = x18794 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18796 = x18793 + x18795;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18797 = x18796 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18798 = args[2][18 * steps + ((cycle - 1) & mask)];
        assert(x18798 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18799 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x18799 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18800 = x18797 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18801 = x18800 + x18798;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18802 = x18799 - x18801;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18802 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18803 = args[2][20 * steps + ((cycle - 5) & mask)];
        assert(x18803 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18804 = args[2][21 * steps + ((cycle - 5) & mask)];
        assert(x18804 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18805 = x18804 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18806 = x18803 + x18805;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18807 = x18806 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18808 = args[2][19 * steps + ((cycle - 1) & mask)];
        assert(x18808 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18809 = args[2][181 * steps + ((cycle - 1) & mask)];
        assert(x18809 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18810 = x18809 + x18797;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18811 = x18807 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18812 = x18811 + x18808;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18813 = x18810 - x18812;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18813 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18814 = args[2][22 * steps + ((cycle - 5) & mask)];
        assert(x18814 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18815 = args[2][23 * steps + ((cycle - 5) & mask)];
        assert(x18815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18816 = x18815 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18817 = x18814 + x18816;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18818 = x18817 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18819 = args[2][20 * steps + ((cycle - 1) & mask)];
        assert(x18819 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18820 = args[2][182 * steps + ((cycle - 1) & mask)];
        assert(x18820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18821 = x18820 + x18807;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18822 = x18818 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18823 = x18822 + x18819;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18824 = x18821 - x18823;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18824 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18825 = args[2][24 * steps + ((cycle - 5) & mask)];
        assert(x18825 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18826 = args[2][25 * steps + ((cycle - 5) & mask)];
        assert(x18826 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18827 = x18826 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18828 = x18825 + x18827;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18829 = x18828 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18830 = args[2][21 * steps + ((cycle - 1) & mask)];
        assert(x18830 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18831 = args[2][183 * steps + ((cycle - 1) & mask)];
        assert(x18831 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18832 = x18831 + x18818;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18833 = x18829 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18834 = x18833 + x18830;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18835 = x18832 - x18834;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18835 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18836 = args[2][26 * steps + ((cycle - 5) & mask)];
        assert(x18836 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18837 = args[2][27 * steps + ((cycle - 5) & mask)];
        assert(x18837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18838 = x18837 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18839 = x18836 + x18838;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18840 = x18839 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18841 = args[2][22 * steps + ((cycle - 1) & mask)];
        assert(x18841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18842 = args[2][184 * steps + ((cycle - 1) & mask)];
        assert(x18842 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18843 = x18842 + x18829;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18844 = x18840 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18845 = x18844 + x18841;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18846 = x18843 - x18845;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18846 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18847 = args[2][28 * steps + ((cycle - 5) & mask)];
        assert(x18847 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18848 = args[2][29 * steps + ((cycle - 5) & mask)];
        assert(x18848 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18849 = x18848 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18850 = x18847 + x18849;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18851 = x18850 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18852 = args[2][23 * steps + ((cycle - 1) & mask)];
        assert(x18852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18853 = args[2][185 * steps + ((cycle - 1) & mask)];
        assert(x18853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18854 = x18853 + x18840;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18855 = x18851 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18856 = x18855 + x18852;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18857 = x18854 - x18856;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18857 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18858 = args[2][30 * steps + ((cycle - 5) & mask)];
        assert(x18858 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18859 = args[2][31 * steps + ((cycle - 5) & mask)];
        assert(x18859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18860 = x18859 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18861 = x18858 + x18860;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18862 = x18861 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18863 = args[2][24 * steps + ((cycle - 1) & mask)];
        assert(x18863 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18864 = args[2][186 * steps + ((cycle - 1) & mask)];
        assert(x18864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18865 = x18864 + x18851;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18866 = x18862 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18867 = x18866 + x18863;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18868 = x18865 - x18867;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18868 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18869 = args[2][32 * steps + ((cycle - 5) & mask)];
        assert(x18869 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18870 = args[2][33 * steps + ((cycle - 5) & mask)];
        assert(x18870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18871 = x18870 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18872 = x18869 + x18871;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18873 = x18872 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18874 = args[2][25 * steps + ((cycle - 1) & mask)];
        assert(x18874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18875 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x18875 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18876 = x18875 + x18862;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18877 = x18873 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18878 = x18877 + x18874;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18879 = x18876 - x18878;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18879 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18880 = args[2][18 * steps + ((cycle - 4) & mask)];
        assert(x18880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18881 = args[2][19 * steps + ((cycle - 4) & mask)];
        assert(x18881 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18882 = x18881 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18883 = x18880 + x18882;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18884 = x18883 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18885 = args[2][26 * steps + ((cycle - 1) & mask)];
        assert(x18885 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18886 = args[2][188 * steps + ((cycle - 1) & mask)];
        assert(x18886 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18887 = x18886 + x18873;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18888 = x18884 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18889 = x18888 + x18885;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18890 = x18887 - x18889;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18890 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18891 = args[2][20 * steps + ((cycle - 4) & mask)];
        assert(x18891 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18892 = args[2][21 * steps + ((cycle - 4) & mask)];
        assert(x18892 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18893 = x18892 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18894 = x18891 + x18893;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18895 = x18894 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18896 = args[2][27 * steps + ((cycle - 1) & mask)];
        assert(x18896 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18897 = args[2][189 * steps + ((cycle - 1) & mask)];
        assert(x18897 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18898 = x18897 + x18884;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18899 = x18895 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18900 = x18899 + x18896;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18901 = x18898 - x18900;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18901 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18902 = args[2][22 * steps + ((cycle - 4) & mask)];
        assert(x18902 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18903 = args[2][23 * steps + ((cycle - 4) & mask)];
        assert(x18903 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18904 = x18903 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18905 = x18902 + x18904;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18906 = x18905 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18907 = args[2][28 * steps + ((cycle - 1) & mask)];
        assert(x18907 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18908 = args[2][190 * steps + ((cycle - 1) & mask)];
        assert(x18908 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18909 = x18908 + x18895;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18910 = x18906 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18911 = x18910 + x18907;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18912 = x18909 - x18911;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18912 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18913 = args[2][24 * steps + ((cycle - 4) & mask)];
        assert(x18913 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18914 = args[2][25 * steps + ((cycle - 4) & mask)];
        assert(x18914 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18915 = x18914 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18916 = x18913 + x18915;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18917 = x18916 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18918 = args[2][29 * steps + ((cycle - 1) & mask)];
        assert(x18918 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18919 = args[2][191 * steps + ((cycle - 1) & mask)];
        assert(x18919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18920 = x18919 + x18906;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18921 = x18917 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18922 = x18921 + x18918;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18923 = x18920 - x18922;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18923 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18924 = args[2][26 * steps + ((cycle - 4) & mask)];
        assert(x18924 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18925 = args[2][27 * steps + ((cycle - 4) & mask)];
        assert(x18925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18926 = x18925 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18927 = x18924 + x18926;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18928 = x18927 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18929 = args[2][30 * steps + ((cycle - 1) & mask)];
        assert(x18929 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18930 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x18930 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18931 = x18930 + x18917;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18932 = x18928 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18933 = x18932 + x18929;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18934 = x18931 - x18933;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18934 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18935 = args[2][28 * steps + ((cycle - 4) & mask)];
        assert(x18935 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18936 = args[2][29 * steps + ((cycle - 4) & mask)];
        assert(x18936 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18937 = x18936 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18938 = x18935 + x18937;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18939 = x18938 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18940 = args[2][31 * steps + ((cycle - 1) & mask)];
        assert(x18940 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18941 = args[2][193 * steps + ((cycle - 1) & mask)];
        assert(x18941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18942 = x18941 + x18928;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18943 = x18939 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18944 = x18943 + x18940;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18945 = x18942 - x18944;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18945 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18946 = args[2][30 * steps + ((cycle - 4) & mask)];
        assert(x18946 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18947 = args[2][31 * steps + ((cycle - 4) & mask)];
        assert(x18947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18948 = x18947 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18949 = x18946 + x18948;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18950 = x18949 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18951 = args[2][32 * steps + ((cycle - 1) & mask)];
        assert(x18951 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18952 = args[2][194 * steps + ((cycle - 1) & mask)];
        assert(x18952 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18953 = x18952 + x18939;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18954 = x18950 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18955 = x18954 + x18951;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18956 = x18953 - x18955;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18956 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18957 = args[2][32 * steps + ((cycle - 4) & mask)];
        assert(x18957 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18958 = args[2][33 * steps + ((cycle - 4) & mask)];
        assert(x18958 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18959 = x18958 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18960 = x18957 + x18959;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18961 = x18960 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18962 = args[2][33 * steps + ((cycle - 1) & mask)];
        assert(x18962 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18963 = args[2][195 * steps + ((cycle - 1) & mask)];
        assert(x18963 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18964 = x18963 + x18950;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18965 = x18961 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18966 = x18965 + x18962;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18967 = x18964 - x18966;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18967 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18968 = args[2][18 * steps + ((cycle - 3) & mask)];
        assert(x18968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18969 = args[2][19 * steps + ((cycle - 3) & mask)];
        assert(x18969 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18970 = x18969 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18971 = x18968 + x18970;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18972 = x18971 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18973 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x18973 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18974 = args[2][196 * steps + ((cycle - 1) & mask)];
        assert(x18974 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18975 = x18974 + x18961;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18976 = x18972 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18977 = x18976 + x18973;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18978 = x18975 - x18977;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18978 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18979 = args[2][20 * steps + ((cycle - 3) & mask)];
        assert(x18979 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18980 = args[2][21 * steps + ((cycle - 3) & mask)];
        assert(x18980 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18981 = x18980 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18982 = x18979 + x18981;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18983 = x18982 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18984 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x18984 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18985 = args[2][197 * steps + ((cycle - 1) & mask)];
        assert(x18985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18986 = x18985 + x18972;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18987 = x18983 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18988 = x18987 + x18984;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18989 = x18986 - x18988;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18989 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18990 = args[2][22 * steps + ((cycle - 3) & mask)];
        assert(x18990 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18991 = args[2][23 * steps + ((cycle - 3) & mask)];
        assert(x18991 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18992 = x18991 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18993 = x18990 + x18992;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18994 = x18993 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x18995 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x18995 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18996 = args[2][198 * steps + ((cycle - 1) & mask)];
        assert(x18996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18997 = x18996 + x18983;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18998 = x18994 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18999 = x18998 + x18995;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19000 = x18997 - x18999;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19000 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19001 = args[2][24 * steps + ((cycle - 3) & mask)];
        assert(x19001 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19002 = args[2][25 * steps + ((cycle - 3) & mask)];
        assert(x19002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19003 = x19002 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19004 = x19001 + x19003;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19005 = x19004 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19006 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19006 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19007 = args[2][199 * steps + ((cycle - 1) & mask)];
        assert(x19007 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19008 = x19007 + x18994;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19009 = x19005 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19010 = x19009 + x19006;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19011 = x19008 - x19010;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19011 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19012 = args[2][26 * steps + ((cycle - 3) & mask)];
        assert(x19012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19013 = args[2][27 * steps + ((cycle - 3) & mask)];
        assert(x19013 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19014 = x19013 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19015 = x19012 + x19014;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19016 = x19015 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19017 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19018 = args[2][200 * steps + ((cycle - 1) & mask)];
        assert(x19018 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19019 = x19018 + x19005;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19020 = x19016 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19021 = x19020 + x19017;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19022 = x19019 - x19021;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19022 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19023 = args[2][28 * steps + ((cycle - 3) & mask)];
        assert(x19023 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19024 = args[2][29 * steps + ((cycle - 3) & mask)];
        assert(x19024 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19025 = x19024 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19026 = x19023 + x19025;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19027 = x19026 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19028 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19028 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19029 = args[2][201 * steps + ((cycle - 1) & mask)];
        assert(x19029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19030 = x19029 + x19016;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19031 = x19027 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19032 = x19031 + x19028;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19033 = x19030 - x19032;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19033 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19034 = args[2][30 * steps + ((cycle - 3) & mask)];
        assert(x19034 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19035 = args[2][31 * steps + ((cycle - 3) & mask)];
        assert(x19035 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19036 = x19035 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19037 = x19034 + x19036;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19038 = x19037 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19039 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19039 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19040 = args[2][202 * steps + ((cycle - 1) & mask)];
        assert(x19040 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19041 = x19040 + x19027;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19042 = x19038 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19043 = x19042 + x19039;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19044 = x19041 - x19043;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19044 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19045 = args[2][32 * steps + ((cycle - 3) & mask)];
        assert(x19045 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19046 = args[2][33 * steps + ((cycle - 3) & mask)];
        assert(x19046 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19047 = x19046 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19048 = x19045 + x19047;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19049 = x19048 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19050 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19050 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19051 = args[2][203 * steps + ((cycle - 1) & mask)];
        assert(x19051 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19052 = x19051 + x19038;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19053 = x19049 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19054 = x19053 + x19050;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19055 = x19052 - x19054;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19055 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19056 = args[2][18 * steps + ((cycle - 2) & mask)];
        assert(x19056 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19057 = args[2][19 * steps + ((cycle - 2) & mask)];
        assert(x19057 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19058 = x19057 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19059 = x19056 + x19058;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19060 = x19059 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19061 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19062 = args[2][204 * steps + ((cycle - 1) & mask)];
        assert(x19062 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19063 = x19062 + x19049;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19064 = x19060 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19065 = x19064 + x19061;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19066 = x19063 - x19065;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19066 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19067 = args[2][20 * steps + ((cycle - 2) & mask)];
        assert(x19067 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19068 = args[2][21 * steps + ((cycle - 2) & mask)];
        assert(x19068 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19069 = x19068 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19070 = x19067 + x19069;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19071 = x19070 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19072 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19073 = args[2][205 * steps + ((cycle - 1) & mask)];
        assert(x19073 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19074 = x19073 + x19060;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19075 = x19071 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19076 = x19075 + x19072;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19077 = x19074 - x19076;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19077 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19078 = args[2][22 * steps + ((cycle - 2) & mask)];
        assert(x19078 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19079 = args[2][23 * steps + ((cycle - 2) & mask)];
        assert(x19079 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19080 = x19079 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19081 = x19078 + x19080;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19082 = x19081 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19083 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19083 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19084 = args[2][206 * steps + ((cycle - 1) & mask)];
        assert(x19084 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19085 = x19084 + x19071;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19086 = x19082 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19087 = x19086 + x19083;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19088 = x19085 - x19087;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19088 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19089 = args[2][24 * steps + ((cycle - 2) & mask)];
        assert(x19089 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19090 = args[2][25 * steps + ((cycle - 2) & mask)];
        assert(x19090 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19091 = x19090 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19092 = x19089 + x19091;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19093 = x19092 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19094 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19095 = args[2][207 * steps + ((cycle - 1) & mask)];
        assert(x19095 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19096 = x19095 + x19082;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19097 = x19093 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19098 = x19097 + x19094;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19099 = x19096 - x19098;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19099 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19100 = args[2][26 * steps + ((cycle - 2) & mask)];
        assert(x19100 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19101 = args[2][27 * steps + ((cycle - 2) & mask)];
        assert(x19101 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19102 = x19101 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19103 = x19100 + x19102;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19104 = x19103 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19105 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19105 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19106 = args[2][208 * steps + ((cycle - 1) & mask)];
        assert(x19106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19107 = x19106 + x19093;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19108 = x19104 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19109 = x19108 + x19105;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19110 = x19107 - x19109;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19110 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19111 = args[2][28 * steps + ((cycle - 2) & mask)];
        assert(x19111 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19112 = args[2][29 * steps + ((cycle - 2) & mask)];
        assert(x19112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19113 = x19112 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19114 = x19111 + x19113;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19115 = x19114 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19116 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19116 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19117 = args[2][209 * steps + ((cycle - 1) & mask)];
        assert(x19117 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19118 = x19117 + x19104;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19119 = x19115 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19120 = x19119 + x19116;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19121 = x19118 - x19120;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19121 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19122 = args[2][30 * steps + ((cycle - 2) & mask)];
        assert(x19122 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19123 = args[2][31 * steps + ((cycle - 2) & mask)];
        assert(x19123 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19124 = x19123 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19125 = x19122 + x19124;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19126 = x19125 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19127 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19127 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19128 = args[2][210 * steps + ((cycle - 1) & mask)];
        assert(x19128 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19129 = x19128 + x19115;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19130 = x19126 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19131 = x19130 + x19127;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19132 = x19129 - x19131;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19132 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19133 = args[2][32 * steps + ((cycle - 2) & mask)];
        assert(x19133 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19134 = args[2][33 * steps + ((cycle - 2) & mask)];
        assert(x19134 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19135 = x19134 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19136 = x19133 + x19135;
        // loc("cirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19137 = x19136 - x11;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19138 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19138 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19139 = args[2][211 * steps + ((cycle - 1) & mask)];
        assert(x19139 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19140 = x19139 + x19126;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19141 = x19137 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19142 = x19141 + x19138;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19143 = x19140 - x19142;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19143 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19144 = args[2][212 * steps + ((cycle - 5) & mask)];
        assert(x19144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19145 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x19145 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19146 = x19145 + x19137;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19147 = x19144 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19148 = x19146 - x19147;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19148 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19149 = args[2][213 * steps + ((cycle - 5) & mask)];
        assert(x19149 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19150 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x19150 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19151 = x19150 + x19144;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19152 = x19149 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19153 = x19151 - x19152;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19153 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19154 = args[2][214 * steps + ((cycle - 5) & mask)];
        assert(x19154 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19155 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x19155 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19156 = x19155 + x19149;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19157 = x19154 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19158 = x19156 - x19157;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19158 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19159 = args[2][215 * steps + ((cycle - 5) & mask)];
        assert(x19159 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19160 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x19160 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19161 = x19160 + x19154;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19162 = x19159 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19163 = x19161 - x19162;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19163 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19164 = args[2][216 * steps + ((cycle - 5) & mask)];
        assert(x19164 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19165 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x19165 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19166 = x19165 + x19159;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19167 = x19164 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19168 = x19166 - x19167;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19168 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19169 = args[2][217 * steps + ((cycle - 5) & mask)];
        assert(x19169 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19170 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x19170 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19171 = x19170 + x19164;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19172 = x19169 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19173 = x19171 - x19172;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19173 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19174 = args[2][218 * steps + ((cycle - 5) & mask)];
        assert(x19174 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19175 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x19175 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19176 = x19175 + x19169;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19177 = x19174 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19178 = x19176 - x19177;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19178 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19179 = args[2][219 * steps + ((cycle - 5) & mask)];
        assert(x19179 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19180 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x19180 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19181 = x19180 + x19174;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19182 = x19179 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19183 = x19181 - x19182;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19183 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19184 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x19184 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19185 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x19185 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19186 = x19185 + x19179;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19187 = x19184 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19188 = x19186 - x19187;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19188 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19189 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x19189 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19190 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x19190 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19191 = x19190 + x19184;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19192 = x19189 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19193 = x19191 - x19192;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19193 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19194 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x19194 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19195 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x19195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19196 = x19195 + x19189;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19197 = x19194 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19198 = x19196 - x19197;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19198 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19199 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x19199 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19200 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x19200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19201 = x19200 + x19194;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19202 = x19199 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19203 = x19201 - x19202;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19203 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19204 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x19204 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19205 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x19205 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19206 = x19205 + x19199;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19207 = x19204 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19208 = x19206 - x19207;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19208 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19209 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x19209 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19210 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x19210 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19211 = x19210 + x19204;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19212 = x19209 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19213 = x19211 - x19212;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19213 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19214 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x19214 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19215 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x19215 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19216 = x19215 + x19209;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19217 = x19214 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19218 = x19216 - x19217;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19218 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19219 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x19219 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19220 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x19220 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19221 = x19220 + x19214;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19222 = x19219 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19223 = x19221 - x19222;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19223 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19224 = args[2][212 * steps + ((cycle - 3) & mask)];
        assert(x19224 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19225 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x19225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19226 = x19225 + x19219;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19227 = x19224 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19228 = x19226 - x19227;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19228 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19229 = args[2][213 * steps + ((cycle - 3) & mask)];
        assert(x19229 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19230 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x19230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19231 = x19230 + x19224;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19232 = x19229 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19233 = x19231 - x19232;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19233 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19234 = args[2][214 * steps + ((cycle - 3) & mask)];
        assert(x19234 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19235 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x19235 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19236 = x19235 + x19229;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19237 = x19234 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19238 = x19236 - x19237;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19238 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19239 = args[2][215 * steps + ((cycle - 3) & mask)];
        assert(x19239 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19240 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x19240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19241 = x19240 + x19234;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19242 = x19239 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19243 = x19241 - x19242;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19243 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19244 = args[2][216 * steps + ((cycle - 3) & mask)];
        assert(x19244 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19245 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x19245 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19246 = x19245 + x19239;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19247 = x19244 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19248 = x19246 - x19247;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19248 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19249 = args[2][217 * steps + ((cycle - 3) & mask)];
        assert(x19249 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19250 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x19250 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19251 = x19250 + x19244;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19252 = x19249 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19253 = x19251 - x19252;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19253 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19254 = args[2][218 * steps + ((cycle - 3) & mask)];
        assert(x19254 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19255 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x19255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19256 = x19255 + x19249;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19257 = x19254 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19258 = x19256 - x19257;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19258 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19259 = args[2][219 * steps + ((cycle - 3) & mask)];
        assert(x19259 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19260 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x19260 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19261 = x19260 + x19254;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19262 = x19259 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19263 = x19261 - x19262;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19263 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19264 = args[2][212 * steps + ((cycle - 2) & mask)];
        assert(x19264 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19265 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x19265 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19266 = x19265 + x19259;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19267 = x19264 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19268 = x19266 - x19267;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19268 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19269 = args[2][213 * steps + ((cycle - 2) & mask)];
        assert(x19269 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19270 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x19270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19271 = x19270 + x19264;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19272 = x19269 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19273 = x19271 - x19272;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19273 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19274 = args[2][214 * steps + ((cycle - 2) & mask)];
        assert(x19274 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19275 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x19275 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19276 = x19275 + x19269;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19277 = x19274 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19278 = x19276 - x19277;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19278 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19279 = args[2][215 * steps + ((cycle - 2) & mask)];
        assert(x19279 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19280 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x19280 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19281 = x19280 + x19274;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19282 = x19279 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19283 = x19281 - x19282;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19283 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19284 = args[2][216 * steps + ((cycle - 2) & mask)];
        assert(x19284 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19285 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x19285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19286 = x19285 + x19279;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19287 = x19284 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19288 = x19286 - x19287;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19288 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19289 = args[2][217 * steps + ((cycle - 2) & mask)];
        assert(x19289 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19290 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x19290 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19291 = x19290 + x19284;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19292 = x19289 * x90;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19293 = x19291 - x19292;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19293 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("cirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19294 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x19294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19295 = x19294 + x19289;
        // loc("cirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19295 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/bigint.cpp:428");
      }
      if (x13328 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x19296 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x19296 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/bigint.cpp":438:34)
        auto x19297 = x13330 * x78;
        // loc("cirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19298 = x19296 + x19297;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19299 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19299 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19300 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19300 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19301 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19301 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19302 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19302 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19299);
          reg = x19299;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19300);
          reg = x19300;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19301);
          reg = x19301;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19302);
          reg = x19302;
        }
        {
          host_args.at(0) = x19298;
          host_args.at(1) = x19299;
          host_args.at(2) = x19300;
          host_args.at(3) = x19301;
          host_args.at(4) = x19302;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19303 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19303 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19304 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19304 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19305 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19305 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19306 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19306 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19298);
          reg = x19298;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19303);
          reg = x19303;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19304);
          reg = x19304;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19305);
          reg = x19305;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19306);
          reg = x19306;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19307 = x19298 + x95;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19308 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19309 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19309 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19310 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19310 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19311 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19311 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19308);
          reg = x19308;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19309);
          reg = x19309;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19310);
          reg = x19310;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19311);
          reg = x19311;
        }
        {
          host_args.at(0) = x19307;
          host_args.at(1) = x19308;
          host_args.at(2) = x19309;
          host_args.at(3) = x19310;
          host_args.at(4) = x19311;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19312 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19312 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19313 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19313 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19314 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19314 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19315 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19315 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19307);
          reg = x19307;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19312);
          reg = x19312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19313);
          reg = x19313;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19314);
          reg = x19314;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19315);
          reg = x19315;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19316 = x19298 + x92;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19317 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19318 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19318 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19319 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19320 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19320 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19317);
          reg = x19317;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19318);
          reg = x19318;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19319);
          reg = x19319;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19320);
          reg = x19320;
        }
        {
          host_args.at(0) = x19316;
          host_args.at(1) = x19317;
          host_args.at(2) = x19318;
          host_args.at(3) = x19319;
          host_args.at(4) = x19320;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19321 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19321 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19322 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19322 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19323 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19323 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19324 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19324 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19316);
          reg = x19316;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19321);
          reg = x19321;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19322);
          reg = x19322;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19323);
          reg = x19323;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19324);
          reg = x19324;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19325 = x19298 + x77;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19326 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19326 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19327 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19327 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19328 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19328 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x19329 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19329 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19326);
          reg = x19326;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19327);
          reg = x19327;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19328);
          reg = x19328;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19329);
          reg = x19329;
        }
        {
          host_args.at(0) = x19325;
          host_args.at(1) = x19326;
          host_args.at(2) = x19327;
          host_args.at(3) = x19328;
          host_args.at(4) = x19329;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19330 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19330 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19331 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19331 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19332 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19333 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19333 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19325);
          reg = x19325;
        }
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19330);
          reg = x19330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19331);
          reg = x19331;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19332);
          reg = x19332;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19333);
          reg = x19333;
        }
        // loc("cirgen/circuit/rv32im/bigint.cpp":445:10)
        auto x19334 = x19296 * x78;
        // loc("./cirgen/components/u32.h":25:12)
        auto x19335 = x19304 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19336 = x19303 + x19335;
        // loc("./cirgen/components/u32.h":26:12)
        auto x19337 = x19305 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19338 = x19336 + x19337;
        // loc("./cirgen/components/u32.h":27:12)
        auto x19339 = x19306 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19340 = x19338 + x19339;
        // loc("./cirgen/components/u32.h":25:12)
        auto x19341 = x19313 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19342 = x19312 + x19341;
        // loc("./cirgen/components/u32.h":26:12)
        auto x19343 = x19314 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19344 = x19342 + x19343;
        // loc("./cirgen/components/u32.h":27:12)
        auto x19345 = x19315 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19346 = x19344 + x19345;
        // loc("./cirgen/components/u32.h":25:12)
        auto x19347 = x19322 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19348 = x19321 + x19347;
        // loc("./cirgen/components/u32.h":26:12)
        auto x19349 = x19323 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19350 = x19348 + x19349;
        // loc("./cirgen/components/u32.h":27:12)
        auto x19351 = x19324 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19352 = x19350 + x19351;
        // loc("./cirgen/components/u32.h":25:12)
        auto x19353 = x19331 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19354 = x19330 + x19353;
        // loc("./cirgen/components/u32.h":26:12)
        auto x19355 = x19332 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19356 = x19354 + x19355;
        // loc("./cirgen/components/u32.h":27:12)
        auto x19357 = x19333 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x19358 = x19356 + x19357;
        host_args.at(0) = x19334;
        host_args.at(1) = x19340;
        host_args.at(2) = x19346;
        host_args.at(3) = x19352;
        host_args.at(4) = x19358;
        host(ctx, "log", "  Writing: ioAddr = 0x%x, data = { %u, %u, %u, %u }", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("cirgen/circuit/rv32im/bigint.cpp":453:18)
      auto x19359 = x95 - x13342;
      if (x19359 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x19360 = x754 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19361 = Fp(x19360.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19361);
            reg = x19361;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19362 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19362 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19363 = x19360 - x19362;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19364 = x19363 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19365 = Fp(x19364.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19365);
            reg = x19365;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19366 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19366 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19367 = x19364 - x19366;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19368 = x19367 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19369 = Fp(x19368.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19369);
            reg = x19369;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19370 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19370 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19371 = x19368 - x19370;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19372 = x19371 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x19373 = Fp(x19372.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19373);
            reg = x19373;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19374 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x19375 = x19372 - x19374;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x19376 = x19375 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19376);
          reg = x19376;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19377 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x19378 = x95 - x19377;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x19379 = x19377 * x19378;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19379);
          reg = x19379;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x19380 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x19381 = x92 - x19377;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x19382 = x19380 * x19381;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x19382 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/bigint.cpp":455:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      if (x13342 != 0) {
        // loc("cirgen/circuit/rv32im/bigint.cpp":458:19)
        auto x19383 = x754 + x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x19384 = x19383 + x78;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19385 = Fp(x19384.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19385);
            reg = x19385;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19386 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19386 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19387 = x19384 - x19386;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19388 = x19387 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19389 = Fp(x19388.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19389);
            reg = x19389;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19390 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19390 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19391 = x19388 - x19390;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19392 = x19391 * x89;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x19393 = Fp(x19392.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19393);
            reg = x19393;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x19394 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19394 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x19395 = x19392 - x19394;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x19396 = x19395 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x19397 = Fp(x19396.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19397);
            reg = x19397;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19398 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19398 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x19399 = x19396 - x19398;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x19400 = x19399 * x76;
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19400);
          reg = x19400;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19401 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19401 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x19402 = x95 - x19401;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x19403 = x19401 * x19402;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19403);
          reg = x19403;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x19404 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x19405 = x92 - x19401;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x19406 = x19404 * x19405;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x19406 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/bigint.cpp":459:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./cirgen/components/mux.h":49:25))
    auto x19407 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19407 != Fp::invalid());
    if (x19407 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("cirgen/circuit/rv32im/body.cpp":94:63))
      auto x19408 = args[2][115 * steps + ((cycle - 1) & mask)];
      assert(x19408 != Fp::invalid());
      if (x19408 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("cirgen/circuit/rv32im/body.cpp":95:53))
        auto x19409 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x19409 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":95:16)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19409);
          reg = x19409;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/body.cpp":97:69))
      auto x19410 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x19410 != Fp::invalid());
      if (x19410 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/body.cpp":100:75))
        auto x19411 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x19411 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":101:8)
        auto x19412 = x95 - x19411;
        // loc("cirgen/circuit/rv32im/body.cpp":101:8)
        if (x19412 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:101");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19413 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x19413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":104:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19413);
          reg = x19413;
        }
        host_args.at(0) = x19413;
        host(ctx, "log", "isFromEcall, set checkDirty: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":27:23)
        args[1][72] = x19413;
        {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
          auto x19414 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x19414 != Fp::invalid());
          host_args.at(0) = x19414;
          host_args.at(1) = x754;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/body.cpp":112:77))
      auto x19415 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x19415 != Fp::invalid());
      if (x19415 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":114:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        host(ctx, "log", "isFromPageFault, set checkDirty: 1", host_args.data(), 0, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":27:23)
        args[1][72] = x95;
        {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("./cirgen/compiler/edsl/component.h":154:27))
          auto x19416 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x19416 != Fp::invalid());
          host_args.at(0) = x19416;
          host_args.at(1) = x754;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x19417 = x754 + x78;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x19418 = Fp(x19417.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19418);
          reg = x19418;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x19419 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x19419 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x19420 = x19417 - x19419;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x19421 = x19420 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x19422 = Fp(x19421.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19422);
          reg = x19422;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x19423 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x19423 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x19424 = x19421 - x19423;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x19425 = x19424 * x89;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x19426 = Fp(x19425.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19426);
          reg = x19426;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x19427 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x19427 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x19428 = x19425 - x19427;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x19429 = x19428 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x19430 = Fp(x19429.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19430);
          reg = x19430;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19431 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x19431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x19432 = x19429 - x19431;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x19433 = x19432 * x76;
      // loc("./cirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19433);
        reg = x19433;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19434 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x19434 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x19435 = x95 - x19434;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x19436 = x19434 * x19435;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19436);
        reg = x19436;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x19437 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x19437 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x19438 = x92 - x19434;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x19439 = x19437 * x19438;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x19439 != 0) abort();std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/body.cpp":123:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x64);
        reg = x64;
      }
    }
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":49:25))
  auto x19440 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x19440 != Fp::invalid());
  if (x19440 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x19441 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19441 != Fp::invalid());
    host_args.at(0) = x19441;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":49:25))
  auto x19442 = args[0][8 * steps + ((cycle - 0) & mask)];
  assert(x19442 != Fp::invalid());
  if (x19442 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":154:27))
    auto x19443 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19443 != Fp::invalid());
    host_args.at(0) = x19443;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":78:27))
  auto x19444 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x19444 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19445 = x19444 + x96;
  // loc("Top/Code/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/top.cpp":78:27))
  auto x19446 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x19446 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19447 = x19445 + x19446;
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19448 = x19447 + x421;
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19449 = x19448 + x474;
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19450 = x19449 + x739;
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19451 = x19450 + x19440;
  // loc("cirgen/circuit/rv32im/top.cpp":78:16)
  auto x19452 = x19451 + x19442;
  if (x739 != 0) {
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("cirgen/circuit/rv32im/top.cpp":86:18))
    auto x19453 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19453 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":87:5)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x19453);
      reg = x19453;
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":89:23)
  auto x19454 = x19452 - x739;
  if (x19454 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":89:27)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
  }
  // loc("Top/halted(Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
  auto x19455 = args[2][2 * steps + ((cycle - 0) & mask)];
  assert(x19455 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":90:10)
  auto x19456 = x95 - x19455;
  if (x19446 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x421 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x474 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x739 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19457 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19457 != Fp::invalid());
    if (x19457 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19458 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19458 != Fp::invalid());
    if (x19458 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19459 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19459 != Fp::invalid());
    if (x19459 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19460 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19460 != Fp::invalid());
    if (x19460 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19461 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19461 != Fp::invalid());
    if (x19461 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19462 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19462 != Fp::invalid());
    if (x19462 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19463 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x19463 != Fp::invalid());
    if (x19463 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19464 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x19464 != Fp::invalid());
    if (x19464 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19465 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x19465 != Fp::invalid());
    if (x19465 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x19466 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x19466 != Fp::invalid());
      if (x19466 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x19467 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x19467 != Fp::invalid());
      if (x19467 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x19468 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x19468 != Fp::invalid());
      if (x19468 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x19469 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x19469 != Fp::invalid());
      if (x19469 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x19470 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x19470 != Fp::invalid());
      if (x19470 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19471 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x19471 != Fp::invalid());
    if (x19471 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19472 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x19472 != Fp::invalid());
    if (x19472 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19473 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x19473 != Fp::invalid());
    if (x19473 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19474 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x19474 != Fp::invalid());
    if (x19474 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19475 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x19475 != Fp::invalid());
    if (x19475 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19476 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x19476 != Fp::invalid());
    if (x19476 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19477 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19477 != Fp::invalid());
    if (x19477 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
  }
  if (x19440 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x421 != 0) {
    {
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19478 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x19478 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19479 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x19479 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19480 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19480 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19481 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19481 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19482 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19482 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19483 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19483 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19484 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19484 != Fp::invalid());
      host_args.at(0) = x19478;
      host_args.at(1) = x19479;
      host_args.at(2) = x19480;
      host_args.at(3) = x19481;
      host_args.at(4) = x19482;
      host_args.at(5) = x19483;
      host_args.at(6) = x19484;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19485 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19485 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19486 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19486 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19487 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19487 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19488 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19488 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19489 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19489 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19490 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19490 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19491 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19491 != Fp::invalid());
      host_args.at(0) = x19485;
      host_args.at(1) = x19486;
      host_args.at(2) = x19487;
      host_args.at(3) = x19488;
      host_args.at(4) = x19489;
      host_args.at(5) = x19490;
      host_args.at(6) = x19491;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19492 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19492 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19493 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19493 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19494 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19494 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19495 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19495 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19496 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19496 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19497 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19497 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19498 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19498 != Fp::invalid());
      host_args.at(0) = x19492;
      host_args.at(1) = x19493;
      host_args.at(2) = x19494;
      host_args.at(3) = x19495;
      host_args.at(4) = x19496;
      host_args.at(5) = x19497;
      host_args.at(6) = x19498;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19499 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19499 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19500 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19500 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19501 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19501 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19502 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19502 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19503 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19503 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19504 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19504 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19505 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19505 != Fp::invalid());
      host_args.at(0) = x19499;
      host_args.at(1) = x19500;
      host_args.at(2) = x19501;
      host_args.at(3) = x19502;
      host_args.at(4) = x19503;
      host_args.at(5) = x19504;
      host_args.at(6) = x19505;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x474 != 0) {
    {
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19506 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x19506 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19507 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x19507 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19508 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19508 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19509 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19509 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19510 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19510 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19511 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19511 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19512 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19512 != Fp::invalid());
      host_args.at(0) = x19506;
      host_args.at(1) = x19507;
      host_args.at(2) = x19508;
      host_args.at(3) = x19509;
      host_args.at(4) = x19510;
      host_args.at(5) = x19511;
      host_args.at(6) = x19512;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19513 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19513 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19514 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19514 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19515 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19515 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19516 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19516 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19517 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19517 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19518 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19518 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19519 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19519 != Fp::invalid());
      host_args.at(0) = x19513;
      host_args.at(1) = x19514;
      host_args.at(2) = x19515;
      host_args.at(3) = x19516;
      host_args.at(4) = x19517;
      host_args.at(5) = x19518;
      host_args.at(6) = x19519;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19520 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19520 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19521 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19521 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19522 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19522 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19523 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19523 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19524 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19524 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19525 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19525 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19526 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19526 != Fp::invalid());
      host_args.at(0) = x19520;
      host_args.at(1) = x19521;
      host_args.at(2) = x19522;
      host_args.at(3) = x19523;
      host_args.at(4) = x19524;
      host_args.at(5) = x19525;
      host_args.at(6) = x19526;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19527 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19527 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19528 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19528 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19529 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19529 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19530 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19530 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19531 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19531 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19532 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19532 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
      auto x19533 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19533 != Fp::invalid());
      host_args.at(0) = x19527;
      host_args.at(1) = x19528;
      host_args.at(2) = x19529;
      host_args.at(3) = x19530;
      host_args.at(4) = x19531;
      host_args.at(5) = x19532;
      host_args.at(6) = x19533;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x739 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19534 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19534 != Fp::invalid());
    if (x19534 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19535 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19535 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19536 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19536 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19537 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19537 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19538 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19538 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19539 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19539 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19540 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19540 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19541 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19541 != Fp::invalid());
        host_args.at(0) = x19535;
        host_args.at(1) = x19536;
        host_args.at(2) = x19537;
        host_args.at(3) = x19538;
        host_args.at(4) = x19539;
        host_args.at(5) = x19540;
        host_args.at(6) = x19541;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19542 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19542 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19543 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19543 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19544 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19544 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19545 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19545 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19546 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19546 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19547 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19547 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19548 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19548 != Fp::invalid());
        host_args.at(0) = x19542;
        host_args.at(1) = x19543;
        host_args.at(2) = x19544;
        host_args.at(3) = x19545;
        host_args.at(4) = x19546;
        host_args.at(5) = x19547;
        host_args.at(6) = x19548;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19549 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19549 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19550 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19550 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19551 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19551 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19552 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19552 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19553 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19553 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19554 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19554 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19555 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19555 != Fp::invalid());
        host_args.at(0) = x19549;
        host_args.at(1) = x19550;
        host_args.at(2) = x19551;
        host_args.at(3) = x19552;
        host_args.at(4) = x19553;
        host_args.at(5) = x19554;
        host_args.at(6) = x19555;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19556 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19556 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19557 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19557 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19558 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19558 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19559 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19559 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19560 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19560 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19561 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19561 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19562 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19562 != Fp::invalid());
        host_args.at(0) = x19556;
        host_args.at(1) = x19557;
        host_args.at(2) = x19558;
        host_args.at(3) = x19559;
        host_args.at(4) = x19560;
        host_args.at(5) = x19561;
        host_args.at(6) = x19562;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19563 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19563 != Fp::invalid());
    if (x19563 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19564 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19564 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19565 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19565 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19566 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19566 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19567 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19567 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19568 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19568 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19569 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19569 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19570 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19570 != Fp::invalid());
        host_args.at(0) = x19564;
        host_args.at(1) = x19565;
        host_args.at(2) = x19566;
        host_args.at(3) = x19567;
        host_args.at(4) = x19568;
        host_args.at(5) = x19569;
        host_args.at(6) = x19570;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19571 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19571 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19572 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19572 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19573 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19573 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19574 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19574 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19575 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19575 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19576 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19576 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19577 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19577 != Fp::invalid());
        host_args.at(0) = x19571;
        host_args.at(1) = x19572;
        host_args.at(2) = x19573;
        host_args.at(3) = x19574;
        host_args.at(4) = x19575;
        host_args.at(5) = x19576;
        host_args.at(6) = x19577;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19578 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19578 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19579 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19579 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19580 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19580 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19581 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19581 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19582 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19582 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19583 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19583 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19584 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19584 != Fp::invalid());
        host_args.at(0) = x19578;
        host_args.at(1) = x19579;
        host_args.at(2) = x19580;
        host_args.at(3) = x19581;
        host_args.at(4) = x19582;
        host_args.at(5) = x19583;
        host_args.at(6) = x19584;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19585 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19585 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19586 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19586 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19587 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19587 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19588 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19588 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19589 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19589 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19590 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19590 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19591 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19591 != Fp::invalid());
        host_args.at(0) = x19585;
        host_args.at(1) = x19586;
        host_args.at(2) = x19587;
        host_args.at(3) = x19588;
        host_args.at(4) = x19589;
        host_args.at(5) = x19590;
        host_args.at(6) = x19591;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19592 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19592 != Fp::invalid());
    if (x19592 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19593 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19593 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19594 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19594 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19595 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19595 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19596 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19596 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19597 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19597 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19598 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19598 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19599 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19599 != Fp::invalid());
        host_args.at(0) = x19593;
        host_args.at(1) = x19594;
        host_args.at(2) = x19595;
        host_args.at(3) = x19596;
        host_args.at(4) = x19597;
        host_args.at(5) = x19598;
        host_args.at(6) = x19599;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19600 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19600 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19601 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19601 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19602 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19602 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19603 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19603 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19604 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19604 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19605 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19605 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19606 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19606 != Fp::invalid());
        host_args.at(0) = x19600;
        host_args.at(1) = x19601;
        host_args.at(2) = x19602;
        host_args.at(3) = x19603;
        host_args.at(4) = x19604;
        host_args.at(5) = x19605;
        host_args.at(6) = x19606;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19607 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19607 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19608 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19608 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19609 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19609 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19610 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19611 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19611 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19612 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19612 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19613 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19613 != Fp::invalid());
        host_args.at(0) = x19607;
        host_args.at(1) = x19608;
        host_args.at(2) = x19609;
        host_args.at(3) = x19610;
        host_args.at(4) = x19611;
        host_args.at(5) = x19612;
        host_args.at(6) = x19613;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19614 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19614 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19615 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19615 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19616 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19616 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19617 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19617 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19618 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19618 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19619 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19619 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19620 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19620 != Fp::invalid());
        host_args.at(0) = x19614;
        host_args.at(1) = x19615;
        host_args.at(2) = x19616;
        host_args.at(3) = x19617;
        host_args.at(4) = x19618;
        host_args.at(5) = x19619;
        host_args.at(6) = x19620;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19621 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19621 != Fp::invalid());
    if (x19621 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19622 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19622 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19623 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19623 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19624 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19624 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19625 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19626 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19626 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19627 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19627 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19628 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19628 != Fp::invalid());
        host_args.at(0) = x19622;
        host_args.at(1) = x19623;
        host_args.at(2) = x19624;
        host_args.at(3) = x19625;
        host_args.at(4) = x19626;
        host_args.at(5) = x19627;
        host_args.at(6) = x19628;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19629 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19629 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19630 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19630 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19631 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19631 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19632 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19632 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19633 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19633 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19634 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19634 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19635 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19635 != Fp::invalid());
        host_args.at(0) = x19629;
        host_args.at(1) = x19630;
        host_args.at(2) = x19631;
        host_args.at(3) = x19632;
        host_args.at(4) = x19633;
        host_args.at(5) = x19634;
        host_args.at(6) = x19635;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19636 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19636 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19637 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19637 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19638 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19638 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19639 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19639 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19640 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19640 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19641 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19641 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19642 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19642 != Fp::invalid());
        host_args.at(0) = x19636;
        host_args.at(1) = x19637;
        host_args.at(2) = x19638;
        host_args.at(3) = x19639;
        host_args.at(4) = x19640;
        host_args.at(5) = x19641;
        host_args.at(6) = x19642;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19643 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19644 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19644 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19645 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19645 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19646 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19646 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19647 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19647 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19648 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19648 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19649 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19649 != Fp::invalid());
        host_args.at(0) = x19643;
        host_args.at(1) = x19644;
        host_args.at(2) = x19645;
        host_args.at(3) = x19646;
        host_args.at(4) = x19647;
        host_args.at(5) = x19648;
        host_args.at(6) = x19649;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19650 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x19650 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19651 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x19651 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19652 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x19652 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19653 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x19653 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19654 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x19654 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19655 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x19655 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19656 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x19656 != Fp::invalid());
        host_args.at(0) = x19650;
        host_args.at(1) = x19651;
        host_args.at(2) = x19652;
        host_args.at(3) = x19653;
        host_args.at(4) = x19654;
        host_args.at(5) = x19655;
        host_args.at(6) = x19656;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19657 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19657 != Fp::invalid());
    if (x19657 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19658 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19659 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19660 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19660 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19661 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19661 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19662 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19662 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19663 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19663 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19664 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19664 != Fp::invalid());
        host_args.at(0) = x19658;
        host_args.at(1) = x19659;
        host_args.at(2) = x19660;
        host_args.at(3) = x19661;
        host_args.at(4) = x19662;
        host_args.at(5) = x19663;
        host_args.at(6) = x19664;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19665 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19665 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19666 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19666 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19667 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19667 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19668 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19668 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19669 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19669 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19670 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19670 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19671 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19671 != Fp::invalid());
        host_args.at(0) = x19665;
        host_args.at(1) = x19666;
        host_args.at(2) = x19667;
        host_args.at(3) = x19668;
        host_args.at(4) = x19669;
        host_args.at(5) = x19670;
        host_args.at(6) = x19671;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19672 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19672 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19673 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19673 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19674 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19674 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19675 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19675 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19676 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19676 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19677 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19677 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19678 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19678 != Fp::invalid());
        host_args.at(0) = x19672;
        host_args.at(1) = x19673;
        host_args.at(2) = x19674;
        host_args.at(3) = x19675;
        host_args.at(4) = x19676;
        host_args.at(5) = x19677;
        host_args.at(6) = x19678;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19679 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19679 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19680 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19680 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19681 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19681 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19682 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19682 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19683 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19683 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19684 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19684 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19685 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19685 != Fp::invalid());
        host_args.at(0) = x19679;
        host_args.at(1) = x19680;
        host_args.at(2) = x19681;
        host_args.at(3) = x19682;
        host_args.at(4) = x19683;
        host_args.at(5) = x19684;
        host_args.at(6) = x19685;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19686 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19686 != Fp::invalid());
    if (x19686 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19687 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19687 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19688 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19688 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19689 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19689 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19690 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19690 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19691 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19691 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19692 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19692 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19693 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19693 != Fp::invalid());
        host_args.at(0) = x19687;
        host_args.at(1) = x19688;
        host_args.at(2) = x19689;
        host_args.at(3) = x19690;
        host_args.at(4) = x19691;
        host_args.at(5) = x19692;
        host_args.at(6) = x19693;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19694 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19694 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19695 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19696 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19696 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19697 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19697 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19698 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19698 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19699 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19699 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19700 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19700 != Fp::invalid());
        host_args.at(0) = x19694;
        host_args.at(1) = x19695;
        host_args.at(2) = x19696;
        host_args.at(3) = x19697;
        host_args.at(4) = x19698;
        host_args.at(5) = x19699;
        host_args.at(6) = x19700;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19701 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19701 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19702 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19702 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19703 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19703 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19704 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19704 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19705 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19705 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19706 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19706 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19707 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19707 != Fp::invalid());
        host_args.at(0) = x19701;
        host_args.at(1) = x19702;
        host_args.at(2) = x19703;
        host_args.at(3) = x19704;
        host_args.at(4) = x19705;
        host_args.at(5) = x19706;
        host_args.at(6) = x19707;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19708 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19708 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19709 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19709 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19710 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19710 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19711 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19711 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19712 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19712 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19713 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19713 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19714 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19714 != Fp::invalid());
        host_args.at(0) = x19708;
        host_args.at(1) = x19709;
        host_args.at(2) = x19710;
        host_args.at(3) = x19711;
        host_args.at(4) = x19712;
        host_args.at(5) = x19713;
        host_args.at(6) = x19714;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19715 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x19715 != Fp::invalid());
    if (x19715 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19716 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19716 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19717 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19717 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19718 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19718 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19719 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19719 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19720 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19720 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19721 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19721 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19722 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19722 != Fp::invalid());
        host_args.at(0) = x19716;
        host_args.at(1) = x19717;
        host_args.at(2) = x19718;
        host_args.at(3) = x19719;
        host_args.at(4) = x19720;
        host_args.at(5) = x19721;
        host_args.at(6) = x19722;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19723 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19723 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19724 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19724 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19725 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19725 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19726 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19726 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19727 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19727 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19728 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19728 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19729 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19729 != Fp::invalid());
        host_args.at(0) = x19723;
        host_args.at(1) = x19724;
        host_args.at(2) = x19725;
        host_args.at(3) = x19726;
        host_args.at(4) = x19727;
        host_args.at(5) = x19728;
        host_args.at(6) = x19729;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19730 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19730 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19731 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19731 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19732 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19732 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19733 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19733 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19734 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19734 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19735 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19735 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19736 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19736 != Fp::invalid());
        host_args.at(0) = x19730;
        host_args.at(1) = x19731;
        host_args.at(2) = x19732;
        host_args.at(3) = x19733;
        host_args.at(4) = x19734;
        host_args.at(5) = x19735;
        host_args.at(6) = x19736;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19737 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19737 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19738 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19738 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19739 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19739 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19740 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19740 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19741 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19741 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19742 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19742 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19743 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19743 != Fp::invalid());
        host_args.at(0) = x19737;
        host_args.at(1) = x19738;
        host_args.at(2) = x19739;
        host_args.at(3) = x19740;
        host_args.at(4) = x19741;
        host_args.at(5) = x19742;
        host_args.at(6) = x19743;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19744 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x19744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19745 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x19745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19746 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x19746 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19747 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x19747 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19748 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x19748 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19749 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x19749 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19750 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x19750 != Fp::invalid());
        host_args.at(0) = x19744;
        host_args.at(1) = x19745;
        host_args.at(2) = x19746;
        host_args.at(3) = x19747;
        host_args.at(4) = x19748;
        host_args.at(5) = x19749;
        host_args.at(6) = x19750;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19751 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x19751 != Fp::invalid());
    if (x19751 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19752 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19752 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19753 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19753 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19754 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19754 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19755 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19755 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19756 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19756 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19757 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19757 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19758 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19758 != Fp::invalid());
        host_args.at(0) = x19752;
        host_args.at(1) = x19753;
        host_args.at(2) = x19754;
        host_args.at(3) = x19755;
        host_args.at(4) = x19756;
        host_args.at(5) = x19757;
        host_args.at(6) = x19758;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19759 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19759 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19760 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19760 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19761 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19761 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19762 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19763 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19763 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19764 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19764 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19765 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19765 != Fp::invalid());
        host_args.at(0) = x19759;
        host_args.at(1) = x19760;
        host_args.at(2) = x19761;
        host_args.at(3) = x19762;
        host_args.at(4) = x19763;
        host_args.at(5) = x19764;
        host_args.at(6) = x19765;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19766 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x19766 != Fp::invalid());
    if (x19766 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19767 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19767 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19768 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19768 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19769 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19769 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19770 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19770 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19771 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19771 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19772 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19772 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19773 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19773 != Fp::invalid());
        host_args.at(0) = x19767;
        host_args.at(1) = x19768;
        host_args.at(2) = x19769;
        host_args.at(3) = x19770;
        host_args.at(4) = x19771;
        host_args.at(5) = x19772;
        host_args.at(6) = x19773;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19774 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19774 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19775 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19775 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19776 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19776 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19777 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19777 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19778 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19778 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19779 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19779 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19780 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19780 != Fp::invalid());
        host_args.at(0) = x19774;
        host_args.at(1) = x19775;
        host_args.at(2) = x19776;
        host_args.at(3) = x19777;
        host_args.at(4) = x19778;
        host_args.at(5) = x19779;
        host_args.at(6) = x19780;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19781 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x19781 != Fp::invalid());
    if (x19781 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19782 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19782 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19783 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19783 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19784 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19784 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19785 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19785 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19786 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19786 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19787 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19788 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19788 != Fp::invalid());
        host_args.at(0) = x19782;
        host_args.at(1) = x19783;
        host_args.at(2) = x19784;
        host_args.at(3) = x19785;
        host_args.at(4) = x19786;
        host_args.at(5) = x19787;
        host_args.at(6) = x19788;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19789 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19789 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19790 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19790 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19791 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19791 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19792 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19792 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19793 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19793 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19794 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19794 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19795 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19795 != Fp::invalid());
        host_args.at(0) = x19789;
        host_args.at(1) = x19790;
        host_args.at(2) = x19791;
        host_args.at(3) = x19792;
        host_args.at(4) = x19793;
        host_args.at(5) = x19794;
        host_args.at(6) = x19795;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19796 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x19796 != Fp::invalid());
    if (x19796 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19797 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19798 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19798 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19799 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19799 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19800 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19800 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19801 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19801 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19802 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19802 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19803 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19803 != Fp::invalid());
        host_args.at(0) = x19797;
        host_args.at(1) = x19798;
        host_args.at(2) = x19799;
        host_args.at(3) = x19800;
        host_args.at(4) = x19801;
        host_args.at(5) = x19802;
        host_args.at(6) = x19803;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19804 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19804 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19805 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19805 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19806 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19806 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19807 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19807 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19808 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19808 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19809 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19809 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19810 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19810 != Fp::invalid());
        host_args.at(0) = x19804;
        host_args.at(1) = x19805;
        host_args.at(2) = x19806;
        host_args.at(3) = x19807;
        host_args.at(4) = x19808;
        host_args.at(5) = x19809;
        host_args.at(6) = x19810;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19811 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19811 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19812 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19812 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19813 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19813 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19814 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19814 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19815 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19815 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19816 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19816 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19817 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19817 != Fp::invalid());
        host_args.at(0) = x19811;
        host_args.at(1) = x19812;
        host_args.at(2) = x19813;
        host_args.at(3) = x19814;
        host_args.at(4) = x19815;
        host_args.at(5) = x19816;
        host_args.at(6) = x19817;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19818 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19818 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19819 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19819 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19820 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19820 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19821 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19821 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19822 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19822 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19823 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19823 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19824 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19824 != Fp::invalid());
        host_args.at(0) = x19818;
        host_args.at(1) = x19819;
        host_args.at(2) = x19820;
        host_args.at(3) = x19821;
        host_args.at(4) = x19822;
        host_args.at(5) = x19823;
        host_args.at(6) = x19824;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x19825 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x19825 != Fp::invalid());
    if (x19825 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19826 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19826 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19827 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19828 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19828 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19829 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19829 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19830 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19830 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19831 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19831 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19832 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19832 != Fp::invalid());
        host_args.at(0) = x19826;
        host_args.at(1) = x19827;
        host_args.at(2) = x19828;
        host_args.at(3) = x19829;
        host_args.at(4) = x19830;
        host_args.at(5) = x19831;
        host_args.at(6) = x19832;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19833 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19833 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19834 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19834 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19835 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19835 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19836 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19836 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19837 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19838 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19838 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19839 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19839 != Fp::invalid());
        host_args.at(0) = x19833;
        host_args.at(1) = x19834;
        host_args.at(2) = x19835;
        host_args.at(3) = x19836;
        host_args.at(4) = x19837;
        host_args.at(5) = x19838;
        host_args.at(6) = x19839;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19840 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19840 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19841 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19842 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19842 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19843 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19843 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19844 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19844 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19845 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19845 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19846 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19846 != Fp::invalid());
        host_args.at(0) = x19840;
        host_args.at(1) = x19841;
        host_args.at(2) = x19842;
        host_args.at(3) = x19843;
        host_args.at(4) = x19844;
        host_args.at(5) = x19845;
        host_args.at(6) = x19846;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19847 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19847 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19848 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19848 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19849 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19849 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19850 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19850 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19851 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19851 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19852 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./cirgen/compiler/edsl/component.h":154:27))
        auto x19853 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19853 != Fp::invalid());
        host_args.at(0) = x19847;
        host_args.at(1) = x19848;
        host_args.at(2) = x19849;
        host_args.at(3) = x19850;
        host_args.at(4) = x19851;
        host_args.at(5) = x19852;
        host_args.at(6) = x19853;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x19456;
}

} // namespace risc0::circuit::rv32im
// clang-format on
